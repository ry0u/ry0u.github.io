<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二分探索 on ry0u_ydのblog</title>
    <link>http://ry0u.github.io/tags/%E4%BA%8C%E5%88%86%E6%8E%A2%E7%B4%A2/index.xml</link>
    <description>Recent content in 二分探索 on ry0u_ydのblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="http://ry0u.github.io/tags/%E4%BA%8C%E5%88%86%E6%8E%A2%E7%B4%A2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSAcademy round19 Cities Robbery</title>
      <link>http://ry0u.github.io/comp/2017-02-26-CSAcademy-round19-Cities-Robbery/</link>
      <pubDate>Sun, 26 Feb 2017 22:42:04 +0900</pubDate>
      
      <guid>http://ry0u.github.io/comp/2017-02-26-CSAcademy-round19-Cities-Robbery/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://csacademy.com/contest/round-19/#task/cities-robbery&#34;&gt;https://csacademy.com/contest/round-19/#task/cities-robbery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$1$次元上に$N$個の都市があり，それぞれ座標が$x_i$で価値が$w_i$である．$X$にいて，$K$動くことが出来るときに，得られる価値の和を最大化する．&lt;/p&gt;

&lt;p&gt;現在の位置よりも右側にいるのか，左側にいるのかで分けて持つ．右側を折り返して左側に行くパターンと，左側を折り返して右側に行くパターンの$2$つに分かれる．何個まで持つかを配列にして持っておけば，価値にマイナスはないので単調増加列になるため，片方を決め打ちすると，残りの距離からその場合の最大の価値を二分探索で求めることができる．$(0, 0)$を追加して片方を何も取らない場合も一緒にした．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

#define rep(i,n) for(int i=0;i&amp;lt;(int)(n);i++)
#define REP(i,k,n) for(int i=k;i&amp;lt;(int)(n);i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1&amp;lt;&amp;lt;30
#define mp make_pair
#define fi first
#define se second

using namespace std;
typedef long long ll;
typedef pair&amp;lt;int,ll&amp;gt; P;

int main() {
	int n, x, k;
	cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; x &amp;gt;&amp;gt; k;

	ll start = 0;
	vector&amp;lt;P&amp;gt; v(n);
	rep(i, n) {
		cin &amp;gt;&amp;gt; v[i].fi &amp;gt;&amp;gt; v[i].se;
		v[i].fi -= x;
	}

	vector&amp;lt;P&amp;gt; a, b;
	rep(i, n) {
		if(v[i].fi == 0) start += v[i].se;

		if(v[i].fi &amp;lt; 0) a.push_back(mp(-v[i].fi, v[i].se));
		else b.push_back(v[i]);
	}

	a.push_back(mp(0, 0));
	sort(a.begin(), a.end());

	b.push_back(mp(0, 0));
	sort(b.begin(), b.end());

	vector&amp;lt;ll&amp;gt; aid(a.size());
	vector&amp;lt;ll&amp;gt; aval(a.size());
	rep(i, a.size()) {
		aid[i] = a[i].fi;
		aval[i] = a[i].se;
	}

	REP(i, 1, a.size()) aval[i] += aval[i-1];

	vector&amp;lt;ll&amp;gt; bid(b.size());
	vector&amp;lt;ll&amp;gt; bval(b.size());
	rep(i, b.size()) {
		bid[i] = b[i].fi;
		bval[i] = b[i].se;
	}

	REP(i, 1, b.size()) bval[i] += bval[i-1];

	ll ans = 0;
	rep(i, a.size()) {
		if(aid[i] &amp;gt; k) break;
		ans = max(ans, aval[i] + start);

		// aからi個とる
		ll diff = k - 2 * aid[i];
		
		if(diff &amp;lt; 0) continue;

		vector&amp;lt;ll&amp;gt;::iterator it = upper_bound(bid.begin(), bid.end(), diff);
		if(it == bid.end()) {
			ans = max(ans, aval[i] + start + bval[bval.size()-1]);
		} else {
			int id = (it - bid.begin());
			if(id == 0) continue;
			id--;

			ans = max(ans, aval[i] + start + bval[id]);
		}
	}

	rep(i, b.size()) {
		if(bid[i] &amp;gt; k) break;
		ans = max(ans, bval[i] + start);

		// aからi個とる
		ll diff = k - 2 * bid[i];

		if(diff &amp;lt; 0) continue;

		vector&amp;lt;ll&amp;gt;::iterator it = upper_bound(aid.begin(), aid.end(), diff);
		if(it == aid.end()) {
			ans = max(ans, bval[i] + start + aval[aval.size()-1]);
		} else {
			int id = (it - aid.begin());
			if(id == 0) continue;
			id--;

			ans = max(ans, bval[i] + start + aval[id]);
		}
	}

	cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>University CodeSprint 2 Game of Two Stacks</title>
      <link>http://ry0u.github.io/comp/2017-02-21-University-CodeSprint-2-GameOfTwoStacks/</link>
      <pubDate>Tue, 21 Feb 2017 23:44:43 +0900</pubDate>
      
      <guid>http://ry0u.github.io/comp/2017-02-21-University-CodeSprint-2-GameOfTwoStacks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.hackerrank.com/contests/university-codesprint-2/challenges/game-of-two-stacks&#34;&gt;https://www.hackerrank.com/contests/university-codesprint-2/challenges/game-of-two-stacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2つのstack$A, B$が与えられる．どちらのstackからも数字を取ってよい．取った数字の和が$x$より大きくなった時点で失格となる．失格にならずに取った数字の和の最大値を求める．&lt;/p&gt;

&lt;p&gt;stackなので$A, B$どちらも上からのみ数字を取ることができる．$v[i] = $上から$i$番目まで取った時の数字の和とすれば，$v$は広義単調増加となる．片方を$i$番目まで取ると決め打ちすると，もう片方からは最大で$x - v[i]$まで取ることができ，これは二分探索で求めることができる．$n, m \leq 10 ^5$なので$O(n log n)$で間に合う．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;

#define rep(i,n) for(int i=0;i&amp;lt;(int)(n);i++)
#define REP(i,k,n) for(int i=k;i&amp;lt;(int)(n);i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1&amp;lt;&amp;lt;30
#define mp make_pair
#define fi first
#define se second

using namespace std;
typedef long long ll;
typedef pair&amp;lt;int,int&amp;gt; P;

int main() {
	int g;
	cin &amp;gt;&amp;gt; g;

	vector&amp;lt;ll&amp;gt; a, b, A, B;
	rep(q, g) {
		int n, m; ll x;
		cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; x;

		a.clear(); b.clear();
		a.resize(n); b.resize(m);
		rep(i, n) cin &amp;gt;&amp;gt; a[i];
		rep(i, m) cin &amp;gt;&amp;gt; b[i];

		A = a; B = b;
		rep(i, n - 1) A[i+1] += A[i];
		rep(i, m - 1) B[i+1] += B[i];

		int ans = 0;

		rep(i, n + 1) {
			ll res = (i ? A[i-1] : 0);
			
			if(res &amp;lt;= x) ans = max(ans, i);
			else continue;

			ll diff = x - res + 1;
			vector&amp;lt;ll&amp;gt;::iterator it = lower_bound(B.begin(), B.end(), diff);
			int id = it - B.begin();

			if(id == 0) continue;
			ans = max(ans, i + id);

		}

		cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
	}

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>