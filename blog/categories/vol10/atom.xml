<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vol10 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/vol10/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-12T01:24:24+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1074 Poplularity Estimation]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/aoj1074-poplularity-estimation/"/>
    <updated>2016-05-12T01:15:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/aoj1074-poplularity-estimation</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article-full"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1074">Popularity Estimation | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>最初は各時間に名前を突っ込んで，時間で見て各キャラクターにポイントを配る方式にしてWAを量産した．間違っている所を発見することができず(諦めの気持ちで)，<script type="math/tex"> cnt[i] (時間i </script>にいた人数)として，各キャラクターで見ていった結果普通にACが取れた．ポイントについては3行で場合分けが書いてあるけど，1行で<script type="math/tex"> p[s[i]] += n - cnt[d[i][j]] + 1 </script>とかけた．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    while(cin &gt;&gt; n &amp;&amp; n) {
        map&lt;string, int&gt; p;
        int cnt[35];
        memset(cnt, 0, sizeof(cnt));

        string s[50];
        int m[50], d[50][50];
        rep(i, n) {
            cin &gt;&gt; s[i] &gt;&gt; m[i];

            rep(j, m[i]) {
                cin &gt;&gt; d[i][j];
                cnt[d[i][j]]++;
            }
        }

        rep(i, n) {
            rep(j, m[i]) {
                p[s[i]] += n - cnt[d[i][j]] + 1;
            }
        }

        int ans = INF;
        string res = "";
        rep(i, n) {
            if(ans &gt; p[s[i]]) {
                ans = p[s[i]];
                res = s[i];
            } else if(ans == p[s[i]] &amp;&amp; res &gt; s[i]) {
                ans = p[s[i]];
                res = s[i];
            }
        }

        cout &lt;&lt; ans &lt;&lt; " " &lt;&lt; res &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1086 Live Schedule]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/aoj1086-live-schedule/"/>
    <updated>2016-05-12T00:53:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/aoj1086-live-schedule</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1086">Live Schedule | Aizu Online Judge</a></h4><p>YOKARI TAMURAは全国的に有名なアーティストである。今月YOKARIは D 日間にわたってライブツアーを行う。ツアーのスケジュールの決定においてこの国を C 種類の地域でわける。YOKARIがある地域でライブを行うことにより利益を得られ、これは正の整数で表される。YOKARIは原則として 1 日に最大 1 つまでライブを行う。ただし、ある地域でライブを行った後、隣接する地域でライブを行える場合はその地域で同じ日に再びライブを行うことができる。この条件を満たす限り、地域を移動しながら何度もライブを行うことができる。また、同じ日に同じ地域でライブを 2 度以上行うことはできない。さらに、同じ日に 2 回以上のライブを行う日の数はツアー期間中合計 X 以下でなければならない。</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p><script type="math/tex; mode=display">
    dp[i][j][k] := i日目に疲労度jで2回以上ライブを行った回数がkの時の売上の最大値
</script></p>

<p>として，動的計画法．ライブをし終わった地域から，次の日は開始かと思っていて状態に"町<script type="math/tex"> i </script>&ldquo;にいる時，というのを追加していたがいらなかった．ライブを始める町と終わる町はどこでも良いので <script type="math/tex"> C ^2 </script>で区間を全探索し， その区間の疲労度を足した次の日に遷移可能とした．<script type="math/tex"> 2 </script>回以上続けてライブを続けない場合は制限がないので，別に分けた．<br/>
WAが取れなかった原因は，ライブを行わない，というのを追加していないことだった．区間は同じだが後々にライブをした方が利益が高い場合があるので，この行動を追加しなければおかしかった．<br/>
また <script type="math/tex"> E_{i, j} = 0 </script>の時にはライブを行うことが出来ない，という条件に気が付かず時間を溶かした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;iomanip&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

// i日目に疲労度jで2回以上のライブ回数kの時の売上の最大値
ll dp[35][55][10];
ll E[20][35], F[20][35];

int main() {
    ll c, d, w, x;
    while(cin &gt;&gt; c &gt;&gt; d &gt;&gt; w &gt;&gt; x) {
        if(c == 0 &amp;&amp; d == 0 &amp;&amp; w == 0 &amp;&amp; x == 0) break;

        memset(E, 0, sizeof(E));
        rep(i, c) {
            rep(j, d) cin &gt;&gt; E[i][j];
        }

        memset(F, 0, sizeof(F));
        rep(i, c) {
            rep(j, d) cin &gt;&gt; F[i][j];
        }

        // rep(i, c) {
        //  rep(j, d) {
        //      cout &lt;&lt; "(" &lt;&lt; E[i][j] &lt;&lt; ", " &lt;&lt; F[i][j] &lt;&lt; ") ";
        //  }
        //  cout &lt;&lt; endl;
        // }

        memset(dp, 0, sizeof(dp));

        rep(i, d) {
            rep(j, w + 1) {
                rep(k, x + 1) {
                    dp[i+1][j][k] = max(dp[i+1][j][k], dp[i][j][k]);

                    rep(s, c) {
                        if(E[s][i] == 0) continue;

                        ll sum = E[s][i];
                        ll res = F[s][i];

                        if(j + res &lt;= w) {
                            dp[i+1][j+res][k] = max(dp[i+1][j+res][k], dp[i][j][k] + sum);
                        }

                        REP(t, s + 1, c) {
                            if(E[t][i] == 0) break;

                            sum += E[t][i];
                            res += F[t][i];

                            if(j + res &lt;= w &amp;&amp; k + 1 &lt;= x) {
                                dp[i+1][j+res][k+1] = max(dp[i+1][j+res][k+1], dp[i][j][k] + sum);
                            }
                        }
                    }
                }
            }
        }

        // rep(i, d + 1) {
        //  cout &lt;&lt; " ----- day : " &lt;&lt; i &lt;&lt; endl;
        //  rep(j, w + 1) {
        //      rep(k, x + 1) {
        //          cout &lt;&lt; setw(3) &lt;&lt; dp[i][j][k] &lt;&lt; " ";
        //      }
        //      cout &lt;&lt; endl;
        //  }
        // }

        ll ans = 0;
        // rep(i, d + 1) {
            rep(j, w + 1) {
                rep(k, x + 1) {
                    ans = max(ans, dp[d][j][k]);
                }
            }
        // }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
