<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: メモ化再帰 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/memohua-zai-gui/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-17T19:05:07+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JAG Contest 2016 Domestic D インビジブル]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/27/jag-contest-2016-domestic-d-inbiziburu/"/>
    <updated>2016-04-27T23:39:09+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/27/jag-contest-2016-domestic-d-inbiziburu</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article"><h4><a href="http://jag2016-domestic.contest.atcoder.jp/tasks/jag2016secretspring_d">D: インビジブル - JAG Contest 2016 Domestic | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>状態を(<script type="math/tex"> a </script>のデッキから何枚取ったか， <script type="math/tex"> b </script>のデッキから何枚取ったか，場のスタック，何ターン目，前回のスタックが空の状態でパスをしたかどうか)にしてメモ化再帰．minimaxみたいな感じでプレイヤー <script type="math/tex"> 1 </script>のターンでは <script type="math/tex"> c - d </script>の最大化，プレイヤー <script type="math/tex"> 2 </script>のターンでは <script type="math/tex"> c - d </script>の最小化をした．</p>

<p>本番では，メモ化するときに，stackの状態を持たねばならないと思っていたが，スタックのサイズだけを持てば良いことに気付けなかった．スタックが空の状態で無くてもパスパスをした時点で終了だと思い込んでいた．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;stack&gt;

#define REP(i, k, n) for(int i = k; i &lt; n; i++) 
#define rep(i, n) for(int i = 0; i &lt; n; i++) 
#define INF 1&lt;&lt;30

using namespace std;
typedef pair&lt;int, int&gt; P;

int n, m;
vector&lt;int&gt; a, b;

int f(stack&lt;P&gt; &amp;st) {
    int c = 0, d = 0;
    bool cf = true, df = true;
    while(st.size()) {
        P p = st.top(); st.pop();
        if(p.first == 0) {
            if(p.second == -1) {
                df = false;
            } else if(cf) {
                c += p.second;
            }
        } else {
            if(p.second == -1) {
                cf = false;
            } else if(df) {
                d += p.second;
            }
        }
    }
    return c - d;
}

int memo[55][55][2][2][105];

int dfs(int i, int j, stack&lt;P&gt; st, int turn, bool flag) {
    if(memo[i][j][turn % 2][flag][st.size()] != INF) return memo[i][j][turn % 2][flag][st.size()];

    int ret = 0, size = st.size();
    if(flag) {
        if(turn % 2 == 0) {
            ret = 0;
            if(i != n) {
                st.push(P(0, a[i]));
                ret = max(ret, dfs(i + 1, j, st, turn + 1, false));
                st.pop();
            }
        } else {
            ret = 0;
            if(j != m) {
                st.push(P(1, b[j]));
                ret = min(ret, dfs(i, j + 1, st, turn + 1, false));
                st.pop();
            }
        }
    } else {
        if(turn % 2 == 0) {
            ret = -INF;
            if(i != n) {
                st.push(P(0, a[i]));
                ret = max(ret, dfs(i + 1, j, st, turn + 1, false));
                st.pop();
            }

            bool ch = (st.size() == 0);
            int d = f(st);
            ret = max(ret, dfs(i, j, st, turn + 1, ch) + d);
        } else {
            ret = INF;

            if(j != m) {
                st.push(P(1, b[j]));
                ret = min(ret, dfs(i, j + 1, st, turn + 1, false));
                st.pop();
            }

            bool ch = (st.size() == 0);
            int d = f(st);
            ret = min(ret, dfs(i, j, st, turn + 1, ch) + d);
        }
    }

    return memo[i][j][turn % 2][flag][size] = ret;
}

int main() {
    cin &gt;&gt; n &gt;&gt; m;

    a.resize(n);
    rep(i, n) cin &gt;&gt; a[i];

    b.resize(m);
    rep(i, m) cin &gt;&gt; b[i];

    stack&lt;P&gt; st;
    rep(i, 55) rep(j, 55) rep(k, 2) rep(l, 2) rep(o, 105) memo[i][j][k][l][o] = INF;
    cout &lt;&lt; dfs(0, 0, st, 0, false) &lt;&lt; endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ2369 CatChecker]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/23/aoj2369-catchecker/"/>
    <updated>2016-03-23T20:34:54+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/23/aoj2369-catchecker</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2369">CatChecker | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>区間 <script type="math/tex"> [l, r] </script>がねこ鳴き声か探索する．区間の端が <script type="math/tex"> m </script>， <script type="math/tex"> w </script>で真ん中の <script type="math/tex"> e </script>で区切ってみる．メモ化しないとTLEした．逆からやると一意に決まる系かと思ったけどそんなことなかった．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

string s;
int memo[505][505];

bool dfs(int l, int r) {
    if(l &gt; r) return true;
    if(memo[l][r] != -1) return memo[l][r];

    if(s[l] == 'm' &amp;&amp; s[r] == 'w') {
        REP(i, l+1, r) {
            if(s[i] == 'e') {
                if(dfs(l+1, i-1) &amp;&amp; dfs(i+1, r-1)) {
                    return memo[l][r] = true;
                }
            }
        }
    }
    return memo[l][r] = false;
}

int main() {
    cin &gt;&gt; s;
    memset(memo, -1, sizeof(memo));

    if(dfs(0, s.size()-1)) {
        cout &lt;&lt; "Cat" &lt;&lt; endl;
    } else {
        cout &lt;&lt; "Rabbit" &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0615 Cake2]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0615-cake2/"/>
    <updated>2016-03-18T16:03:17+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0615-cake2</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0615">Cake 2 | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>左端と右端を持ってdpだろうとずっと考えていたけど全く分からなかった．調べた．</p>

<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://lattemalta.hatenablog.jp/entry/2015/09/07/220749">aoj0615:Cake2 - らての精進日記</a></h4><p>問題文 http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0615</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<p>非常に分かりやすかった．左端と右端を持つ区間DPを初めて書いた（写経）．バームクーヘンとかの時は円環を配列を繋げて表現する時に2つを繋げれば良かったが，とり方によってどっちにずれるかわからないので，真ん中を基準として左に1個，右に1個つなげる．</p>

<ul>
<li>区間の偶奇でどちらの順番かがわかる</li>
<li>左端から一個取る <script type="math/tex"> \to \rm{dfs}(l-1, r) + A[l]</script></li>
<li>右端から一個取る <script type="math/tex"> \to \rm{dfs}(l, r-1) + A[r]</script></li>
<li>memoに代入するのを忘れない</li>
</ul>


<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;ll,ll&gt; P;

int n;
vector&lt;ll&gt; v;
ll memo[4005][6005];

ll dfs(int l, int r) {
    if(memo[l][r] != -1) return memo[l][r];

    int turn = r - l - 1;

    if(turn == n) return memo[l][r] = 0;
    else if(turn % 2 == 1) {
        if(v[l] &lt; v[r]) {
            return memo[l][r] = dfs(l, r+1);
        } else {
            return memo[l][r] = dfs(l-1, r);
        }
    } else {
        return memo[l][r] = max(dfs(l-1, r) + v[l], dfs(l, r+1) + v[r]);
    }
}

int main() {
    cin &gt;&gt; n;

    v.resize(n*3);
    rep(i, n) { 
        cin &gt;&gt; v[i];
        v[i+n] = v[i];
        v[i+n+n] = v[i];
    }

    ll ans = 0;
    memset(memo, -1, sizeof(memo));

    rep(i, n) {
        ans = max(ans, dfs(i-1+n, i+1+n) + v[i]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
