<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: グラフ | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/gurahu/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-28T23:45:49+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1280 Slim Span]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/21/aoj1280-slim-span/"/>
    <updated>2016-05-21T02:41:52+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/21/aoj1280-slim-span</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1280">Slim Span</a></h4><p>Given an undirected weighted graph G, you should find one of spanning trees specified as follows. A spanning tree T is a tree (a connected subgraph without cycles) which connects all the n vertices with n - 1 edges.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>The <script type="math/tex"> slimness </script> of a spanning tree Tは全域木を構成する辺の最大値 <script type="math/tex"> - </script>最小値と定義される．この値の最小値を求める．<br/>
出来るだけコストが近いものを使った方が良いので，まず使うコストの一番小さいものを決めて，それからコストを増やしていく．全域木が構成出来た時点でのコストのminを取る． <script type="math/tex"> O(nm) </script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct UnionFind {
    vector&lt;int&gt; par,rank;
    int N;

    UnionFind(int n) {
        N = n;
        par.resize(n);
        rank.resize(n);

        rep(i,n) {
            par[i] = i;
            rank[i] = 0;
        }
    }

    int find(int x) {
        if(par[x] == x) return x;
        else return par[x] = find(par[x]);
    }

    void unite(int x,int y) {
        x = find(x);
        y = find(y);

        if(x == y) return;

        if(rank[x] &lt; rank[y]) {
            par[x] = y;
        }
        else {
            par[y] = x;
            if(rank[x] == rank[y]) rank[x]++;
        }
    }

    bool same(int x,int y) {
        return find(x) == find(y);
    }

    int size() {
        int cnt = 0;
        rep(i,N) if(find(i) == i) cnt++;
        return cnt;
    }
};

int main() {
    int n, m;

    while(cin &gt;&gt; n &gt;&gt; m) {
        if(n == 0 &amp;&amp; m == 0) break;

        vector&lt;int&gt; a(m), b(m), c(m);
        map&lt;int, vector&lt;P&gt; &gt; es;
        rep(i, m) {
            cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];
            a[i]--; b[i]--;

            es[c[i]].push_back(P(a[i], b[i]));
        }

        int ans = INF;

        REP(i, 1, 10001) {
            if(es[i].size() == 0) continue;
            UnionFind uf(n);
            REP(j, i, 10001) {
                if(es[j].size() == 0) continue;
                rep(k, es[j].size()) {
                    int a = es[j][k].first;
                    int b = es[j][k].second;

                    if(uf.same(a, b)) continue;
                    uf.unite(a, b);
                }

                if(uf.size() == 1) {
                    ans = min(ans, j - i);
                    break;
                }
            }
        }

        if(ans == INF) cout &lt;&lt; -1 &lt;&lt; endl;
        else cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ2005 Water Pipe Construction]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/20/aoj2005-water-pipe-construction/"/>
    <updated>2016-05-20T23:21:05+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/20/aoj2005-water-pipe-construction</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2005">Water Pipe Construction | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>水源<script type="math/tex"> s </script>から， <script type="math/tex"> 2つの </script>主要な基地 <script type="math/tex"> g_1, g_2 </script>まで水を運ぶための導水管の敷設にかかるコストを最小化する．<br/>
以下の<script type="math/tex"> 3 </script>パターンに分かれる．</p>

<p><img src="/images/AOJ/2005-1.png">
<img src="/images/AOJ/2005-2.png">
<img src="/images/AOJ/2005-3.png"></p>

<p>　<script type="math/tex"> n(3 \leq n \leq 100) </script>なのでwarshall-floydで最短経路を出してこの <script type="math/tex"> 3 </script>パターンのminを取った．<br/>
経路復元がいるかと思ったけど，いらなかった．もし <script type="math/tex"> s \to g1 \to g2 </script>で <script type="math/tex"> s \to g1 </script>と <script type="math/tex"> g1 \to g2 </script>の通る頂点に重なりがある場合，重複して道を数えているのでそのパターンではなく，パターン <script type="math/tex"> 3 </script>のケースの方が良い．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

ll d[105][105];
int to[105][105];

void warshall_floyd(int n, int m) {
    rep(i, n) rep(j, n) d[i][j] = INF;
    rep(i, n) d[i][i] = 0;

    rep(i, n) rep(j, n) to[i][j] = j;

    //input
    rep(i, m) {
        int a, b, c;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;

        a--; b--;
        d[a][b] = c;
        // d[b][a] = c;
    }

    rep(k,n) {
        rep(i,n) {
            rep(j,n) {
                if(d[i][k] == INF || d[k][j] == INF) continue;
                if(d[i][j] &gt; d[i][k] + d[k][j]) {
                    d[i][j] = d[i][k] + d[k][j];
                    to[i][j] = to[i][k];
                }
            }
        }
    }
}

vector&lt;int&gt; path(int s, int g) {
    int cur = s;
    vector&lt;int&gt; ret;
    for(; cur != g; cur = to[cur][g]) {
        ret.push_back(cur);
    }

    ret.push_back(g);
    return ret;
}

int main() {
    int n, m, s, g1, g2;
    while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; g1 &gt;&gt; g2) {
        if(n == 0 &amp;&amp; m == 0 &amp;&amp; s == 0 &amp;&amp; g1 == 0 &amp;&amp; g2 == 0) break;

        s--; g1--; g2--;
        warshall_floyd(n, m);

        ll ans = INF;
        rep(i, n) {
            ans = min(ans, d[s][i] + d[i][g1] + d[i][g2]);
        }

        ans = min(ans, d[s][g1] + d[g1][g2]);
        ans = min(ans, d[s][g2] + d[g2][g1]);

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1505 Dungeon]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/21/aoj1505-dungeon/"/>
    <updated>2016-04-21T14:26:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/21/aoj1505-dungeon</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1505">Dungeon | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>まず最初dijkstraの始点を <script type="math/tex"> 0, n-1 </script>としてスタート地点からの最短経路と，ゴール地点からの最短経路を出しておく．これで各クエリに対して<script type="math/tex"> O(n) </script>で答えられるようになったが， <script type="math/tex">1 \leq n \leq 10 ^5, 1 \leq q \leq 10 ^5</script>なので間に合わない．<br/>
(スタート地点からの最短コスト, 頂点番号)のpairで，(ゴール地点からの最短コスト, 頂点番号)のpairでsortする．また頂点番号がsort後の配列のどこのindexかを持っておく．</p>

<p>スタート地点からのコスト</p>

<table>
<thead>
<tr>
<th style="text-align:center;">index</th>
<th style="text-align:center;">0</th>
<th style="text-align:center;">1</th>
<th style="text-align:center;">2</th>
<th style="text-align:center;">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">cost</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">3</td>
</tr>
<tr>
<td style="text-align:center;">頂点</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
</tr>
</tbody>
</table>


<p>ゴール地点からのコスト</p>

<table>
<thead>
<tr>
<th style="text-align:center;">index</th>
<th style="text-align:center;">0</th>
<th style="text-align:center;">1</th>
<th style="text-align:center;">2</th>
<th style="text-align:center;">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">cost</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">4</td>
</tr>
<tr>
<td style="text-align:center;">頂点</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">1</td>
</tr>
</tbody>
</table>


<p>スタート地点に関して頂点番号 <script type="math/tex"> _i </script>のsort後の配列のindexの変換テーブル</p>

<table>
<thead>
<tr>
<th style="text-align:center;">頂点</th>
<th style="text-align:center;">0</th>
<th style="text-align:center;">1</th>
<th style="text-align:center;">2</th>
<th style="text-align:center;">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">index</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
</tr>
</tbody>
</table>


<p>次にクエリ <script type="math/tex"> q_i </script>の <script type="math/tex"> (fg, fs, クエリ番号) </script>でsortする． 少なくとも<script type="math/tex"> fg </script>かかる，という制限なので<script type="math/tex"> fg </script>を優先してsortすれば，それ以前のものは候補に上がらないので，省いて良い．この省くというのを表現するのにBITを用いた．<script type="math/tex"> fg </script>より小さい所は変換テーブルを用いてそのindexに <script type="math/tex"> +1 </script>する．次に <script type="math/tex"> fs </script>以下を満たす最大のindex持ってきてBITを用いてその区間和を引く．</p>

<p>説明が全く出来ている気がしない．後で見直し</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;61
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    ll cost;

    edge(int t,ll c) : to(t),cost(c) {}
    edge(int f,int t,ll c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[100005];
ll d[100005], d2[100005];

void dijkstra(int s, int n) {
    priority_queue&lt;pair&lt;ll, ll&gt; , vector&lt;pair&lt;ll, ll&gt; &gt;, greater&lt;pair&lt;ll, ll&gt; &gt; &gt; que;
    fill(d, d+n, INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i, G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}

struct BIT {
    vector&lt;int&gt; bit;

    BIT(int n) : bit(n+1) {}

    int sum(int i) {
        int s = 0;
        while(i &gt; 0) {
            s += bit[i];
            i -= i &amp; -i;
        }
        return s;
    }

    void add(int i,int x) {
        while(i &lt;= bit.size()) {
            bit[i] += x;
            i += i &amp; -i;
        }
    }
};

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    rep(i, m) {
        ll a, b, c;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;

        G[a].push_back(edge(b, c));
        G[b].push_back(edge(a, c));
    }

    dijkstra(n-1, n);
    memset(d2, 0, sizeof(d2));
    rep(i, n) {
        d2[i] = d[i];
    }

    dijkstra(0, n);

    vector&lt;ll&gt; d3(n);
    vector&lt;pair&lt;ll, int&gt; &gt; D, D2;
    rep(i, n) {
        d3[i] = d[i];
        D.push_back(mp(d[i], i));
        D2.push_back(mp(d2[i], i));
    }

    sort(d3.begin(), d3.end());
    sort(D.begin(), D.end());
    sort(D2.begin(), D2.end());

    map&lt;int, int&gt; ma;
    rep(i, n) {
        ma[ D[i].second ] = i;
    }

    int q;
    cin &gt;&gt; q;

    vector&lt;pair&lt;pair&lt;ll, ll&gt; , int&gt; &gt; query(q);

    rep(i, q) {
        ll s, g;
        cin &gt;&gt; s &gt;&gt; g;

        query[i] = mp(mp(g, s), i);
    }

    sort(query.begin(), query.end());

    BIT bit(n + 5);
    vector&lt;P&gt; ans;
    int start = 0;
    rep(i, q) {
        ll s = query[i].first.second;
        ll g = query[i].first.first;
        int id = query[i].second;

        for(; start &lt; n; start++) {
            if(g &gt; D2[start].first) {
                int k = ma[ D2[start].second ];
                bit.add(k + 1, 1);
                continue;
            } else break;
        }

        vector&lt;ll&gt;::iterator ite = upper_bound(d3.begin(), d3.end(), s);
        int k = ite - d3.begin() - 1;
        if(k &lt; 0) {
            ans.push_back(mp( id, 0));
        } else {
            int res = k + 1;
            res -= bit.sum(k + 1);
            ans.push_back(mp( id, res));
        }
    }

    sort(ans.begin(), ans.end());

    rep(i, ans.size()) {
        cout &lt;&lt; ans[i].second &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC012D バスと割けられない運命]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc012d-basutoge-kerarenaiyun-ming/"/>
    <updated>2016-04-03T17:27:51+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc012d-basutoge-kerarenaiyun-ming</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://abc012.contest.atcoder.jp/tasks/abc012_4">D: バスと避けられない運命 - AtCoder Beginner Contest 012 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>バス停の数<script type="math/tex"> N </script>が <script type="math/tex"> 1 \leq N \leq 300 </script>と小さいので，愚直にそこを始点とした最短経路を求め，最大値の最小値を取った． <script type="math/tex"> O(N ^2) </script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;60
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    ll cost;

    edge(int t, ll c) : to(t),cost(c) {}
    edge(int f, int t, ll c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[305];
ll d[305];

void dijkstra(int s, int n) {
    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;
    fill(d, d+n, INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i, G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}


int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    rep(i, m) {
        ll s, t, c;
        cin &gt;&gt; s &gt;&gt; t &gt;&gt; c;
        s--; t--;

        G[s].push_back(edge(t, c));
        G[t].push_back(edge(s, c));
    }

    ll ans = INF;
    rep(i, n) {
        dijkstra(i, n);
        ll res = 0;
        rep(j, n) {
            res = max(res, d[j]);
        }

        ans = min(ans, res);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1347 Shopping]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/26/aoj1347-shopping/"/>
    <updated>2016-03-26T21:44:41+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/26/aoj1347-shopping</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1347">Shopping | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>まず最初に，全ての場所に行って帰ってを行うグラフを考える．</p>

<p><img src="/images/AOJ/1347-1.png"></p>

<p>ここから実際に戻らなければいけない区間を出して</p>

<p><img src="/images/AOJ/1347-2.png"></p>

<p>その区間でない場所は <script type="math/tex"> 1 </script>本あればいいので <script type="math/tex"> -2 </script>する．</p>

<p><img src="/images/AOJ/1347-3.png"></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;int&gt; c(m), d(m);
    rep(i, m) cin &gt;&gt; c[i] &gt;&gt; d[i];

    int cnt[1005];
    memset(cnt, 0, sizeof(cnt));

    rep(i, m) {
        REP(j, c[i], d[i]) {
            cnt[j]++;
        }
    }

    int ans = 3 * (n + 1);
    rep(i, n + 1) {
        if(cnt[i] == 0) {
            ans -= 2;
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
