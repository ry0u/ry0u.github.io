<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 動的計画法 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/dong-de-ji-hua-fa/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-02-22T23:04:07+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0579 Hot days]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/22/aoj0579-hot-days/"/>
    <updated>2016-02-22T22:24:12+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/22/aoj0579-hot-days</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0579">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0579</a></p>

<!-- more -->


<p><script type="math/tex; mode=display">
    dp[i][j] := i日目に服jを着た時の最大値 \
</script>
として，最大化したい値は</p>

<p><script type="math/tex; mode=display">
    |C<em>{x_1} - C</em>{x_2}| + |C<em>{x_2} - C</em>{x_3}| + \cdots +  |C<em>{x</em>{D-1}} - C_{x_D}|
</script></p>

<p>なので，<script type="math/tex"> 1日目に切れる服には0を入れておき， i-1日目からi日目に遷移する．(2 \leq i \leq D)</script><br/>
遷移可能(<script type="math/tex">i</script>日目の最高気温によって服が着れるか着れないか)な場合，<script type="math/tex">i-1</script>日目に何を着ていた場合が値が最大になるかを選ぶ．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int d, n;
    cin &gt;&gt; d &gt;&gt; n;

    vector&lt;int&gt; t(d);
    rep(i, d) cin &gt;&gt; t[i];

    vector&lt;int&gt; a(n), b(n), c(n);
    rep(i, n) cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];

    int dp[205][205];
    rep(i, 205) rep(j, 205) dp[i][j] = -1;

    rep(i, n) {
        if(a[i] &lt;= t[0] &amp;&amp; t[0] &lt;= b[i]) dp[0][i] = 0;
    }

    REP(i, 1, d) {
        rep(j, n) {
            if(a[j] &lt;= t[i] &amp;&amp; t[i] &lt;= b[j]) {
                rep(k, n) {
                    if(dp[i-1][k] == -1) continue;
                    dp[i][j] = max(dp[i][j], dp[i-1][k] + abs(c[k] - c[j]));
                }
            }
        }
    }

    int ans = 0;
    rep(i, n) {
        ans = max(ans, dp[d-1][i]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;


    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0573 Night Market]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/16/aoj0573-night-market/"/>
    <updated>2016-02-16T23:20:29+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/16/aoj0573-night-market</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0573">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0573</a></p>

<!-- more -->


<p>ずっとグラフだろうと考えていた．
頂点を(楽しさ，時間)で持って，indexが大きい頂点にコストを時間とした辺を貼ったグラフを作っても，何を優先度にしてどう探索するか分からない．<br/>
最短時間を求めてながら楽しさを更新しても，時間が長く楽しさが非常に高い辺が来たら答えが合わないことに気づき，ダメ．</p>

<p>時間に注目してみた．ある時間での楽しさの最大値を考えるとナップサックのDPになった．indexの小さい順に訪れるというのは，与えられた順に<script type="math/tex"> i</script>番目のお店以内，と考えれば解決で，花火の時間について時刻<script type="math/tex"> S </script>をまたがる遷移をやめれば良さそうである．</p>

<p><script type="math/tex; mode=display">
    dp[i][j] := i番目以内のお店で，時刻jまで遊んだ時の楽しさの最大値
</script>
として，花火の時間をまたがる遷移をやめ，その最大値を求めたらACした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define mpp(t1, t2, t3, t4) mp(mp(t1, t2), mp(t3, t4))

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;
typedef pair&lt;P, P&gt; PP;

int dp[3005][3005];

int main() {
    int n, t, s;
    cin &gt;&gt; n &gt;&gt; t &gt;&gt; s;

    vector&lt;P&gt; v(n);
    rep(i, n) {
        cin &gt;&gt; v[i].first &gt;&gt; v[i].second;
    }

    memset(dp, 0, sizeof(dp));

    REP(i, 0, n) {
        rep(j, t + 1) {
            if(j - v[i].second &lt; 0 || (j - v[i].second &lt; s &amp;&amp; s &lt; j) ) {
                dp[i+1][j] = dp[i][j];
            } else {
                dp[i+1][j] = max(dp[i][j], dp[i][j-v[i].second] + v[i].first);
            }
        }
    }

    int ans = 0;
    rep(i, n + 1 ) {
        rep(j, t + 1) {
            ans = max(ans, dp[i][j]);
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0568 Pasta]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/15/aoj0568-pasta/"/>
    <updated>2016-02-15T21:23:15+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/15/aoj0568-pasta</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0568">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0568</a></p>

<!-- more -->


<p>3日以上連続してはいけないので，連続して選んだ状態を<script type="math/tex"> 1 </script>，選んでいない状態を<script type="math/tex"> 0 </script>と分ける．
<script type="math/tex; mode=display">
\begin{eqnarray}
    dp[i][j][0] &amp;:=&amp; i日目にj番目のソースを選び，全日に同じソースを選んでいない場合の通り\
    dp[i][j][1] &amp;:=&amp; i日目にj番目のソースを選び，前日に同じソースを選んだ場合の通り
\end{eqnarray}
</script></p>

<blockquote><p>ある<script type="math/tex"> i </script>日目に<script type="math/tex"> j </script>番目を連続して選ぶ時に，同じ種類の<script type="math/tex"> j </script>番目を選ぶということだが，<script type="math/tex"> i-1 </script>日目が連続して選んだ場合から遷移すると3連続となってしまうので，<script type="math/tex"> i-1 </script>日目が非連続の場合からのみ遷移する．</p></blockquote>

<p>ソース1を<script type="math/tex"> j </script>番目に連続して選ぶ場合，<script type="math/tex"> j-1 </script>番目のソースを連続して選んでいない場合，つまり<script type="math/tex"> dp[i-1][1][0] </script>から遷移
<img src="/images/AOJ/0568-1.png"></p>

<p>ソース2を<script type="math/tex"> j </script>番目に連続して選ぶ場合，<script type="math/tex"> j-1 </script>番目のソースを連続して選んでいない場合，つまり<script type="math/tex"> dp[i-1][2][0] </script>から遷移
<img src="/images/AOJ/0568-2.png"></p>

<p>ソース3を<script type="math/tex"> j </script>番目に連続して選ぶ場合，<script type="math/tex"> j-1 </script>番目のソースを連続して選んでいない場合，つまり<script type="math/tex"> dp[i-1][3][0] </script>から遷移
<img src="/images/AOJ/0568-3.png"></p>

<blockquote><p>ある<script type="math/tex"> i </script>日目に<script type="math/tex"> j </script>番目を連続して選ばない時に，連続して選ばないということは同じ種類を選ばないということなので，<script type="math/tex"> i </script>日目の他の2種類の連続，非連続の場合から遷移する</p></blockquote>

<p>ソース1を<script type="math/tex"> j </script>番目に連続して選ばない場合，ソース1以外の場合，<br/>
つまり<script type="math/tex">dp[i-1][2][0] </script>，<script type="math/tex">dp[i-1][2][1] </script>，<script type="math/tex">dp[i-1][3][0] </script>，<script type="math/tex">dp[i-1][3][1] </script>から遷移<br/>
<img src="/images/AOJ/0568-4.png"></p>

<p>ソース2を<script type="math/tex"> j </script>番目に連続して選ばない場合，ソース2以外の場合，<br/>
つまり<script type="math/tex">dp[i-1][1][0] </script>，<script type="math/tex">dp[i-1][1][1] </script>，<script type="math/tex">dp[i-1][3][0] </script>，<script type="math/tex">dp[i-1][3][1] </script>から遷移<br/>
<img src="/images/AOJ/0568-5.png"></p>

<p>ソース3を<script type="math/tex"> j </script>番目に連続して選ばない場合，ソース3以外の場合，<br/>
つまり<script type="math/tex">dp[i-1][1][0] </script>，<script type="math/tex">dp[i-1][1][1] </script>，<script type="math/tex">dp[i-1][2][0] </script>，<script type="math/tex">dp[i-1][2][1] </script>から遷移<br/>
<img src="/images/AOJ/0568-6.png"></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define MOD 10000

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int dp[105][5][5], d[105];
bool used[105];

int main() {
    int n, k;
    cin &gt;&gt; n &gt;&gt; k;

    memset(used, 0, sizeof(used));
    memset(d, 0, sizeof(d));

    rep(i, k) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;

        used[a] = true;
        d[a] = b;
    }

    memset(dp, 0, sizeof(dp));

    if(used[1]) {
        REP(j, 1, 4) {
            if(d[1] == j) dp[1][j][0] = 1;
        }
    } else {
        REP(j, 1, 4) {
            dp[1][j][0] = 1;
        }
    }

    REP(i, 2, n + 1) {
        if(used[i]) {
            if(d[i] == 1) {
                dp[i][1][1] = dp[i-1][1][0];
                dp[i][1][0] = (dp[i-1][2][0] + dp[i-1][2][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
                dp[i][1][1] %= MOD;
                dp[i][1][0] %= MOD;
            } else if(d[i] == 2) {
                dp[i][2][1] = dp[i-1][2][0];
                dp[i][2][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
                dp[i][2][1] %= MOD;
                dp[i][2][0] %= MOD;
            } else {
                dp[i][3][1] = dp[i-1][3][0];
                dp[i][3][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][2][0] + dp[i-1][2][1]);
                dp[i][3][1] %= MOD;
                dp[i][3][0] %= MOD;
            }
        } else {
            dp[i][1][1] = dp[i-1][1][0];
            dp[i][1][0] = (dp[i-1][2][0] + dp[i-1][2][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
            dp[i][2][1] = dp[i-1][2][0];
            dp[i][2][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
            dp[i][3][1] = dp[i-1][3][0];
            dp[i][3][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][2][0] + dp[i-1][2][1]);

            dp[i][1][1] %= MOD;
            dp[i][1][0] %= MOD;
            dp[i][2][1] %= MOD;
            dp[i][2][0] %= MOD;
            dp[i][3][1] %= MOD;
            dp[i][3][0] %= MOD;
        }
    }


    // rep(i, n + 1) {
    //  REP(j, 1, 4) {
    //      cout &lt;&lt; "(" &lt;&lt; dp[i][j][0] &lt;&lt; "," &lt;&lt; dp[i][j][1] &lt;&lt; ") ";
    //  }
    //  cout &lt;&lt; endl;
    // }

    int sum = 0;
    REP(j, 1, 4) {
        rep(k, 2) {
            sum += dp[n][j][k];
            sum %= MOD;
        }
    }

    cout &lt;&lt; sum &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0561 Books]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/12/aoj0561-books/"/>
    <updated>2016-02-12T03:04:14+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/12/aoj0561-books</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0561">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0561</a></p>

<!-- more -->


<p>割とすぐにDPだろうと思ったけど，どう遷移していいか分からない分からないとずっと悩んでいた．試しに値段，(ジャンルの個数，値段)の貪欲をして<strong>WA</strong>を連発した</p>

<hr />

<p><script type="math/tex; mode=display">
\begin{eqnarray}
    d[i][j] &amp;:=&amp; i番目のジャンルの本をj冊選んだ時のコスト \
    dp[i][j] &amp;:=&amp; i番目以降のジャンルからj冊以下の時の最大コスト
\end{eqnarray}
</script></p>

<p>とした．5冊まで同じジャンルを売った時にプラスされる値段を見ると
<script type="math/tex; mode=display">
\begin{eqnarray}
    1冊 &amp;\to&amp; 0 \
    2冊 &amp;\to&amp; 1 + 1  = 2\
    3冊 &amp;\to&amp; 2 + 2 + 2 = 6 \
    4冊 &amp;\to&amp; 3 + 3 + 3 + 3 = 12\
    5冊 &amp;\to&amp; 4 + 4 + 4 + 4 + 4 = 20
\end{eqnarray}
</script></p>

<p>となるので同じジャンルを売った時にプラスされる値段は，冊数を<script type="math/tex">i</script>とすると，<script type="math/tex">i-1</script>増えるのがされるのが<script type="math/tex">1</script>個，<script type="math/tex">1</script>増えるのが<script type="math/tex">i-1</script>個あるので<script type="math/tex">(i-1)*2</script>となる．<br/>
また<script type="math/tex"> j </script>冊選んだ時のコストは大きい順に取ればそれが最大となるので事前にソートしておくことで<script type="math/tex"> d </script>が求まる．<br/>
これが求まると，冊数を重さと見ると，<script type="math/tex">K</script>冊を超えないナップサックになる．</p>

<p>青を遷移先とする．普通のナップサック?(蟻本p.52)はその品物を使わない遷移と使う遷移の2種類がある<br/>
<img src="/images/AOJ/0561-1.png"></p>

<p>今回の場合は，そのジャンルの本数文，遷移があるので下図のような状況になる．<br/>
<img src="/images/AOJ/0561-2.png"></p>

<p>この遷移のmaxを取れば<script type="math/tex"> dp[i][j]が求まるので最終的に dp[ジャンル数][K冊]</script>が答えとなった．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

ll d[15][2005], dp[15][2005];

int main() {
    int n, K;
    cin &gt;&gt; n &gt;&gt; K;

    vector&lt;int&gt; id, v[2005];

    rep(i, n) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;

        id.push_back(b-1);
        v[b-1].push_back(a);
    }

    sort(id.begin(), id.end());
    id.erase(unique(id.begin(),id.end()),id.end());

    rep(i, id.size()) {
        int j = id[i];
        sort(v[j].begin(), v[j].end(), greater&lt;int&gt;() );
    }

    memset(d, 0, sizeof(d));

    rep(i, id.size()) {
        int j = id[i];

        REP(k, 1, v[j].size()+1) {
            d[j][k] += d[j][k-1] + v[j][k-1] + (k-1) * 2;
        }
    }

    memset(dp, 0, sizeof(dp));

    rep(i, id.size()) {
        rep(j, K + 1) {
            ll res = dp[i][j];
            rep(k, v[id[i]].size() + 1) {
                if(j &gt;= k) {
                    res = max(res, dp[i][j - k] + d[id[i]][k]);
                }
            }

            dp[i+1][j] = res;
        }
    }

    cout &lt;&lt; dp[ id.size()][K] &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0547 Commute routes]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/10/aoj0547-commute-routes/"/>
    <updated>2016-02-10T22:08:01+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/10/aoj0547-commute-routes</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0547">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0547</a></p>

<!-- more -->


<p>dp[i][j] := その地点から横にいける経路の個数<br/>
dp2[i][j] := その地点から縦にいける経路の個数 とした．<br/>
交差点で曲がった直後が曲がれない場合は，同じ方向であればその経路は存在する．つまりdp[i][j]の場合はdp[i][j-1]，dp2[i][j]の場合はdp[i-1][j]の経路がそのまま存在する．<br/>
また別の方向でも一個交差点を飛ばした場所の経路は存在する．つまりdp[i][j]の場合はdp2[i-2][j]，dp2[i][j]の場合はdp[i][j-2]の経路が存在する．</p>

<p>よって
<script type="math/tex; mode=display">
\begin{eqnarray}
    dp[i][j] &amp;+=&amp; dp[i][j-1] + dp2[i-2][j] \
    dp2[i][j] &amp;+=&amp; dp[i][j-2] + dp2[i-1][j]
\end{eqnarray}
</script></p>

<p>MODを取るのと忘れないようにする．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define MOD 100000

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int dp[105][105], dp2[105][105];

int main() {
    int w, h;
    while(cin &gt;&gt; w &gt;&gt; h) {
        if(w == 0 &amp;&amp; h == 0) break;

        memset(dp, 0, sizeof(dp));
        memset(dp2, 0, sizeof(dp2));

        dp[0][0] = 1;
        dp2[0][0] = 1;

        rep(i, w) {
            dp[0][i] = 1;
            dp2[0][i] = 1;
        }

        rep(i, h) {
            dp[i][0] = 1;
            dp2[i][0] = 1;
        }

        REP(i, 1, h) {
            REP(j, 1, w) {
                dp[i][j] += dp[i][j-1];
                if(i - 2 &gt;= 0) dp[i][j] += dp2[i-2][j];
                dp[i][j] %= MOD;

                dp2[i][j] += dp2[i-1][j];
                if(j - 2 &gt;= 0) dp2[i][j] += dp[i][j-2];
                dp2[i][j] %= MOD;
            }
        }

        if(h == 2 || w == 2) cout &lt;&lt; 2 &lt;&lt; endl;
        else cout &lt;&lt; (dp[h-1][w-1] + dp[h-2][w-3]) % MOD &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
