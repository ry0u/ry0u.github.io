<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bit | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/bit/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-09-03T02:19:57+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1505 Dungeon]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/21/aoj1505-dungeon/"/>
    <updated>2016-04-21T14:26:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/21/aoj1505-dungeon</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1505">Dungeon | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

まず最初dijkstraの始点を {% m %} 0, n-1 {% em %}としてスタート地点からの最短経路と，ゴール地点からの最短経路を出しておく．これで各クエリに対して{% m %} O(n) {% em %}で答えられるようになったが， {% m %}1 \leq n \leq 10 ^5, 1 \leq q \leq 10 ^5{% em %}なので間に合わない．  
(スタート地点からの最短コスト, 頂点番号)のpairで，(ゴール地点からの最短コスト, 頂点番号)のpairでsortする．また頂点番号がsort後の配列のどこのindexかを持っておく．  

スタート地点からのコスト  

|index|0|1|2|3|
|:-:|:-:|:-:|:-:|:-:|
|cost|0|2|3|3|
|頂点|0|2|1|3|

ゴール地点からのコスト  

|index|0|1|2|3|
|:-:|:-:|:-:|:-:|:-:|
|cost|0|1|3|4|
|頂点|3|2|0|1|

スタート地点に関して頂点番号 {% m %} _i {% em %}のsort後の配列のindexの変換テーブル  

|頂点|0|1|2|3|
|:-:|:-:|:-:|:-:|:-:|
|index|0|2|1|3|

次にクエリ {% m %} q_i {% em %}の {% m %} (fg, fs, クエリ番号) {% em %}でsortする． 少なくとも{% m %} fg {% em %}かかる，という制限なので{% m %} fg {% em %}を優先してsortすれば，それ以前のものは候補に上がらないので，省いて良い．この省くというのを表現するのにBITを用いた．{% m %} fg {% em %}より小さい所は変換テーブルを用いてそのindexに {% m %} +1 {% em %}する．次に {% m %} fs {% em %}以下を満たす最大のindex持ってきてBITを用いてその区間和を引く．  

説明が全く出来ている気がしない．後で見直し

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1LL<<61
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct edge {
	int from,to;
	ll cost;

	edge(int t,ll c) : to(t),cost(c) {}
	edge(int f,int t,ll c) : from(f),to(t),cost(c) {}

	bool operator<(const edge &e) const {
		return cost < e.cost;
	}
};

vector<edge> G[100005];
ll d[100005], d2[100005];

void dijkstra(int s, int n) {
	priority_queue<pair<ll, ll> , vector<pair<ll, ll> >, greater<pair<ll, ll> > > que;
	fill(d, d+n, INF);

	d[s] = 0;
	que.push(P(0,s));

	while(que.size()) {
		P p = que.top();
		que.pop();

		int v = p.second;
		if(d[v] < p.first) continue;

		rep(i, G[v].size()) {
			edge e = G[v][i];
			if(d[e.to] > d[v] + e.cost) {
				d[e.to] = d[v] + e.cost;
				que.push(P(d[e.to],e.to));
			}
		}
	}
}

struct BIT {
	vector<int> bit;

	BIT(int n) : bit(n+1) {}

	int sum(int i) {
		int s = 0;
		while(i > 0) {
			s += bit[i];
			i -= i & -i;
		}
		return s;
	}

	void add(int i,int x) {
		while(i <= bit.size()) {
			bit[i] += x;
			i += i & -i;
		}
	}
};

int main() {
	int n, m;
	cin >> n >> m;

	rep(i, m) {
		ll a, b, c;
		cin >> a >> b >> c;

		G[a].push_back(edge(b, c));
		G[b].push_back(edge(a, c));
	}

	dijkstra(n-1, n);
	memset(d2, 0, sizeof(d2));
	rep(i, n) {
		d2[i] = d[i];
	}

	dijkstra(0, n);

	vector<ll> d3(n);
	vector<pair<ll, int> > D, D2;
	rep(i, n) {
		d3[i] = d[i];
		D.push_back(mp(d[i], i));
		D2.push_back(mp(d2[i], i));
	}

	sort(d3.begin(), d3.end());
	sort(D.begin(), D.end());
	sort(D2.begin(), D2.end());

	map<int, int> ma;
	rep(i, n) {
		ma[ D[i].second ] = i;
	}

	int q;
	cin >> q;

	vector<pair<pair<ll, ll> , int> > query(q);

	rep(i, q) {
		ll s, g;
		cin >> s >> g;

		query[i] = mp(mp(g, s), i);
	}

	sort(query.begin(), query.end());

	BIT bit(n + 5);
	vector<P> ans;
	int start = 0;
	rep(i, q) {
		ll s = query[i].first.second;
		ll g = query[i].first.first;
		int id = query[i].second;

		for(; start < n; start++) {
			if(g > D2[start].first) {
				int k = ma[ D2[start].second ];
				bit.add(k + 1, 1);
				continue;
			} else break;
		}

		vector<ll>::iterator ite = upper_bound(d3.begin(), d3.end(), s);
		int k = ite - d3.begin() - 1;
		if(k < 0) {
			ans.push_back(mp( id, 0));
		} else {
			int res = k + 1;
			res -= bit.sum(k + 1);
			ans.push_back(mp( id, res));
		}
	}

	sort(ans.begin(), ans.end());

	rep(i, ans.size()) {
		cout << ans[i].second << endl;
	}

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0549 A Traveler]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/10/aoj0549-a-traveler/"/>
    <updated>2016-02-10T22:34:52+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/10/aoj0549-a-traveler</id>
    <content type="html"><![CDATA[問題文  
http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0549

<!-- more -->
宿場町{% m %}kから宿場町k + a_i{% em %}までのコストの和が求まれば良いのでBITを用いた．ブログを書いてる時に，これimosだけのほうがシンプルでlogが消えることに気付いたけど，この問題だったらどっちでもいいよね(log^2とかにならないのでほぼ定数)となった．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct BIT {
	vector<int> bit;

	BIT(int n) : bit(n+1) {}

	int sum(int i) {
		int s = 0;
		while(i > 0) {
			s += bit[i];
			i -= i & -i;
		}
		return s;
	}

	void add(int i,int x) {
		while(i <= bit.size()) {
			bit[i] += x;
			i += i & -i;
		}
	}
};

int main() {
	int n, m;
	while(cin >> n >> m) {
		if(n == 0 && m == 0) break;

		BIT bit(100005);
		rep(i, n-1) {
			int a;
			cin >> a;

			bit.add(i+1, a);
		}

		int cur = 1;
		ll ans = 0;

		rep(i, m) {
			int a;
			cin >> a;

			ans += abs(bit.sum(cur+a-1) - bit.sum(cur-1));
			ans %= 100000;
			cur += a;
		}

		cout << ans << endl;
	}

	return 0;
}
```

いくらlogだからといって変につけたりするとTLEすることがあるが何回かあったので，注意したい．
]]></content>
  </entry>
  
</feed>
