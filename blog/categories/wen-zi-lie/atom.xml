<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 文字列 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/wen-zi-lie/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-10-06T00:32:49+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SRM310 D2M InputBoxChecker]]></title>
    <link href="http://ry0u.github.io/blog/2016/09/09/srm310-d2m-inputboxchecker/"/>
    <updated>2016-09-09T12:44:55+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/09/09/srm310-d2m-inputboxchecker</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=6576&rd=9990">TopCoder Statistics - Problem Statement</a></h4><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2010, TopCoder, Inc. All rights reserved.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>
<!-- more -->

入力した数字を全てうったのか，途中までうったのかわからないが，$smallest \sim largest$の間の数字を売っている可能性があるなら$VALID$，そうでないならば$INVALID$を返す．

---

inputが$largest$より大きい時点で，それはありえないのではじく．inputの桁数を$smallest$に合わせる．桁が足りない時は$smallest$と同じ数にする．後は$largest$を超えないことを考えればよいので，一番小さい$0$を末尾に追加していって，$smallest \\leq $ input $\\leq largest$となる数があれば$VALID$を返す．


# Code
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define REP(i,k,n) for(int i=k;i&lt;n;i++)</span>
</span><span class='line'><span class="cp">#define rep(i,n) for(int i=0;i&lt;n;i++)</span>
</span><span class='line'><span class="cp">#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)</span>
</span><span class='line'><span class="cp">#define INF 1&lt;&lt;30</span>
</span><span class='line'><span class="cp">#define mp make_pair</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="nf">f</span><span class="p">(</span><span class="n">ll</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">s</span> <span class="o">+=</span> <span class="kt">char</span><span class="p">(</span><span class="sc">&#39;0&#39;</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>		<span class="n">x</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ll</span> <span class="nf">g</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">ll</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">ret</span> <span class="o">+=</span> <span class="kt">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="o">*</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>		<span class="n">t</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">InputBoxChecker</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="kt">int</span> <span class="n">smallest</span><span class="p">,</span> <span class="kt">int</span> <span class="n">largest</span><span class="p">,</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">smallest</span><span class="p">);</span>
</span><span class='line'>		<span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">largest</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>		<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ret</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">rep</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>			<span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">if</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">largest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>					<span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>					<span class="n">string</span> <span class="n">xx</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>					<span class="n">rep</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>						<span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="n">xx</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>						<span class="k">else</span> <span class="n">xx</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>					<span class="k">if</span><span class="p">(</span><span class="n">smallest</span> <span class="o">&lt;=</span> <span class="n">g</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">g</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">largest</span><span class="p">)</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>					<span class="n">xx</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>					<span class="k">while</span><span class="p">(</span><span class="n">g</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">largest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>						<span class="k">if</span><span class="p">(</span><span class="n">smallest</span> <span class="o">&lt;=</span> <span class="n">g</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">g</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">largest</span><span class="p">)</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>						<span class="n">xx</span> <span class="o">+=</span> <span class="s">&quot;0&quot;</span><span class="p">;</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;VALID&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="k">else</span> <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;INVALID&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	
</span><span class='line'><span class="c1">// BEGIN CUT HERE</span>
</span><span class='line'>	<span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">run_test</span><span class="p">(</span><span class="kt">int</span> <span class="n">Case</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">((</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="n">test_case_0</span><span class="p">();</span> <span class="k">if</span> <span class="p">((</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="mi">1</span><span class="p">))</span> <span class="n">test_case_1</span><span class="p">();</span> <span class="k">if</span> <span class="p">((</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="mi">2</span><span class="p">))</span> <span class="n">test_case_2</span><span class="p">();</span> <span class="k">if</span> <span class="p">((</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="mi">3</span><span class="p">))</span> <span class="n">test_case_3</span><span class="p">();</span> <span class="k">if</span> <span class="p">((</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="mi">4</span><span class="p">))</span> <span class="n">test_case_4</span><span class="p">();</span>
</span><span class='line'>		<span class="k">if</span><span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">test_case_5</span><span class="p">();</span>
</span><span class='line'>		<span class="k">if</span><span class="p">(</span><span class="n">Case</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">test_case_6</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">private</span><span class="o">:</span>
</span><span class='line'>	<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">string</span> <span class="n">print_array</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">V</span><span class="p">)</span> <span class="p">{</span> <span class="n">ostringstream</span> <span class="n">os</span><span class="p">;</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;{ &quot;</span><span class="p">;</span> <span class="k">for</span> <span class="p">(</span><span class="k">typename</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">V</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">V</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">iter</span><span class="p">)</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\&quot;&#39;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">iter</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">,&quot;</span><span class="p">;</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; }&quot;</span><span class="p">;</span> <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">str</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">verify_case</span><span class="p">(</span><span class="kt">int</span> <span class="n">Case</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">Expected</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">Received</span><span class="p">)</span> <span class="p">{</span> <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Test Case #&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">Case</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;...&quot;</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="n">Expected</span> <span class="o">==</span> <span class="n">Received</span><span class="p">)</span> <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;PASSED&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">else</span> <span class="p">{</span> <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;FAILED&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">Expected: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">print_array</span><span class="p">(</span><span class="n">Expected</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">Received: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">print_array</span><span class="p">(</span><span class="n">Received</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_0</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">347</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">37</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;INVALID&quot;</span> <span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_1</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">310</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">320</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">317</span><span class="p">,</span> <span class="mi">3174</span><span class="p">,</span> <span class="mi">310</span><span class="p">,</span> <span class="mi">320</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span> <span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_2</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">600</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">1020</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">734</span><span class="p">,</span> <span class="mi">7349</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span> <span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_3</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">64</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">78</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span> <span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_4</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">1234567890</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">123</span><span class="p">,</span> <span class="mi">456</span><span class="p">,</span> <span class="mi">789</span><span class="p">,</span> <span class="mi">1234567</span><span class="p">,</span> <span class="mi">7654321</span><span class="p">,</span> <span class="mi">3245354</span><span class="p">,</span> <span class="mi">325432532</span><span class="p">,</span> <span class="mi">243212</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span> <span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_5</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">12345</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">290</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">9999</span><span class="p">,</span> <span class="mi">99999</span><span class="p">,</span> <span class="mi">1234</span><span class="p">,</span> <span class="mi">1233</span><span class="p">,</span> <span class="mi">1235</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">test_case_6</span><span class="p">()</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">Arg0</span> <span class="o">=</span> <span class="mi">401234567</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arg1</span> <span class="o">=</span> <span class="mi">2000000000</span><span class="p">;</span> <span class="kt">int</span> <span class="n">Arr2</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">123456789</span><span class="p">,</span> <span class="mi">234567890</span><span class="p">,</span> <span class="mi">312435678</span><span class="p">,</span> <span class="mi">1234567890</span><span class="p">,</span> <span class="mi">1999999999</span><span class="p">,</span> <span class="mi">2000000000</span><span class="p">,</span> <span class="mi">123456789</span><span class="p">,</span> <span class="mi">234567890</span><span class="p">,</span> <span class="mi">312435678</span><span class="p">,</span> <span class="mi">1234567890</span><span class="p">,</span> <span class="mi">1999999999</span><span class="p">,</span> <span class="mi">2000000000</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Arg2</span><span class="p">(</span><span class="n">Arr2</span><span class="p">,</span> <span class="n">Arr2</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">string</span> <span class="n">Arr3</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;INVALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">,</span> <span class="s">&quot;VALID&quot;</span><span class="p">};</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">Arg3</span><span class="p">(</span><span class="n">Arr3</span><span class="p">,</span> <span class="n">Arr3</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Arr3</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span> <span class="n">verify_case</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="n">Arg3</span><span class="p">,</span> <span class="n">checkPrefix</span><span class="p">(</span><span class="n">Arg0</span><span class="p">,</span> <span class="n">Arg1</span><span class="p">,</span> <span class="n">Arg2</span><span class="p">));</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// END CUT HERE</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN CUT HERE</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InputBoxChecker</span> <span class="n">___test</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">___test</span><span class="p">.</span><span class="n">run_test</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">342</span><span class="p">,</span> <span class="mi">325</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32523532</span><span class="p">,</span> <span class="mi">6437654</span><span class="p">,</span> <span class="mi">1987654320</span><span class="p">,</span> <span class="mi">213214</span><span class="p">,</span> <span class="mi">32543265</span><span class="p">,</span> <span class="mi">436235</span><span class="p">,</span> <span class="mi">326437543</span><span class="p">,</span> <span class="mi">437643</span><span class="p">,</span> <span class="mi">43265432</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">333</span><span class="p">,</span> <span class="mi">333333333</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">___test</span><span class="p">.</span><span class="n">checkPrefix</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="mi">1234098765</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// END CUT HERE</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM306 D2H BlockDistance]]></title>
    <link href="http://ry0u.github.io/blog/2016/08/25/srm306-d2h-blockdistance/"/>
    <updated>2016-08-25T13:58:16+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/08/25/srm306-d2h-blockdistance</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=6417&rd=9986">TopCoder Statistics - Problem Statement</a></h4><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2010, TopCoder, Inc. All rights reserved.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

$oldText$に対してある文字列を挿入する操作をして$newText$にしたい．最小で何回の挿入で出来るか．出来ない場合は$-1$を出力する．

---

topcoderの制約上?なのかもしれないけど$oldText$, $newText$は分割されてvectorで来るので，どうせ連結するなら最初からその文字列を渡せば良いのに，と思った．

$$
	dp[i+1][j+1] := oldTextをi番目まででnewTextをj番目まで合わせる時の最小の挿入回数
$$

として動的計画法．文字列のindexを$1-indexed$にしたため，最終的に答える場所は$dp[|oldText|][|newText|]$．遷移は，$oldText[i]$と$newText[j]$が一致している時は何も挿入する必要がないので，そのまま$dp[i][j]$ $\to$ $dp[i+1][j+1]$．後はそこから何文字目まで合わせる挿入を行うかを探索して，例えば$k$文字目まで合わせるとすると$dp[i][j] + 1$ $\to$ $dp[i+1][j+1]$．これでは$oldText$の先頭に追加することは考えられるが，最後に挿入することが考えられていないので，番兵として$X$を末尾に追加して合わせるようにした．

# Code
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define REP(i,k,n) for(int i=k;i&lt;n;i++)</span>
</span><span class='line'><span class="cp">#define rep(i,n) for(int i=0;i&lt;n;i++)</span>
</span><span class='line'><span class="cp">#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)</span>
</span><span class='line'><span class="cp">#define INF 1&lt;&lt;30</span>
</span><span class='line'><span class="cp">#define mp make_pair</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="mi">1005</span><span class="p">][</span><span class="mi">1005</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BlockDistance</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minDist</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">oldText</span><span class="p">,</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">newText</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">rep</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1005</span><span class="p">)</span> <span class="n">rep</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="mi">1005</span><span class="p">)</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="n">rep</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">oldText</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="n">s</span> <span class="o">+=</span> <span class="n">oldText</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>		<span class="n">rep</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">newText</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="n">t</span> <span class="o">+=</span> <span class="n">newText</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>		<span class="n">s</span> <span class="o">+=</span> <span class="s">&quot;X&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="n">t</span> <span class="o">+=</span> <span class="s">&quot;X&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">rep</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">rep</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>					<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>				<span class="n">REP</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>					<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">if</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()][</span><span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">()]</span> <span class="o">==</span> <span class="n">INF</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()][</span><span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM663 ABBA]]></title>
    <link href="http://ry0u.github.io/blog/2015/07/24/srm663-abba/"/>
    <updated>2015-07-24T18:55:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/07/24/srm663-abba</id>
    <content type="html"><![CDATA[ある文字列Iに，2つの操作が出来る．  
- 文字列の最後に"A"を足す  
- 文字列を反転して，最後に"B"を足す  

文字列Iが文字列Tになるかを判定せよ

# 考察
愚直にIに操作していくと，2^(T.size()-I.size())で無理．しかしTから減らしていくには，一意しかない．末尾が"A"ならば，一つ前の状態をpreTとすると，T = preT+"A"となる．まと同様に，末尾が"B"ならば，T = reverse(preT) + "B"である．これを繰り返し，Iと同じsizeになった時に，同じかどうかで判定できる．

# Code
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#line 5 &quot;ABBA.cpp&quot;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define REP(i,k,n) for(int i=k;i&lt;n;i++)</span>
</span><span class='line'><span class="cp">#define rep(i,n) for(int i=0;i&lt;n;i++)</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ABBA</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="n">string</span> <span class="n">canObtain</span><span class="p">(</span><span class="n">string</span> <span class="n">I</span><span class="p">,</span> <span class="n">string</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">T</span> <span class="o">!=</span> <span class="n">I</span> <span class="o">&amp;&amp;</span> <span class="n">T</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">I</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">T</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">T</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">T</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">T</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">T</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">reverse</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">T</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">T</span> <span class="o">==</span> <span class="n">I</span><span class="p">)</span> <span class="k">return</span> <span class="s">&quot;Possible&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Impossible&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

コードを短く，シンプルにかける．本番中は誤読をしていて死んでいた．このある状態を目的の状態にする問題で，逆からやると上手くいく系はすぐ解けるようになりたい．
]]></content>
  </entry>
  
</feed>
