<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: priority_queue | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/priority-queue/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2017-02-10T01:42:35+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces374-div2D Maxim and Array]]></title>
    <link href="http://ry0u.github.io/blog/2016/10/04/codeforces374-div2d-maxim-and-array/"/>
    <updated>2016-10-04T01:10:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/10/04/codeforces374-div2d-maxim-and-array</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/problemset/problem/721/D">Problem - 721D - Codeforces</a></h4><p>Codeforces. Programming competitions and contests, programming community</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

$i$番目の要素が$a_i$の数列が与えられる．$k$回, 要素に$+x$か$-x$することが出来る．$\prod a_i$を最小化する．マイナス要素が奇数個の時，要素の掛け算は符号がマイナスになるので，要素が$-$なら$-x$, 要素が$+$なら$+x$を小さい順にしていく．偶数個の時は，絶対値が最小の要素を異符号にして後は同じ．

# Code
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<ll, ll> P;

struct abs_sort {
	bool operator()(P a, P b) const {
		if(abs(a.first) != abs(b.first)) return abs(a.first) > abs(b.first);
		if(a.first != b.first) return a.first > b.first;
		return a.second > b.second;
	}
};


int main() {
	int n, k; ll x;

	cin >> n >> k >> x;

	ll vmin = INF, vcnt = 0;
	vector<ll> v(n);
	rep(i, n) {
		cin >> v[i];
		vmin = min(vmin, v[i]);

		if(v[i] < 0) vcnt++;
	}

	priority_queue<P, vector<P>, abs_sort> Q;
	rep(i, n) {
		Q.push(mp(v[i], i));
	}

	if(vcnt % 2 == 0) {
		P top = Q.top(); Q.pop();

		ll cnt = (abs(top.first) + 1) / x;
		if((abs(top.first) + 1) % x != 0) cnt++;

		if(cnt <= k) {
			k -= cnt;
		} else {
			cnt = k;
			k = 0;
		}

		if(top.first >= 0) {
			top.first -= cnt * x;
		} else {
			top.first += cnt * x;
		}

		Q.push(top);
	}

	rep(i, k) {
		P p = Q.top(); Q.pop();
		if(p.first >= 0) {
			Q.push(mp(p.first + x, p.second));
		} else {
			Q.push(mp(p.first - x, p.second));
		}
	}

	vector<P> ans;
	while(Q.size()) {
		P p = Q.top(); Q.pop();
		ans.push_back(mp(p.second, p.first));
	}

	sort(ans.begin(), ans.end());
	rep(i, n) {
		if(i) cout << " ";
		cout << ans[i].second;
	}
	cout << endl;
	
	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces357-div2C Heap Operations]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/15/codeforces357-div2c-heap-operations/"/>
    <updated>2016-06-15T23:42:41+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/15/codeforces357-div2c-heap-operations</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/681/problem/C">Problem - C - Codeforces</a></h4><p>Petya has recently learned data structure named "Binary heap". The heap he is now operating with allows the following operations: put the given number into the heap; get the value of the minimum element in the heap; extract the minimum element from the heap; Thus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

* insert $x$
* getMin $x$
* removeMin

の$3$の命令がある．この命令列が与えられた時に矛盾がないように命令列を変更する  
  
priority\_queueを使う．操作がpush, top, popで全部出来るのでやる．queueが空の時にも命令が与えられるので，REにならないように分岐を付ける．TLEが全然取れなくてとても大変だった．文字列を構成してpush\_backするのではなく，pairで突っ込んで出力を変えたらACした．

# Code
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);

	int n;
	cin >> n;

	priority_queue<int, vector<int>, greater<int> > que;
	vector<pair<string, int> > ans;

	string a = "insert", b = "removeMin", c = "getMin";

	rep(i, n) {
		string s;
		cin >> s;

		if(s == a) {
			int x;
			cin >> x;
			que.push(x);

			ans.push_back(mp(a, x));
		} else if(s == b) {
			if(que.size() == 0) {
				ans.push_back(mp(a, 0));
			} else {
				que.pop();
			}
			ans.push_back(mp(b, -INF));
		} else {
			int x;
			cin >> x;

			while(que.size() && que.top() < x) {
					que.pop();
					ans.push_back(mp(b, -INF));
			}

			if(que.size() == 0 || que.top() != x) {
				que.push(x);
				ans.push_back(mp(a, x));
			}

			ans.push_back(mp(c, x));
		}
	}

	cout << ans.size() << endl;
	rep(i, ans.size()) {
		if(ans[i].second == -INF) cout << ans[i].first << endl;
		else cout << ans[i].first << " " << ans[i].second << endl;
	}

	return 0;
}
```
]]></content>
  </entry>
  
</feed>
