<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 累積和 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/lei-ji-he/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-03-26T22:18:32+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ2600 Koto Distance]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/22/aoj2600-koto-distance/"/>
    <updated>2016-03-22T20:29:30+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/22/aoj2600-koto-distance</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2600">Koto Distance | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>X方向，Y方向それぞれに累積和を取る．X，Yのどちらかが埋まっていれば覆われている．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int X[100005], Y[100005];

int main() {
    int n, W, H;
    cin &gt;&gt; n &gt;&gt; W &gt;&gt; H;

    memset(X, 0, sizeof(X));
    memset(Y, 0, sizeof(Y));

    rep(i, n) {
        int x, y, w;
        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;

        X[max(0, x-w)]++;
        X[min(W, x+w)]--;

        Y[max(0, y-w)]++;
        Y[min(H, y+w)]--;
    }

    REP(i, 1, 100005) {
        X[i] += X[i-1];
        Y[i] += Y[i-1];
    }

    bool a = true, b = true;
    REP(i, 0, W) {
        if(X[i] == 0) a = false;
    }

    REP(i, 0, H) {
        if(Y[i] == 0) b = false;
    }

    if(a || b) cout &lt;&lt; "Yes" &lt;&lt; endl;
    else cout &lt;&lt; "No" &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
