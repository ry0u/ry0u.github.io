<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: yukicoder | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/yukicoder/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2015-07-18T02:20:59+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yukicoder No.245 貫け！]]></title>
    <link href="http://ry0u.github.io/blog/2015/07/18/yukicoder-no-dot-245-guan-ke!/"/>
    <updated>2015-07-18T02:06:23+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/07/18/yukicoder-no-dot-245-guan-ke!</id>
    <content type="html"><![CDATA[<p><a href="http://yukicoder.me/problems/507">http://yukicoder.me/problems/507</a></p>

<h1>考察</h1>

<p>端点のペアを列挙し，その直線とN個の線分が交差しているかを見る．直線ではなく，線分で交差判定をしていたためにWA．</p>

<p>以下の場合を考える．
<img src="/images/yukicoder245/image1.png"><br/>
今見ている．端点のペアは緑の点(a,b)だとする．ここで線分を作り交差判定をすると上の線分がcountされない．よって線分ではなく直線にしたい．</p>

<p>まずa-bのベクトルを作る．
<img src="/images/yukicoder245/image2.png"><br/>
aに足す
<img src="/images/yukicoder245/image3.png"><br/>
b-aのベクトルを作る．
<img src="/images/yukicoder245/image4.png"><br/>
bに足す
<img src="/images/yukicoder245/image5.png"><br/>
直線とみなせる．
<img src="/images/yukicoder245/image6.png"><br/>
今回のInputは-100~100までなので，このベクトルを500倍をとって直線とみなした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;cmath&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define EPS 1e-8
#define equals(a,b) fabs((a) - (b)) &lt; EPS

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct Point {
    double x, y;

    Point(double x=0, double y=0) : x(x), y(y) {}

    Point operator+(const Point &amp;o) const { return Point(x+o.x, y+o.y); }

    Point operator-(const Point &amp;o) const { return Point(x-o.x, y-o.y); }

    Point operator*(const double m) const { return Point(x*m, y*m); }

    Point operator/(const double d) const { return Point(x/d, y/d); }

    bool operator&lt;(const Point &amp;o) const { return x != o.x ? x &lt; o.x : y &lt; o.y; }

    bool operator==(const Point &amp;o) const { return fabs(x-o.x) &lt; EPS &amp;&amp; fabs(y-o.y) &lt; EPS; }

    double cross(const Point &amp;o) const { return x * o.y - y * o.x; }

    double dot(const Point &amp;o) const { return x * o.x + y * o.y; }

    double atan() const { return atan2(y, x); }

    double norm() const { return sqrt(dot(*this)); }

    double distance(const Point &amp;o) const { return (o - (*this)).norm(); }

    double area(const Point &amp;a,const Point &amp;b) {
        Point p = a - (*this), p2 = b - (*this); 
        return p.cross(p2);
    }

    double area_abs(const Point &amp;a,const Point &amp;b) const {
        Point p = a - (*this), p2 = b - (*this);
        return fabs(p.cross(p2)) / 2.0;
    }   

    //線分abが自身に含まれているのかどうか判断する
    int between(const Point &amp;a,const Point &amp;b) {
        if(area(a,b) != 0) return 0;

        if(a.x != b.x)  return ((a.x &lt;= x) &amp;&amp; (x &lt;= b.x) || (a.x &gt;= x) &amp;&amp; (x &gt;= b.x));
        else return ((a.y &lt;= y) &amp;&amp; (y &lt;= b.y) || (a.y &gt;= y) &amp;&amp; (y &gt;= b.y));
    }      

    double distance_seg(const Point&amp; a,const Point&amp; b) {
        if((b-a).dot(*this-a) &lt; EPS) {
            return (*this-a).norm();
        }
        if((a-b).dot(*this-b) &lt; EPS) {
            return (*this-b).norm();
        }
        return abs((b-a).cross(*this-a)) / (b-a).norm();
    }

    bool hitPolygon(const Point&amp; a,const Point&amp; b,const Point&amp; c) {
        double t = (b-a).cross(*this-b);
        double t2 = (c-b).cross(*this-c);
        double t3 = (a-c).cross(*this-a);   

        if((t &gt; 0 &amp;&amp; t2 &gt; 0 &amp;&amp; t3 &gt; 0) || ( t &lt; 0 &amp;&amp; t2 &lt; 0 &amp;&amp; t3 &lt; 0)) {
            return true;
        }

        return false;
    }
};

struct Seg {
    Point a,b;

    Seg (Point a, Point b) : a(a),b(b) {}

    bool isOrthogonal(Seg &amp;s) { return equals((b - a).dot(s.b - s.a),0.0); }

    bool isParallel(Seg &amp;s) { return equals((b-a).cross(s.b - s.a),0.0); }

    bool isIntersect(Seg &amp;s) {
        if(s.a.between(a,b) || s.b.between(a,b) || a.between(s.a,s.b) || b.between(s.a,s.b)) {
            return true;
        }
        return ((a-b).cross(s.a-a) * (a-b).cross(s.b-a) &lt; EPS) &amp;&amp; ((s.b-s.a).cross(a-s.a)*(s.b-s.a).cross(b-s.a) &lt; EPS);
    }

    bool distance(Seg &amp;s) {
        if((*this).isIntersect(s)) return 0.0;

        return min(min(a.distance_seg(s.a,s.b),b.distance_seg(s.a,s.b)),min(s.a.distance_seg(a,b),s.b.distance_seg(a,b)));
    }

    Point getCrossPoint(Seg &amp;s) {
        Point p = s.b - s.a;
        double d = abs(p.cross(a-s.a));
        double d2 = abs(p.cross(b-s.a));

        double t = d / (d+d2);
        return a + (b-a)*t;
    }        

    bool operator&lt;(const Seg &amp;o) const { 
        return a == o.a ? a &lt; o.a : b &lt; o.b;
    }

    void print() {
        cout &lt;&lt; "(" &lt;&lt; a.x &lt;&lt; "," &lt;&lt; a.y &lt;&lt; ") (" &lt;&lt; b.x &lt;&lt; "," &lt;&lt; b.y &lt;&lt; ")" &lt;&lt; endl;
    }
};

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;Seg&gt; segs;
    vector&lt;Point&gt; v;

    rep(i,n) {
        double a,b,c,d;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;

        Point p1(a,b);
        Point p2(c,d);

        v.push_back(p1);
        v.push_back(p2);

        segs.push_back(Seg(p1,p2));
    }

    int ans = 0;
    rep(i,v.size()) {
        rep(j,v.size()) {
            if(i == j) continue;

            Point a = (v[i] - v[j]) * 500;
            Point b = (v[j] - v[i]) * 500;

            Seg seg(v[i]+a,v[j]+b);

            int cnt = 0;
            rep(k,segs.size()) {
                if(seg.isIntersect(segs[k])) {
                    cnt++;
                }
            }

            ans = max(ans,cnt);
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
