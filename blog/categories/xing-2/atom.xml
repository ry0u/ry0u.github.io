<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 星2 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/xing-2/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2017-02-12T23:38:43+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yukicoder No.120 傾向と対策:門松列(その1)]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-120-qing-xiang-todui-ce-men-song-lie-sofalse1/"/>
    <updated>2015-09-03T22:07:12+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-120-qing-xiang-todui-ce-men-song-lie-sofalse1</id>
    <content type="html"><![CDATA[http://yukicoder.me/problems/291  

# 考察
自由に並び替えて良いため，関係あるのは長さの竹が何個あるか．sortして小さい順にとるような貪欲では例えば
{% math %}
\{1,1,2,3,3,3,3,3,4,4,4\}
{% endmath %}
の時に，{1,2,3}とペアを作ってしまうとペアが2つしか作れない．長さが違えばよいで，個数が多い順にとっていく貪欲で上手くいった．多い順に取るのはpriority_queueを使った．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
    int t;
    cin >> t;

    rep(q,t) {
        int n;
        cin >> n;

        vector<int> v(n);
        map<int,int> m;
        rep(i,n) {
            cin >> v[i];
            m[v[i]]++;
        }

        priority_queue<int> que;
        map<int,int>::iterator ite;
        for(ite = m.begin(); ite != m.end(); ite++) {
            que.push(ite->second);
        }

        int cnt = 0;
        while(que.size() > 2) {
            cnt++;
            vector<int> t(3);

            rep(i,3) {
                t[i] = que.top();
                que.pop();
            }

            rep(i,3) {
                if(t[i] == 1) continue;
                que.push(t[i]-1);
            }
        }

        cout << cnt << endl;

    }
    return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yukicoder No.118 門松列(2)]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-118-men-song-lie-2/"/>
    <updated>2015-09-03T22:00:55+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-118-men-song-lie-2</id>
    <content type="html"><![CDATA[http://yukicoder.me/problems/221  

# 考察
今回は与えられるA_{i}が100と小さいので，門松の要素の列挙が出来る．何組の選び方があるあを求めたいので，それぞれの長さが何本あるかを持っておき，一番小さいもの，真ん中，一番大きいものの個数をかける．探す範囲はN本与えられた長さの最小値から最大値までで行った．mod 10^9 + 7を忘れない．

# Code

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstring>
#include <map>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define MOD 1000000007

using namespace std;
typedef long long ll;

int main()
{
	int n;
	cin >> n;
	
	vector<int> v(n);
    map<int,ll> m;
    int vmin = INF, vmax = 0;
    rep(i,n) {
        cin >> v[i];
        m[v[i]]++;

        vmin = min(vmin,v[i]);
        vmax = max(vmax,v[i]);
    }

    ll ans = 0;
    REP(i,vmin,vmax+1) {
        REP(j,i+1,vmax+1) {
            REP(k,j+1,vmax+1) {
                ans += m[i] * m[j] * m[k];
                ans %= MOD;
            }
        }
    }

    cout << ans << endl;


	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yukicoder No.115 遠足のおやつ]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-115-yuan-zu-falseoyatu/"/>
    <updated>2015-09-03T21:51:08+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-115-yuan-zu-falseoyatu</id>
    <content type="html"><![CDATA[http://yukicoder.me/problems/205  

# 考察
買うK個の最小値と最大値を出す．
{% math %}
down[] = \{1,2,...,k\}  \\
up[] = \{n-k+1,...,n-1,n\}
{% endmath %}
としてこの中に収まるようにする．辞書順最小にしたいので，左側からdownに近づけていき，その分を右側に持っていく．この操作を可能な限り行い，変化がなくなったら終了．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <cassert>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
    int n,d,k;
    cin >> n >> d >> k;

    int sum = 0, t = n;
    rep(i,k) {
        sum += t;
        t--;
    }

    if(d < (k*(k+1))/2 || d > sum) cout << -1 << endl;
    else {
        vector<int> v;
        rep(i,k) v.push_back(d/k);

        int cnt = d % k;
        rep(i,cnt) {
            v[i]++;
        }

        sort(v.begin(),v.end());

        vector<int> down(n), up(n);
        rep(i,n) {
            down[i] = i+1;
            up[i] = n-k+1+i;
        }

        while(true) {
            vector<int> temp(v.begin(),v.end());
            int s = 0, t = v.size()-1;

            while(true) {
                if(s == t) break;

                if(v[s] == down[s] || v[s] == up[s]) {
                    s++;
                    continue;
                }

                if(v[t] == up[t]) {
                    t--;
                    continue;
                }


                int diff;
                if(v[s] >= up[s]) {
                    diff = v[s] - up[s];
                } else {
                    diff = v[s] - down[s];
                }

                while(diff) {
                    if(v[t] + diff <= up[t]) {
                        v[s] -= diff;
                        v[t] += diff;
                        diff = 0;
                    }
                    else {
                        v[s] -= up[t] - v[t];
                        diff -= up[t] - v[t];
                        v[t] = up[t];
                        t--;
                    }

                    if(s == t) break;
                }

            }

            sort(v.begin(),v.end());

            bool flag = true;
            rep(i,k) {
                if(v[i] != temp[i]) flag = false;
            }

            if(flag) break;
        }

        rep(i,v.size()) {
            cout << v[i];

            if(i == v.size()-1) cout << endl;
            else cout << " ";
        }
    }

    return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yukicoder No.92 逃走経路]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-92-tao-zou-jing-lu/"/>
    <updated>2015-09-03T21:40:54+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-92-tao-zou-jing-lu</id>
    <content type="html"><![CDATA[http://yukicoder.me/problems/149  

# 考察
dfsで行けるとこ全部行ったらTLEした．戻ることも考えられるので，状態数がすごいことになることがわかっていなかった．よくよく考えると，i回目の移動でいる場所としてはmaxでNなので，行ける場所をもって最後まで残った場所を答える．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator<(const edge &e) const {
        return cost < e.cost;
    }
};

vector<int> v;
int n,m,k;

int main() {
    cin >> n >> m >> k;

    map<int,vector<edge> > edges;
    rep(i,m) {
        int a,b,c;
        cin >> a >> b >> c;

        a--;
        b--;

        edges[c].push_back(edge(a,b,c));
        edges[c].push_back(edge(b,a,c));
    }

    v.resize(k);
    rep(i,k) cin >> v[i];

    vector<int> ans(n);
    rep(i,n) ans[i] = i;
    rep(i,k) {
        bool used[105];
        memset(used,0,sizeof(used));

        rep(j,ans.size()) {
            used[ans[j]] = true;
        }

        vector<edge> es = edges[v[i]];
        vector<int> temp;
        rep(j,es.size()) {
            int f = es[j].from;
            int t = es[j].to;

            if(used[f]) {
                temp.push_back(t);
            }
        }

        sort(temp.begin(),temp.end());
        temp.erase(unique(temp.begin(),temp.end()),temp.end());

        ans.resize(temp.size());
        rep(j,temp.size()) ans[j] = temp[j];
    }

    sort(ans.begin(),ans.end());
    cout << ans.size() << endl;
    rep(i,ans.size()) {
        cout << ans[i] + 1;
        if(i == ans.size()-1) cout << endl;
        else cout << " ";
    }

    return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yukicoder No.78 クジ付アイスバー]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-7kuzifu-aisuba/"/>
    <updated>2015-09-03T21:15:58+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/03/yukicoder-no-dot-7kuzifu-aisuba</id>
    <content type="html"><![CDATA[http://yukicoder.me/problems/152  

# 考察
以下の通りに場合分けして考えた．  
- n > kの時，食べる予定のアイスバーの分回せばいい(最大50)．  
- そうではない時，まず1箱分回した時に，いくつ当たりが残るかを調べる．  
- ここで残った当たりが1箱勝った数と同じ場合はそれが答え(目標のkまで最初の1箱分だけでいける)  
- 同じでなかった時は，全部開ける箱と，買い終わってアイスが残る箱に分けて考える

まずは愚直にやってTLEをして，--と++を間違えてWAを生やした

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
    int n,k;
    cin >> n >> k;
    string s;
    cin >> s;

    vector<int> v(n);
    rep(i,n) v[i] = s[i] - '0';

    if(n > k) {
        int ans = 0, cnt = 0;
        rep(i,k) {
            if(cnt > 0) cnt--;
            else ans++;

            cnt += v[i];
        }

        cout << ans << endl;
    } else {
        int res = 0, cnt = 0;
        rep(i,n) {
            if(cnt > 0) cnt--;
            else res++;

            cnt += v[i];
        }

        if(cnt >= res) {
            cout << res << endl;
        } else {
            int m = 0;
            int ans = 0, q = 0;
            while(m + n <= k) {
                m += n;
                if(q >= res) {
                    q -= res;
                    q += cnt;
                } else {
                    ans += res - q;
                    q = cnt;
                }
            }

            rep(i,k%n) {
                if(q > 0) q--;
                else ans++;

                q += v[i];
            }

            cout << ans << endl;
        }

    }
    return 0;
}
```

]]></content>
  </entry>
  
</feed>
