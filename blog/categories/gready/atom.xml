<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gready | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/gready/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-03-29T23:29:24+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces322-div2C Developing Skills]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/30/codeforces322-div2c-developing-skills/"/>
    <updated>2015-09-30T15:41:28+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/30/codeforces322-div2c-developing-skills</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/581/problem/C">http://codeforces.com/contest/581/problem/C</a></p>

<p>主人公は，<script type="math/tex">n</script> 個のskillを持っている．<script type="math/tex"> \lfloor \frac{a_{i}}{10} \rfloor </script>が価値になる．killの値を<script type="math/tex"> k </script>だけ上げることが出来る時に，最大の価値の合計を求めよ．</p>

<h1>考察</h1>

<p>10刻みで1上がることが分かるので，次に価値が上がるまでいくら上げればいいかをpriority_queueに突っ込む．そしてこの値が小さい順にkを使って最大を計算する．それぞれのskillが100を超えてはいけないことに注意する（落ちた）．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n,k;
    cin &gt;&gt; n &gt;&gt; k;

    vector&lt;int&gt; v(n);
    rep(i,n) {
        cin &gt;&gt; v[i];
    }


    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;

    rep(i,n) {
        int d = v[i] % 10;
        que.push(P(10 - d,v[i]));
    }

    int ans = 0;
    while(k &gt; 0 &amp;&amp; que.size()) {
        P p = que.top();
        que.pop();

        if(p.second == 100) {
            ans += 10;
            continue;
        }

        if(k &gt;= p.first) {
            que.push(P(10,p.second + p.first));
            k -= p.first;
        } else {
            p.first -= k;
            que.push(P(p.first, p.second+k));
            k = 0;
        }
    }

    while(que.size()) {
        P p = que.top();
        que.pop();

        ans += p.second / 10;
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
