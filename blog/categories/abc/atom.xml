<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: abc | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/abc/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-04-03T17:23:22+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ABC010D 浮気予防]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc010d-fu-qi-yu-fang/"/>
    <updated>2016-04-03T17:10:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc010d-fu-qi-yu-fang</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://abc010.contest.atcoder.jp/tasks/abc010_4">D: 浮気予防 - AtCoder Beginner Contest 010 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>二重辺連結成分分解をしてrootを<script type="math/tex"> 0 </script>の木にした後に， <script type="math/tex"> 0 </script>から伸びるパスの後に対称が入ればその辺を切る，で出来ると思い実装してみたがサンプルが全然合わない．<br/>
rootを含む閉路があった場合に，そこはrootにまとまってしまうのでそのグループの中での最小が分からないし，そこの切り方によってはrootから出る枝を切る必要が無いかもしれない．</p>

<p>ギブアップして解説を見た．<br/>
<a href="http://www.slideshare.net/chokudai/abc010-35598499">http://www.slideshare.net/chokudai/abc010-35598499</a></p>

<p>最大流・最小カット問題になるのか&hellip;<br/>
処理を追加後のグラフでは，辺を切るのはそのままで，ログイン出来なくするのは，追加したパスを切れば良いとなる．この考え方は非常に勉強になった．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;stack&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int to, cap, rev;

    edge(int t, int c, int r) {
        to = t; cap = c; rev = r;
    }
};

vector&lt;edge&gt; G[105];
bool used[105];

void add_edge(int from,int to,int cap) {
    G[from].push_back(edge(to,cap,G[to].size()));
    G[to].push_back(edge(from,0,G[from].size()-1));
}

int dfs(int v,int t,int f) {
    if(v == t) return f;
    used[v] = true;

    rep(i,G[v].size()) {
        edge &amp;e = G[v][i];
        if(!used[e.to] &amp;&amp; e.cap &gt; 0) {
            int d = dfs(e.to,t,min(f,e.cap));
            if(d &gt; 0) {
                e.cap -= d;   
                G[e.to][e.rev].cap += d; 
                return d;
            }
        }
    }
    return 0;
}

int max_flow(int s,int t) {
    int flow = 0;
    for(;;) {
        memset(used,0,sizeof(used));
        int f = dfs(s,t,INF);
        if(f == 0) return flow;
        flow += f;
    }
}

int main() {
    int n, g, e;
    cin &gt;&gt; n &gt;&gt; g &gt;&gt; e;

    vector&lt;int&gt; p(g);
    rep(i, g) cin &gt;&gt; p[i];

    rep(i, e) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;

        add_edge(a, b, 1);
        add_edge(b, a, 1);
    }

    rep(i, g) {
        add_edge(p[i], n+1, 1);
    }

    int s = 0, t = n + 1;

    cout &lt;&lt; max_flow(s, t) &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC010C 浮気調査]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc010c-fu-qi-diao-cha/"/>
    <updated>2016-04-03T17:05:27+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc010c-fu-qi-diao-cha</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-branding="0" data-card-type="article-full"><h4><a href="http://abc010.contest.atcoder.jp/tasks/abc010_3">C: 浮気調査 - AtCoder Beginner Contest 010 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>一人ひとり，その場所に行って電話に出た場所まで <script type="math/tex"> T </script>以内にいけるを試す．移動した距離が <script type="math/tex"> T * V </script>より小さければ可能である．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;cmath&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define EPS 1e-8
#define equals(a,b) fabs((a) - (b)) &lt; EPS

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct Point {
    double x, y;

    Point(double x=0, double y=0) : x(x), y(y) {}

    Point operator+(const Point &amp;o) const { return Point(x+o.x, y+o.y); }

    Point operator-(const Point &amp;o) const { return Point(x-o.x, y-o.y); }

    Point operator*(const double m) const { return Point(x*m, y*m); }

    Point operator/(const double d) const { return Point(x/d, y/d); }

    bool operator&lt;(const Point &amp;o) const { return x != o.x ? x &lt; o.x : y &lt; o.y; }

    bool operator==(const Point &amp;o) const { return fabs(x-o.x) &lt; EPS &amp;&amp; fabs(y-o.y) &lt; EPS; }
};

ostream&amp; operator &lt;&lt; (ostream&amp; os, const Point&amp; p) {
    os &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")";
    return os;
}

double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }
double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }
double atan(Point p) { return atan2(p.y, p.x); }
double norm(Point p) { return p.x * p.x + p.y * p.y; }
double abs(Point p) { return sqrt(norm(p)); }
double distancePP(Point p, Point o) { return sqrt(norm(o - p)); }

int main() {
    Point s, t;
    int T, V;
    cin &gt;&gt; s.x &gt;&gt; s.y &gt;&gt; t.x &gt;&gt; t.y &gt;&gt; T &gt;&gt; V;

    bool flag = false;

    int n;
    cin &gt;&gt; n;

    rep(i, n) {
        Point p;
        cin &gt;&gt; p.x &gt;&gt; p.y;

        if(distancePP(s, p) + distancePP(p, t)  &lt;= T * V) {
            flag = true;
        }
    }

    if(flag) {
        cout &lt;&lt; "YES" &lt;&lt; endl;
    } else {
        cout &lt;&lt; "NO" &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC009D 漸化式]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc009d-jian-hua-shi/"/>
    <updated>2016-04-03T14:48:07+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc009d-jian-hua-shi</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://abc009.contest.atcoder.jp/tasks/abc009_4">D: 漸化式 - AtCoder Beginner Contest 009 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>はじめに決まっている項数<script type="math/tex"> K </script>が小さく，数列の求める項の番号<script type="math/tex"> M </script>が大きいので，上手く遷移行列を作れれば行列累乗で行けそうと思った．どういう遷移になるかイマイチよく分からず行列を自分で作ることが出来なかった．解説を見た．</p>

<p><a href="http://www.slideshare.net/chokudai/abc009">http://www.slideshare.net/chokudai/abc009</a></p>

<p>解説通りに遷移行列を
<script type="math/tex; mode=display">
    \left(
        \begin{array}{ccccc}
            C_1 &amp; C_2 &amp; &hellip;&amp; C<em>{K-1} &amp; C_K \
            1 &amp; 0 &amp; &hellip; &amp; 0 &amp; 0 \
            0 &amp; 1 &amp; &hellip; &amp; 0 &amp; 0 \
            &hellip; &amp; &hellip; &amp; &hellip; &amp; &hellip; &amp; &hellip; \
            0 &amp; &hellip; &amp; 0 &amp; 1 &amp; 0 \
        \end{array}
    \right)
</script>
として
<script type="math/tex; mode=display">
    \left(
        \begin{array}{ccccc}
            C_1 &amp; C_2 &amp; &hellip;&amp; C</em>{K-1} &amp; C_K \
            1 &amp; 0 &amp; &hellip; &amp; 0 &amp; 0 \
            0 &amp; 1 &amp; &hellip; &amp; 0 &amp; 0 \
            &hellip; &amp; &hellip; &amp; &hellip; &amp; &hellip; &amp; &hellip; \
            0 &amp; &hellip; &amp; 0 &amp; 1 &amp; 0 \
        \end{array}
    \right) ^{M-K} \cdot \left(
                        \begin{array}{c}
                            A<em>{K} \
                            A</em>{K-1} \
                            A<em>{K-2} \
                            &hellip; \
                            A</em>{1} \
                        \end{array}
                    \right)
</script>
を計算する．単位元の <script type="math/tex"> 1 </script>は <script type="math/tex"> 32ビットの11\cdots1 </script>である(単位行列と <script type="math/tex"> A  </script>が <script type="math/tex"> A </script>にならずに気付いた)．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

ll S = 0;

struct Mat {
    vector&lt;vector&lt;ll&gt; &gt; dat;
    int n;

    Mat(int n) : n(n), dat(n, vector&lt;ll&gt;(n)) {}

    Mat(vector&lt;vector&lt;ll&gt; &gt; dat) : n(dat.size()), dat(dat) {}

    Mat I(int n) {
        Mat ret(n);
        rep(i, n) ret.dat[i][i] = S;
        return ret;
    }

    Mat mul(Mat &amp;b) {
        Mat ret(n);
        rep(i, n) rep(j, n) rep(k, n) (ret.dat[i][j] ^= (dat[i][k] &amp; b.dat[k][j]));
        return ret;
    }

    Mat pow(ll b) {
        Mat ret = I(n);
        for (Mat A = *this; b &gt; 0; A = A.mul(A) , b /= 2) if (b &amp; 1) ret = A.mul(ret);
        return ret;
    }
};

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;ll&gt; a(n), c(n);
    rep(i, n) cin &gt;&gt; a[i];
    rep(i, n) cin &gt;&gt; c[i];

    rep(i, 32) {
        S += (1LL &lt;&lt; i);
    }

    if(m &lt;= n) {
        cout &lt;&lt; a[m-1] &lt;&lt; endl;
    } else {

        Mat mat(n);
        rep(i, n) mat.dat[0][i] = c[i];
        REP(i, 1, n) mat.dat[i][i-1] = S;

        Mat ret = mat.pow(m - n);
        // rep(i, n) {
        //  rep(j, n) {
        //      cout &lt;&lt; ret.dat[i][j] &lt;&lt; " ";
        //  }
        //  cout &lt;&lt; endl;
        // }

        ll ans = 0;
        rep(i, n) {
            ans ^= (ret.dat[0][i] &amp; a[n-1-i]);
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC006D トランプ挿入ソート]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc006d-toranpucha-ru-soto/"/>
    <updated>2016-04-03T14:38:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc006d-toranpucha-ru-soto</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://abc006.contest.atcoder.jp/tasks/abc006_4">D: トランプ挿入ソート - AtCoder Beginner Contest 006 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>カードを任意の場所に挿入することが出来るので，最長増加部分列でないカードをそれぞれ操作するのが最小になる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int LIS(vector&lt;int&gt; v) {
    vector&lt;int&gt; ret(v.size() + 1);
    rep(i, v.size()+1) ret[i] = INF;
    rep(i, v.size()) {
        *lower_bound(ret.begin(), ret.end(), v[i]) = v[i];
    }

    return lower_bound(ret.begin(), ret.end(), INF) - ret.begin();
}

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n);
    rep(i, n) cin &gt;&gt; v[i];

    cout &lt;&lt; n - LIS(v) &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC005D おいしいたこ焼きの焼き方]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/29/abc005d-oisiitakoshao-kifalseshao-kifang/"/>
    <updated>2016-03-29T23:17:17+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/29/abc005d-oisiitakoshao-kifalseshao-kifang</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://abc005.contest.atcoder.jp/tasks/abc005_4">D: おいしいたこ焼きの焼き方 - AtCoder Beginner Contest 005 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>たこ焼きの美味しさの累積和を取っておく．
<script type="math/tex; mode=display">
    cnt[i][j] := (0, 0) 〜 (i, j)までのたこ焼きの美味しさの和
</script>
とすると，範囲 <script type="math/tex"> (i, j) 〜 (i+k, j+l)</script>は</p>

<ul>
<li>個数 : <script type="math/tex"> (k + 1) \cdot (l + 1) </script></li>
<li>美味しさ : <script type="math/tex"> cnt[i+k][j+l] - cnt[i-1][j+l] - cnt[i+k][j-1] + cnt[i-1][j-1] </script></li>
</ul>


<p>となるので，後はこれを <script type="math/tex"> map(個数,美味しさ) </script>に突っ込む．後は たこ焼きの個数<script type="math/tex"> p_i </script>以下の最大の美味しさを求める． <script type="math/tex"> O(N ^4 log N ^2) </script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    ll cnt[55][55];
    memset(cnt, 0, sizeof(cnt));

    rep(i, n) {
        rep(j, n) {
            cin &gt;&gt; cnt[i][j];
        }
    }

    rep(i, n) {
        REP(j, 1, n) {
            cnt[i][j] += cnt[i][j-1];
        }
    }

    REP(i, 1, n) {
        rep(j, n) {
            cnt[i][j] += cnt[i-1][j];
        }
    }

    map&lt;int, int&gt; m;
    rep(i, n) {
        rep(j, n) {
            rep(k, n) {
                if(i + k &gt;= n) continue;
                rep(l, n) {
                    if(j + l &gt;= n) continue;

                    int res = cnt[i+k][j+l];

                    if(i - 1 &gt;= 0) {
                        res -= cnt[i-1][j+l];
                    }

                    if(j - 1 &gt;= 0) {
                        res -= cnt[i+k][j-1];
                    }

                    if(i - 1 &gt;= 0 &amp;&amp; j - 1 &gt;= 0) {
                        res += cnt[i-1][j-1];
                    }

                    m[(k + 1) * (l + 1)] = max(m[(k + 1) * (l + 1)] , res);
                }
            }
        }
    }

    int Q;
    cin &gt;&gt; Q;

    rep(q, Q) {
        int p;
        cin &gt;&gt; p;

        int ans = 0;
        rep(i, p + 1) {
            ans = max(ans, m[i]);
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
