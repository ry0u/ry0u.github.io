<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-12-01T23:52:11+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces374-div2D Maxim and Array]]></title>
    <link href="http://ry0u.github.io/blog/2016/10/04/codeforces374-div2d-maxim-and-array/"/>
    <updated>2016-10-04T01:10:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/10/04/codeforces374-div2d-maxim-and-array</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/problemset/problem/721/D">Problem - 721D - Codeforces</a></h4><p>Codeforces. Programming competitions and contests, programming community</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

$i$番目の要素が$a_i$の数列が与えられる．$k$回, 要素に$+x$か$-x$することが出来る．$\prod a_i$を最小化する．マイナス要素が奇数個の時，要素の掛け算は符号がマイナスになるので，要素が$-$なら$-x$, 要素が$+$なら$+x$を小さい順にしていく．偶数個の時は，絶対値が最小の要素を異符号にして後は同じ．

# Code
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<ll, ll> P;

struct abs_sort {
	bool operator()(P a, P b) const {
		if(abs(a.first) != abs(b.first)) return abs(a.first) > abs(b.first);
		if(a.first != b.first) return a.first > b.first;
		return a.second > b.second;
	}
};


int main() {
	int n, k; ll x;

	cin >> n >> k >> x;

	ll vmin = INF, vcnt = 0;
	vector<ll> v(n);
	rep(i, n) {
		cin >> v[i];
		vmin = min(vmin, v[i]);

		if(v[i] < 0) vcnt++;
	}

	priority_queue<P, vector<P>, abs_sort> Q;
	rep(i, n) {
		Q.push(mp(v[i], i));
	}

	if(vcnt % 2 == 0) {
		P top = Q.top(); Q.pop();

		ll cnt = (abs(top.first) + 1) / x;
		if((abs(top.first) + 1) % x != 0) cnt++;

		if(cnt <= k) {
			k -= cnt;
		} else {
			cnt = k;
			k = 0;
		}

		if(top.first >= 0) {
			top.first -= cnt * x;
		} else {
			top.first += cnt * x;
		}

		Q.push(top);
	}

	rep(i, k) {
		P p = Q.top(); Q.pop();
		if(p.first >= 0) {
			Q.push(mp(p.first + x, p.second));
		} else {
			Q.push(mp(p.first - x, p.second));
		}
	}

	vector<P> ans;
	while(Q.size()) {
		P p = Q.top(); Q.pop();
		ans.push_back(mp(p.second, p.first));
	}

	sort(ans.begin(), ans.end());
	rep(i, n) {
		if(i) cout << " ";
		cout << ans[i].second;
	}
	cout << endl;
	
	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[codeforces374-div2C Journey]]></title>
    <link href="http://ry0u.github.io/blog/2016/10/03/codeforces374-div2c-journey/"/>
    <updated>2016-10-03T01:06:37+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/10/03/codeforces374-div2c-journey</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/721/problem/C">Problem - C - Codeforces</a></h4><p>Codeforces. Programming competitions and contests, programming community</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>
<!-- more -->

町$u$から町$v$に行くには$t$かかる．$T$までに最大でいくつの町を回ることが出来るか．状態を($i$番目の町, $j$個既に町を訪れた)としてdijkstra．最短時間を求めているので，既に訪れた町が重複することはない．costが$T$を超える場合は遷移させない．後は経路復元して出力した．

# Code
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;
typedef pair<ll, P> IP;

struct edge {
	int from,to;
	int cost;

	edge(int t,int c) : to(t),cost(c) {}
	edge(int f,int t,int c) : from(f),to(t),cost(c) {}

	bool operator<(const edge &e) const {
		return cost < e.cost;
	}
};

int n, m;
vector<edge> G[5005];
ll t;
int d[5005][5005], prev[5005][5005];

void dijkstra(int s, int n) {
	priority_queue<IP, vector<IP>, greater<IP> > que;

	rep(i, 5005) rep(j, 5005) {
		d[i][j] = INF;
		prev[i][j] = -1;
	}
	
	d[s][1] = 0;

	que.push(mp(0, mp(s, 1)));
	
	while(que.size()) {
		IP p = que.top(); que.pop();

		int cos = p.first;
		int v = p.second.first;
		int cnt = p.second.second;
		if(d[v][cnt] < cos) continue;
	
		rep(i, G[v].size()) {
			edge e = G[v][i];
			ll nc = ll(d[v][cnt]) + ll(e.cost);
			if(nc > t) continue;

			if(d[e.to][cnt+1] > nc) {
				d[e.to][cnt+1] = nc;
				prev[e.to][cnt+1] = v;
				que.push(mp(d[e.to][cnt+1], mp(e.to, cnt+1)));
			}
		}
	}
}

vector<int> get_path(int t, int cnt) {
	vector<int> path;
	for(;t!=-1;t=prev[t][cnt], cnt--) path.push_back(t);
	reverse(path.begin(),path.end());
	return path;
}

int main() {
	cin >> n >> m >> t;

	rep(i, m) {
		int a, b;
		ll c;
		cin >> a >> b >> c;

		a--; b--;
		G[a].push_back(edge(b, c));
		// G[b].push_back(edge(a, c));
	}

	dijkstra(0, n * n);

	for(int i = n; i > 0; i--) {
		if(d[n-1][i] == INF) continue;
		cout << i << endl;

		vector<int> ret = get_path(n-1, i);
		rep(j, ret.size()) {
			if(j) cout << " ";
			cout << ret[j] + 1;
		}
		cout << endl;
		break;
	}

	return 0;
}
```

最初に$WA$を出したのでlong longに全て直して提出したが$[5000][5000]$なのでメモリが無理．遷移の比較の時にllにして上げれば良いので要らないことに気づく．間違っている理由が全く分からずずっと考えていたが，有向グラフなことを見落としていて，逆の辺を消したら通った(完)．
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces357-div2C Heap Operations]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/15/codeforces357-div2c-heap-operations/"/>
    <updated>2016-06-15T23:42:41+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/15/codeforces357-div2c-heap-operations</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/681/problem/C">Problem - C - Codeforces</a></h4><p>Petya has recently learned data structure named "Binary heap". The heap he is now operating with allows the following operations: put the given number into the heap; get the value of the minimum element in the heap; extract the minimum element from the heap; Thus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

* insert $x$
* getMin $x$
* removeMin

の$3$の命令がある．この命令列が与えられた時に矛盾がないように命令列を変更する  
  
priority\_queueを使う．操作がpush, top, popで全部出来るのでやる．queueが空の時にも命令が与えられるので，REにならないように分岐を付ける．TLEが全然取れなくてとても大変だった．文字列を構成してpush\_backするのではなく，pairで突っ込んで出力を変えたらACした．

# Code
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);

	int n;
	cin >> n;

	priority_queue<int, vector<int>, greater<int> > que;
	vector<pair<string, int> > ans;

	string a = "insert", b = "removeMin", c = "getMin";

	rep(i, n) {
		string s;
		cin >> s;

		if(s == a) {
			int x;
			cin >> x;
			que.push(x);

			ans.push_back(mp(a, x));
		} else if(s == b) {
			if(que.size() == 0) {
				ans.push_back(mp(a, 0));
			} else {
				que.pop();
			}
			ans.push_back(mp(b, -INF));
		} else {
			int x;
			cin >> x;

			while(que.size() && que.top() < x) {
					que.pop();
					ans.push_back(mp(b, -INF));
			}

			if(que.size() == 0 || que.top() != x) {
				que.push(x);
				ans.push_back(mp(a, x));
			}

			ans.push_back(mp(c, x));
		}
	}

	cout << ans.size() << endl;
	rep(i, ans.size()) {
		if(ans[i].second == -INF) cout << ans[i].first << endl;
		else cout << ans[i].first << " " << ans[i].second << endl;
	}

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces357-div2B Economy Game]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/15/codeforces357-div2b-economy-game/"/>
    <updated>2016-06-15T23:32:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/15/codeforces357-div2b-economy-game</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/681/problem/B">Problem - B - Codeforces</a></h4><p>Codeforces. Programming competitions and contests, programming community</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

$a \times 1234567 + b \times 123456 + c \times 1234 = n$となる$a$, $b$, $c$のペアがあるかないかを判定する．  
  
$n \leq 10 ^9$なので最大で$a$は$\frac{10 ^9}{1234567} = 810$, $b$は$\frac{10 ^9}{123456} = 8100$なので  
その数を全探索して，$n - a \times 1234567 - b \times 123456$が$c$で割り切れるかどうかを判定した．

# Code

```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	ll n;
	cin >> n;

	ll a = 1234567;
	ll b = 123456;
	ll c = 1234;

	bool flag = false;
	rep(i, 1000) {
		rep(j, 10000) {
			ll x = n - a * i - b * j;
			if(x < 0) break;
			if(x % c == 0) {
				flag = true;
			}
		}
	}

	if(flag) cout << "YES" << endl;
	else cout << "NO" << endl;

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces355-div2C Vanya and Label]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/02/codeforces355-div2c-vanya-and-label/"/>
    <updated>2016-06-02T14:36:16+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/02/codeforces355-div2c-vanya-and-label</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/677/problem/C">Problem - C - Codeforces</a></h4><p>While walking down the street Vanya saw a label "Hide&Seek". Because he is a programmer, he used & as a bitwise AND for these two words represented as a integers in base 64 and got new word.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

文字列$s$と$\\&$を取った時に等しくなる$2$つの文字列の組み合わせいくつあるか？ $mod\ 10 ^9 + 7$で求める．  
  
各桁についての組み合わせを出して掛けていった．組み合わせを全探索して組み合わせ数を出した． $\\&と==$では$==$のほうが優先度が高いのでちゃんと括弧でくくる．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <bitset>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair
#define MOD 1000000007

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	vector<char> v;
	map<char, int> m;
	rep(i, 10) {
		m['0'+i] = i;
		v.push_back('0'+i);
	}

	rep(i, 26) {
		m['A'+i] = 10 + i;
		m['a'+i] = 36 + i;

		v.push_back('A'+i);
		v.push_back('a'+i);
	}

	m['-'] = 62;
	m['_'] = 63;
	v.push_back('-');
	v.push_back('_');

	map<char, ll> cnt;
	sort(v.begin(), v.end());

	rep(i, v.size()) {
		rep(j, v.size()) {
			rep(k, v.size()) {
				if((m[v[j]] & m[v[k]]) == m[v[i]]) {
					cnt[v[i]]++;
				}
			}
		}
	}

	ll ans = 1;
	string s;
	cin >> s;

	rep(i, s.size()) {
		ans *= cnt[s[i]];
		ans %= MOD;
	}

	cout << ans << endl;

	return 0;
}
```

]]></content>
  </entry>
  
</feed>
