<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2015-07-13T18:00:51+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces311-div2C Arthur and Table]]></title>
    <link href="http://ry0u.github.io/blog/2015/07/12/codeforces311-div2c-arthur-and-table/"/>
    <updated>2015-07-12T23:17:25+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/07/12/codeforces311-div2c-arthur-and-table</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/557/problem/C">http://codeforces.com/contest/557/problem/C</a><br/>
<script type="math/tex">N本の足を持つテーブルがあり，各足には長さl<em>{i}と取り除くコストd</em>{i}が与えられる．</script>
足の長さがバラバラなのでこれを安定状態にしたい．安定状態になるには足の最大の長さの本数が全体の本数の半分より多ければよい．その時の最小のコストを求める．</p>

<p>Sampleを考える．長さ1を1マスとし，文字がコストを表す．取り除いた足を赤色で表現する．</p>

<p>Sample1<br/>
<img src="/images/Codeforces311-div2/image1.png"><br/>
長さ5を取り除くほうがコストが安い</p>

<p>Sample2<br/>
<img src="/images/Codeforces311-div2/image2.png"><br/>
既に安定状態である</p>

<p>Sample3<br/>
<img src="/images/Codeforces311-div2/image3.png"><br/>
長さ2に揃える．長さ3は全て取り除き，個数が半分より多くなるように長さ1を1つ取り除く．</p>

<h1>考察</h1>

<p>どの長さで揃えるかを探索する．仮に揃える長さをLと決めた場合，全体のコストの和からLを引き，後は長さLの足の個数-1個分残すようにすればよいとわかる．長さでsortし小さい順から見ていけば，その処理ができる．</p>

<p>揃える長さを緑とした時に，赤の部分は全て取り除くことになる．
<img src="/images/Codeforces311-div2/image4.png"><br/>
後は緑より小さい足を緑の個数より少なくすればよい．出来るだけコストを抑えたいのでコストが大きい棒を残すようにする．よって全体のコストの和-揃える長さ-(それより長さが短い足をコストの大きい順に個数が少なくなるまで)で求める．</p>

<h1>Code</h1>

<p>コストが大きい順に見たいためpriority_queueを用いて大きい順に取った．最初は小さい順からとってしまい．WAを生やした．mapを使っているからidなどを作らずにmap巡回をしたほうがより分かりやすい(?)．</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; L(n),D(n);
    rep(i,n) cin &gt;&gt; L[i];
    rep(i,n) cin &gt;&gt; D[i];

    vector&lt;int&gt; id(L.begin(),L.end());
    sort(id.begin(),id.end());
    id.erase(unique(id.begin(),id.end()),id.end());

    int sum = 0;
    map&lt;int,vector&lt;int&gt; &gt; m;
    rep(i,n) {
        m[L[i]].push_back(D[i]);
        sum += D[i];
    }

    int ans = sum;
    priority_queue&lt;int&gt; que;
    rep(i,id.size()) {
        vector&lt;int&gt; v(m[id[i]].begin(),m[id[i]].end());
        int res = sum;
        int cnt = v.size()-1;

        rep(j,v.size()) res -= v[j];

        vector&lt;int&gt; t;
        while(que.size() &amp;&amp; cnt) {
            int q = que.top();
            que.pop();

            res -= q;
            t.push_back(q);
            cnt--;
        }

        ans = min(ans,res);

        rep(j,t.size()) que.push(t[j]);
        rep(j,v.size()) que.push(v[j]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
