<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-09-03T02:19:57+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces357-div2C Heap Operations]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/15/codeforces357-div2c-heap-operations/"/>
    <updated>2016-06-15T23:42:41+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/15/codeforces357-div2c-heap-operations</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/681/problem/C">Problem - C - Codeforces</a></h4><p>Petya has recently learned data structure named "Binary heap". The heap he is now operating with allows the following operations: put the given number into the heap; get the value of the minimum element in the heap; extract the minimum element from the heap; Thus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

* insert $x$
* getMin $x$
* removeMin

の$3$の命令がある．この命令列が与えられた時に矛盾がないように命令列を変更する  
  
priority\_queueを使う．操作がpush, top, popで全部出来るのでやる．queueが空の時にも命令が与えられるので，REにならないように分岐を付ける．TLEが全然取れなくてとても大変だった．文字列を構成してpush\_backするのではなく，pairで突っ込んで出力を変えたらACした．

# Code
```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);

	int n;
	cin >> n;

	priority_queue<int, vector<int>, greater<int> > que;
	vector<pair<string, int> > ans;

	string a = "insert", b = "removeMin", c = "getMin";

	rep(i, n) {
		string s;
		cin >> s;

		if(s == a) {
			int x;
			cin >> x;
			que.push(x);

			ans.push_back(mp(a, x));
		} else if(s == b) {
			if(que.size() == 0) {
				ans.push_back(mp(a, 0));
			} else {
				que.pop();
			}
			ans.push_back(mp(b, -INF));
		} else {
			int x;
			cin >> x;

			while(que.size() && que.top() < x) {
					que.pop();
					ans.push_back(mp(b, -INF));
			}

			if(que.size() == 0 || que.top() != x) {
				que.push(x);
				ans.push_back(mp(a, x));
			}

			ans.push_back(mp(c, x));
		}
	}

	cout << ans.size() << endl;
	rep(i, ans.size()) {
		if(ans[i].second == -INF) cout << ans[i].first << endl;
		else cout << ans[i].first << " " << ans[i].second << endl;
	}

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces357-div2B Economy Game]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/15/codeforces357-div2b-economy-game/"/>
    <updated>2016-06-15T23:32:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/15/codeforces357-div2b-economy-game</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/681/problem/B">Problem - B - Codeforces</a></h4><p>Codeforces. Programming competitions and contests, programming community</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

$a \times 1234567 + b \times 123456 + c \times 1234 = n$となる$a$, $b$, $c$のペアがあるかないかを判定する．  
  
$n \leq 10 ^9$なので最大で$a$は$\frac{10 ^9}{1234567} = 810$, $b$は$\frac{10 ^9}{123456} = 8100$なので  
その数を全探索して，$n - a \times 1234567 - b \times 123456$が$c$で割り切れるかどうかを判定した．

# Code

```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	ll n;
	cin >> n;

	ll a = 1234567;
	ll b = 123456;
	ll c = 1234;

	bool flag = false;
	rep(i, 1000) {
		rep(j, 10000) {
			ll x = n - a * i - b * j;
			if(x < 0) break;
			if(x % c == 0) {
				flag = true;
			}
		}
	}

	if(flag) cout << "YES" << endl;
	else cout << "NO" << endl;

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces355-div2C Vanya and Label]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/02/codeforces355-div2c-vanya-and-label/"/>
    <updated>2016-06-02T14:36:16+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/02/codeforces355-div2c-vanya-and-label</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/677/problem/C">Problem - C - Codeforces</a></h4><p>While walking down the street Vanya saw a label "Hide&Seek". Because he is a programmer, he used & as a bitwise AND for these two words represented as a integers in base 64 and got new word.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

文字列$s$と$\\&$を取った時に等しくなる$2$つの文字列の組み合わせいくつあるか？ $mod\ 10 ^9 + 7$で求める．  
  
各桁についての組み合わせを出して掛けていった．組み合わせを全探索して組み合わせ数を出した． $\\&と==$では$==$のほうが優先度が高いのでちゃんと括弧でくくる．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <bitset>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair
#define MOD 1000000007

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	vector<char> v;
	map<char, int> m;
	rep(i, 10) {
		m['0'+i] = i;
		v.push_back('0'+i);
	}

	rep(i, 26) {
		m['A'+i] = 10 + i;
		m['a'+i] = 36 + i;

		v.push_back('A'+i);
		v.push_back('a'+i);
	}

	m['-'] = 62;
	m['_'] = 63;
	v.push_back('-');
	v.push_back('_');

	map<char, ll> cnt;
	sort(v.begin(), v.end());

	rep(i, v.size()) {
		rep(j, v.size()) {
			rep(k, v.size()) {
				if((m[v[j]] & m[v[k]]) == m[v[i]]) {
					cnt[v[i]]++;
				}
			}
		}
	}

	ll ans = 1;
	string s;
	cin >> s;

	rep(i, s.size()) {
		ans *= cnt[s[i]];
		ans %= MOD;
	}

	cout << ans << endl;

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces355-div2B Vanya and Food Processor]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/02/codeforces355-div2b-vanya-and-food-processor/"/>
    <updated>2016-06-02T14:00:25+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/02/codeforces355-div2b-vanya-and-food-processor</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/677/problem/B">Problem - B - Codeforces</a></h4><p>Vanya smashes potato in a vertical food processor. At each moment of time the height of the potato in the processor doesn't exceed h and the processor smashes k centimeters of potato each second. If there are less than k centimeters remaining, than during this second processor smashes all the remaining potato.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

高さ{% m %} h {% em %}，{% m %} 1 {% em %}秒間に{% m %} k {% em %}を潰せるフードプロセッサーがある．高さ {% m %} a_i {% em %}のじゃがいもが {% m %} n {% em %}個ある時に何秒で全て潰すことが出来るか？(indexの小さい順に崩していく)．  
潰す順番を変更出来ないので，単純に入れて潰す． {% m %} mod\ k\ +\ a_i \leq h{% em %}の時には次のを入れて潰す．そうでないの時は潰してから入れる．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <stack>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	ll n;
	cin >> n;

	ll k, h;
	cin >> h >> k;

	vector<ll> v(n);
	rep(i, n) cin >> v[i];

	ll ans = 0, sum = 0;
	rep(i, n) {
		if(sum + v[i] <= h) sum += v[i];
		else {
			sum = v[i];
			ans++;
		}

		ans += sum / k;
		sum %= k;
	}

	if(sum != 0) ans++;

	cout << ans << endl;

	return 0;
}
```

本番は順番を変更出来るものだと勘違いしていて，pretestが延々と通らずに泣いていた．順番が変更出来る場合は，大きいものから入れれるなら入れて，入りきらなくなったら潰す．を繰り返していたのですが，この貪欲はあっているのかわからない．
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces354-div2D Theseus and labyrinth]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/26/codeforces354-div2d-theseus-and-labyrinth/"/>
    <updated>2016-05-26T10:19:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/26/codeforces354-div2d-theseus-and-labyrinth</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/676/problem/D">Problem - D - Codeforces</a></h4><p>Theseus has just arrived to Crete to fight Minotaur. He found a labyrinth that has a form of a rectangular field of size and consists of blocks of size 1 × 1. Each block of the labyrinth has a button that rotates all blocks 90 degrees clockwise.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

サイズが {% m %} 1 \times 1 {% em %}のブロックで構成される {% m %} n \times m {% em %}の {% m %} field {% em %}がある． {% m %} 1 {% em %}回の行動で隣接するマスに移動するか，全てのブロックを {% m %} 90 {% em %}度時計回りに回転するかが出来る．隣接するマスには移動するためには，現在のマスから隣接するマスの方向にドアがあり，隣接するマスから現在のマスの方向にドアがあるのが条件となる． {% m %} (x_t, y_t) {% em %}から {% m %} (x_mm, y_m) {% em %}には最小何回でいけるか．  
  
盤面と状態を{% m %} (y, x, rot) {% em %}で持って，幅優先探索．当たられる座標が {% m %} xとy {% em %}で逆なので注意する．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;
typedef pair<int, P> IP;
typedef pair<P, P> PP;

int d[1001][1001][4];
char v[1001][1001][4];
map<char, vector<char> > ma;

// (y, x)にdirのドアがあるか
bool ch(int y, int x, int rot, int i) {
	char c = v[y][x][rot];
	if(c == '+') return true;
	if(c == '*') return false;

	if(i == 0) {
		if(c == '-' || c == '>' || c == 'D' || c == 'L' || c == 'U') return true;
		return false;
	} else if(i == 1) {
		if(c == '|' || c == 'v' || c == 'L' || c == 'U' || c == 'R') return true;
		return false;
	} else if(i == 2) {
		if(c == '-' || c == '<' || c == 'U' || c == 'R' || c == 'D') return true;
		return false;
	} else if(i == 3) {
		if(c == '|' || c == '^' || c == 'R' || c == 'D' || c == 'L') return true;
		return false;
	}
}

int main() {
	int n, m;
	cin >> n >> m;

	ma['+'].push_back('+');
	ma['+'].push_back('+');
	ma['+'].push_back('+');
	ma['+'].push_back('+');

	ma['-'].push_back('-');
	ma['-'].push_back('|');
	ma['-'].push_back('-');
	ma['-'].push_back('|');

	ma['|'].push_back('|');
	ma['|'].push_back('-');
	ma['|'].push_back('|');
	ma['|'].push_back('-');

	ma['^'].push_back('^');
	ma['^'].push_back('>');
	ma['^'].push_back('v');
	ma['^'].push_back('<');

	ma['>'].push_back('>');
	ma['>'].push_back('v');
	ma['>'].push_back('<');
	ma['>'].push_back('^');

	ma['v'].push_back('v');
	ma['v'].push_back('<');
	ma['v'].push_back('^');
	ma['v'].push_back('>');

	ma['<'].push_back('<');
	ma['<'].push_back('^');
	ma['<'].push_back('>');
	ma['<'].push_back('v');

	ma['L'].push_back('L');
	ma['L'].push_back('U');
	ma['L'].push_back('R');
	ma['L'].push_back('D');

	ma['U'].push_back('U');
	ma['U'].push_back('R');
	ma['U'].push_back('D');
	ma['U'].push_back('L');

	ma['R'].push_back('R');
	ma['R'].push_back('D');
	ma['R'].push_back('L');
	ma['R'].push_back('U');

	ma['D'].push_back('D');
	ma['D'].push_back('L');
	ma['D'].push_back('U');
	ma['D'].push_back('R');

	ma['*'].push_back('*');
	ma['*'].push_back('*');
	ma['*'].push_back('*');
	ma['*'].push_back('*');

	vector<string> s(n);
	rep(i, n) cin >> s[i];

	rep(i, n) {
		rep(j, m) {
			rep(k, 4) {
				v[i][j][k] = ma[s[i][j]][k];
			}
		}
	}

	int sy, sx;
	cin >> sy >> sx;

	sy--; sx--;

	int gy, gx;
	cin >> gy >> gx;

	gy--; gx--;

	rep(i, n) {
		rep(j, m) {
			rep(k, 4) d[i][j][k] = INF;
		}
	}

	queue<IP> que;
	que.push(mp(0, mp(sy, sx)));
	d[sy][sx][0] = 0;

	int dx[4] = {1, 0, -1, 0};
	int dy[4] = {0, 1, 0, -1};
	int nd[4] = {2, 3, 0, 1};

	while(que.size()) {
		IP p = que.front(); que.pop();
		int rot = p.first;
		int y = p.second.first;
		int x = p.second.second;

		rep(i, 4) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if(0 <= ny && ny < n && 0 <= nx && nx < m && ch(y, x, rot, i) && ch(ny, nx, rot, nd[i])) {
				if(d[ny][nx][rot] > d[y][x][rot] + 1) {
				   d[ny][nx][rot] = d[y][x][rot] + 1;
					que.push(mp(rot, mp(ny, nx)));
				}
			}
		}

		int nr = (rot + 1) % 4;
		if(d[y][x][nr] > d[y][x][rot] + 1) {
			d[y][x][nr] = d[y][x][rot] + 1;
			que.push(mp(nr, mp(y, x)));
		}
	}

	// rep(k, 4) {
	// 	cout  << "-------- " << endl;
	// 	rep(i, n) {
	// 		rep(j, m) {
	// 			if(d[i][j][k] == INF) cout << "X ";
	// 			else cout << d[i][j][k] << " ";
	// 		}
	// 		cout << endl;
	// 	}
	// }

	int ans = INF;
	rep(i, 4) {
		ans = min(ans, d[gy][gx][i]);
	}

	if(ans == INF) cout << -1 << endl;
	else cout << ans << endl;

	return 0;
}
```

実装がひどい．各方向に行けるかいけないかをboolで持っておけば， {% m %} ch {% em %}の中で全て列挙する形にならないので良いと思った．実装の方針がミスのしやすさ，実装時間に影響すると思うのでなるべく考えてから書きたい．
]]></content>
  </entry>
  
</feed>
