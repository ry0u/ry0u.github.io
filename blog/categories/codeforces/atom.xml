<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-06-09T14:11:03+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces355-div2C Vanya and Label]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/02/codeforces355-div2c-vanya-and-label/"/>
    <updated>2016-06-02T14:36:16+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/02/codeforces355-div2c-vanya-and-label</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/677/problem/C">Problem - C - Codeforces</a></h4><p>While walking down the street Vanya saw a label "Hide&Seek". Because he is a programmer, he used & as a bitwise AND for these two words represented as a integers in base 64 and got new word.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>文字列$s$と$\&amp;$を取った時に等しくなる$2$つの文字列の組み合わせいくつあるか？ $mod\ 10 ^9 + 7$で求める．</p>

<p>各桁についての組み合わせを出して掛けていった．組み合わせを全探索して組み合わせ数を出した． $\&amp;と==$では$==$のほうが優先度が高いのでちゃんと括弧でくくる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;bitset&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define MOD 1000000007

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    vector&lt;char&gt; v;
    map&lt;char, int&gt; m;
    rep(i, 10) {
        m['0'+i] = i;
        v.push_back('0'+i);
    }

    rep(i, 26) {
        m['A'+i] = 10 + i;
        m['a'+i] = 36 + i;

        v.push_back('A'+i);
        v.push_back('a'+i);
    }

    m['-'] = 62;
    m['_'] = 63;
    v.push_back('-');
    v.push_back('_');

    map&lt;char, ll&gt; cnt;
    sort(v.begin(), v.end());

    rep(i, v.size()) {
        rep(j, v.size()) {
            rep(k, v.size()) {
                if((m[v[j]] &amp; m[v[k]]) == m[v[i]]) {
                    cnt[v[i]]++;
                }
            }
        }
    }

    ll ans = 1;
    string s;
    cin &gt;&gt; s;

    rep(i, s.size()) {
        ans *= cnt[s[i]];
        ans %= MOD;
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces355-div2B Vanya and Food Processor]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/02/codeforces355-div2b-vanya-and-food-processor/"/>
    <updated>2016-06-02T14:00:25+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/02/codeforces355-div2b-vanya-and-food-processor</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/677/problem/B">Problem - B - Codeforces</a></h4><p>Vanya smashes potato in a vertical food processor. At each moment of time the height of the potato in the processor doesn't exceed h and the processor smashes k centimeters of potato each second. If there are less than k centimeters remaining, than during this second processor smashes all the remaining potato.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>高さ<script type="math/tex"> h </script>，<script type="math/tex"> 1 </script>秒間に<script type="math/tex"> k </script>を潰せるフードプロセッサーがある．高さ <script type="math/tex"> a_i </script>のじゃがいもが <script type="math/tex"> n </script>個ある時に何秒で全て潰すことが出来るか？(indexの小さい順に崩していく)．<br/>
潰す順番を変更出来ないので，単純に入れて潰す． <script type="math/tex"> mod\ k\ +\ a_i \leq h</script>の時には次のを入れて潰す．そうでないの時は潰してから入れる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;stack&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    ll n;
    cin &gt;&gt; n;

    ll k, h;
    cin &gt;&gt; h &gt;&gt; k;

    vector&lt;ll&gt; v(n);
    rep(i, n) cin &gt;&gt; v[i];

    ll ans = 0, sum = 0;
    rep(i, n) {
        if(sum + v[i] &lt;= h) sum += v[i];
        else {
            sum = v[i];
            ans++;
        }

        ans += sum / k;
        sum %= k;
    }

    if(sum != 0) ans++;

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>本番は順番を変更出来るものだと勘違いしていて，pretestが延々と通らずに泣いていた．順番が変更出来る場合は，大きいものから入れれるなら入れて，入りきらなくなったら潰す．を繰り返していたのですが，この貪欲はあっているのかわからない．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces354-div2D Theseus and labyrinth]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/26/codeforces354-div2d-theseus-and-labyrinth/"/>
    <updated>2016-05-26T10:19:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/26/codeforces354-div2d-theseus-and-labyrinth</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/676/problem/D">Problem - D - Codeforces</a></h4><p>Theseus has just arrived to Crete to fight Minotaur. He found a labyrinth that has a form of a rectangular field of size and consists of blocks of size 1 × 1. Each block of the labyrinth has a button that rotates all blocks 90 degrees clockwise.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>サイズが <script type="math/tex"> 1 \times 1 </script>のブロックで構成される <script type="math/tex"> n \times m </script>の <script type="math/tex"> field </script>がある． <script type="math/tex"> 1 </script>回の行動で隣接するマスに移動するか，全てのブロックを <script type="math/tex"> 90 </script>度時計回りに回転するかが出来る．隣接するマスには移動するためには，現在のマスから隣接するマスの方向にドアがあり，隣接するマスから現在のマスの方向にドアがあるのが条件となる． <script type="math/tex"> (x_t, y_t) </script>から <script type="math/tex"> (x_mm, y_m) </script>には最小何回でいけるか．</p>

<p>盤面と状態を<script type="math/tex"> (y, x, rot) </script>で持って，幅優先探索．当たられる座標が <script type="math/tex"> xとy </script>で逆なので注意する．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;
typedef pair&lt;int, P&gt; IP;
typedef pair&lt;P, P&gt; PP;

int d[1001][1001][4];
char v[1001][1001][4];
map&lt;char, vector&lt;char&gt; &gt; ma;

// (y, x)にdirのドアがあるか
bool ch(int y, int x, int rot, int i) {
    char c = v[y][x][rot];
    if(c == '+') return true;
    if(c == '*') return false;

    if(i == 0) {
        if(c == '-' || c == '&gt;' || c == 'D' || c == 'L' || c == 'U') return true;
        return false;
    } else if(i == 1) {
        if(c == '|' || c == 'v' || c == 'L' || c == 'U' || c == 'R') return true;
        return false;
    } else if(i == 2) {
        if(c == '-' || c == '&lt;' || c == 'U' || c == 'R' || c == 'D') return true;
        return false;
    } else if(i == 3) {
        if(c == '|' || c == '^' || c == 'R' || c == 'D' || c == 'L') return true;
        return false;
    }
}

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    ma['+'].push_back('+');
    ma['+'].push_back('+');
    ma['+'].push_back('+');
    ma['+'].push_back('+');

    ma['-'].push_back('-');
    ma['-'].push_back('|');
    ma['-'].push_back('-');
    ma['-'].push_back('|');

    ma['|'].push_back('|');
    ma['|'].push_back('-');
    ma['|'].push_back('|');
    ma['|'].push_back('-');

    ma['^'].push_back('^');
    ma['^'].push_back('&gt;');
    ma['^'].push_back('v');
    ma['^'].push_back('&lt;');

    ma['&gt;'].push_back('&gt;');
    ma['&gt;'].push_back('v');
    ma['&gt;'].push_back('&lt;');
    ma['&gt;'].push_back('^');

    ma['v'].push_back('v');
    ma['v'].push_back('&lt;');
    ma['v'].push_back('^');
    ma['v'].push_back('&gt;');

    ma['&lt;'].push_back('&lt;');
    ma['&lt;'].push_back('^');
    ma['&lt;'].push_back('&gt;');
    ma['&lt;'].push_back('v');

    ma['L'].push_back('L');
    ma['L'].push_back('U');
    ma['L'].push_back('R');
    ma['L'].push_back('D');

    ma['U'].push_back('U');
    ma['U'].push_back('R');
    ma['U'].push_back('D');
    ma['U'].push_back('L');

    ma['R'].push_back('R');
    ma['R'].push_back('D');
    ma['R'].push_back('L');
    ma['R'].push_back('U');

    ma['D'].push_back('D');
    ma['D'].push_back('L');
    ma['D'].push_back('U');
    ma['D'].push_back('R');

    ma['*'].push_back('*');
    ma['*'].push_back('*');
    ma['*'].push_back('*');
    ma['*'].push_back('*');

    vector&lt;string&gt; s(n);
    rep(i, n) cin &gt;&gt; s[i];

    rep(i, n) {
        rep(j, m) {
            rep(k, 4) {
                v[i][j][k] = ma[s[i][j]][k];
            }
        }
    }

    int sy, sx;
    cin &gt;&gt; sy &gt;&gt; sx;

    sy--; sx--;

    int gy, gx;
    cin &gt;&gt; gy &gt;&gt; gx;

    gy--; gx--;

    rep(i, n) {
        rep(j, m) {
            rep(k, 4) d[i][j][k] = INF;
        }
    }

    queue&lt;IP&gt; que;
    que.push(mp(0, mp(sy, sx)));
    d[sy][sx][0] = 0;

    int dx[4] = {1, 0, -1, 0};
    int dy[4] = {0, 1, 0, -1};
    int nd[4] = {2, 3, 0, 1};

    while(que.size()) {
        IP p = que.front(); que.pop();
        int rot = p.first;
        int y = p.second.first;
        int x = p.second.second;

        rep(i, 4) {
            int ny = y + dy[i];
            int nx = x + dx[i];

            if(0 &lt;= ny &amp;&amp; ny &lt; n &amp;&amp; 0 &lt;= nx &amp;&amp; nx &lt; m &amp;&amp; ch(y, x, rot, i) &amp;&amp; ch(ny, nx, rot, nd[i])) {
                if(d[ny][nx][rot] &gt; d[y][x][rot] + 1) {
                   d[ny][nx][rot] = d[y][x][rot] + 1;
                    que.push(mp(rot, mp(ny, nx)));
                }
            }
        }

        int nr = (rot + 1) % 4;
        if(d[y][x][nr] &gt; d[y][x][rot] + 1) {
            d[y][x][nr] = d[y][x][rot] + 1;
            que.push(mp(nr, mp(y, x)));
        }
    }

    // rep(k, 4) {
    //  cout  &lt;&lt; "-------- " &lt;&lt; endl;
    //  rep(i, n) {
    //      rep(j, m) {
    //          if(d[i][j][k] == INF) cout &lt;&lt; "X ";
    //          else cout &lt;&lt; d[i][j][k] &lt;&lt; " ";
    //      }
    //      cout &lt;&lt; endl;
    //  }
    // }

    int ans = INF;
    rep(i, 4) {
        ans = min(ans, d[gy][gx][i]);
    }

    if(ans == INF) cout &lt;&lt; -1 &lt;&lt; endl;
    else cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>実装がひどい．各方向に行けるかいけないかをboolで持っておけば， <script type="math/tex"> ch </script>の中で全て列挙する形にならないので良いと思った．実装の方針がミスのしやすさ，実装時間に影響すると思うのでなるべく考えてから書きたい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces354-div2C Vasya and String]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/26/codeforces354-div2c-vasya-and-string/"/>
    <updated>2016-05-26T09:38:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/26/codeforces354-div2c-vasya-and-string</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/676/problem/C">Problem - C - Codeforces</a></h4><p>High school student Vasya got a string of length n as a birthday present. This string consists of letters 'a' and '' only. Vasya denotes beauty of the string as the maximum length of a substring (consecutive subsequence) consisting of equal letters. Vasya can change no more than k characters of the original string.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>長さ<script type="math/tex"> n </script>の文字<script type="math/tex"> a, b </script>で構成された文字列が与えられる．<script type="math/tex"> k </script>回変更可能な時に，同じ文字で構成される部分文字列の最大長を答える．</p>

<p>文字 <script type="math/tex"> a </script>だけで構成される部分文字列を考える．区間<script type="math/tex"> [l, r]</script>の中に文字<script type="math/tex"> b </script>が <script type="math/tex"> k </script>個以下ならば，その区間では全て <script type="math/tex"> a </script>にすることができる．これをずらしながらやっていく．文字<script type="math/tex"> b </script>で構成される部分文字列も同様にやり，最大値を取った． <script type="math/tex"> O(n) </script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, k;
    cin &gt;&gt; n &gt;&gt; k;

    string s;
    cin &gt;&gt; s;

    int ans = 0;

    int l = 0, r = 0, cnt = 0;
    rep(i, n) {
        r = i;
        if(s[i] == 'b') cnt++;

        if(cnt &lt;= k) {
            ans = max(ans, r - l + 1);
        }

        while(cnt &gt; k) {
            if(s[l] == 'b') cnt--;
            l++;
        }
    }

    l = 0, r = 0, cnt = 0;
    rep(i, n) {
        r = i;
        if(s[i] == 'a') cnt++;

        if(cnt &lt;= k) {
            ans = max(ans, r - l + 1);
        }

        while(cnt &gt; k) {
            if(s[l] == 'a') cnt--;
            l++;
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;


    return 0;
}
</code></pre>

<p>本番では落ちた．区間 <script type="math/tex"> [l, r] </script>の中の<script type="math/tex"> b </script>が<script type="math/tex"> k </script>を超えた時，というのは今見ている文字が<script type="math/tex"> b </script>でその文字を <script type="math/tex"> a </script>に変えて， <script type="math/tex"> l </script>をずらす，ということなので <script type="math/tex"> r </script>は必ず今見ている場所 <script type="math/tex"> i </script>となる．ということがよく整理できていなかった．反省．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces354-div2B Pyramid of Glasses]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/26/codeforces354-div2b-pyramid-of-glasses/"/>
    <updated>2016-05-26T09:11:14+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/26/codeforces354-div2b-pyramid-of-glasses</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/676/problem/B">Problem - B - Codeforces</a></h4><p>Mary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>グラスがピラミッドのように並んでいる．上から<script type="math/tex"> n </script>段目には<script type="math/tex"> n </script>個のグラスがある．そのグラスがいっぱいになった時は<script type="math/tex"> 1 </script>段下のグラスに均等に注がれる．<script type="math/tex"> t </script>秒後にいっぱいになっているグラスはいくつあるか？</p>

<p>実際にグラフを作って，グラス<script type="math/tex"> 0 </script>から <script type="math/tex"> 1 </script>秒ずつ流していく．グラフは， <script type="math/tex"> i </script>段目の頂点は(自分の番号 <script type="math/tex"> + i </script>), (自分の番号<script type="math/tex"> + i + 1 </script>)と繋がるようにした．</p>

<p><img src="/images/Codeforces/354/b.png"></p>

<p>流す量を <script type="math/tex"> 1.0 </script>から初めて，いっぱいになっている場合は，その半分を繋がっている頂点に流す．流れる量は必ず <script type="math/tex"> \frac{1}{2 ^x} </script>という形になり， <script type="math/tex"> n </script>は最大で <script type="math/tex"> 10 </script>段なので誤差無く保持出来る(はず)．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

vector&lt;int&gt; g[105];
double v[105];

void dfs(int cur, double x) {
    if(v[cur] == 1.0) {
        rep(i, g[cur].size()) {
            dfs(g[cur][i], x / 2.0);
        }
    } else {
        v[cur] += x;
        return;
    }
}

int main() {
    int n, t;
    cin &gt;&gt; n &gt;&gt; t;

    int m = (n * (n+1) ) / 2;

    memset(v, 0, sizeof(v));
    int id = 0, len = 1;
    rep(i, n-1) {
        rep(j, i+1) {
            g[id].push_back(id + len);
            g[id].push_back(id + len+1);
            id++;
        }
        len++;
    }

    rep(i, t) {
        dfs(0, 1.0);
    }

    int cnt = 0;
    rep(i, m) {
        if(v[i] &gt;= 1.0) cnt++;
    }

    cout &lt;&lt; cnt &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
