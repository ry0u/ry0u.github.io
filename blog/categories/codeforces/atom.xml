<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-02-29T13:49:00+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manthan, Codefest 16A Ebony and lvory]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/29/manthan-codefest-16-a-ebony-and-lvory/"/>
    <updated>2016-02-29T10:27:42+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/29/manthan-codefest-16-a-ebony-and-lvory</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0"><h4><a href="http://codeforces.com/contest/633/problem/A">Problem - A - Codeforces</a></h4><p>Dante is engaged in a fight with "The Savior". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<!-- more-->


<p><script type="math/tex; mode=display">
    a, bを用いてcを表せるか．使用回数は0でも良い．
</script></p>

<p><script type="math/tex; mode=display">
    iが表せるならi+a, i+bも表すことが出来る．O(\max&copy;)
</script></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

bool used[10500];

int main() {
    int a, b, c;
    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;

    memset(used, 0, sizeof(used));
    used[0] = true;

    rep(i, c + 1) {
        if(used[i]) {
            used[i+a] = true;
        }
    }

    rep(i, c + 1) {
        if(used[i]) {
            used[i+b] = true;
        }
    }

    if(used[c]) cout &lt;&lt; "Yes" &lt;&lt; endl;
    else cout &lt;&lt; "No" &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces335-div2D Lazy Student]]></title>
    <link href="http://ry0u.github.io/blog/2015/12/15/codeforces335-div2d-lazy-student/"/>
    <updated>2015-12-15T11:04:47+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/12/15/codeforces335-div2d-lazy-student</id>
    <content type="html"><![CDATA[<p>グラフの頂点数<script type="math/tex">N</script>，辺の数<script type="math/tex">M</script>，
最小全域木を構築する辺とそれ以外の辺が与えられる．そのようなグラフが存在すればその一例を，そうでない場合は-1を出力する．</p>

<h1>考察</h1>

<p>最小全域木を構築する辺をコストの小さい順に一本につなげる．Sample 1では次のようにする．
<img src="/images/Codeforces/335/g.png"></p>

<p>後は最小全域木を壊さないように辺を追加する．2つの辺を選び，その端を結ぶことを考えるとその選び方は2乗通りある．
<img src="/images/Codeforces/335/g2.png"></p>

<p>しかし，最小全域木を壊さないということは，選んだ2つの辺のコストよりも大きい辺を追加すれば良いので，小さい順に見ていけばよい．一本の線にする時に小さい順にしているので，前から見ていくことで，追加する辺の個数回で済む．<br/>
<img src="/images/Codeforces/335/g3.png"></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;pair&lt;pair&lt;int,int&gt;, int&gt; &gt; v;
    rep(i, m) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;
        v.push_back(mp(mp(a, b), i));
    }

    sort(v.begin(), v.end());

    vector&lt;int&gt; e;
    vector&lt;P&gt; q;
    vector&lt;pair&lt;int,pair&lt;int,int&gt; &gt; &gt; ans;
    int t = 0;
    rep(i, m) {
        int cost = v[i].first.first;
        int f = v[i].first.second;
        int j = v[i].second;

        if(f == 1) {
            e.push_back(cost);
            ans.push_back(mp(j, mp(t, t+1)));
            t++;
        }
        else if(f == 0) {
            q.push_back(mp(cost, j));
        }
    }

    bool flag = true;
    int from = 0, to = 1;
    for(int i = 0; i &lt; q.size(); i++) {
        if(to == e.size()) {
            flag = false;
            break;
        }

        if(e[from] &lt;= q[i].first &amp;&amp; e[to] &lt;= q[i].first) {
            ans.push_back(mp(q[i].second, mp(from, to+1) ));
        } else {
            P p = q.back();
            if(e[from] &lt;= p.first &amp;&amp; e[to] &lt;= p.first) {
                ans.push_back(mp(p.second, mp(from, to+1)));
                q.pop_back();
            }
            i--;
        }

        if(from == to - 1) {
            from = 0;
            to++;
        } else {
            from++;
        }
    }

    if(flag) {
        sort(ans.begin(), ans.end());
        rep(i, ans.size()) {
            cout &lt;&lt; ans[i].second.first+1 &lt;&lt; " " &lt;&lt; ans[i].second.second+1 &lt;&lt; endl;
        }
    } else {
        cout &lt;&lt; -1 &lt;&lt; endl;
    }

    return 0;
}
</code></pre>

<p>選んだ辺のコストを超えないようにするということは，まず１つの辺を選んだ時に，それより小さい辺を見なければいけなかったが，大きい方の辺をずらしていくという意味の分からないことをしていてWAを連発した．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces334-div2C Alternative Thinking]]></title>
    <link href="http://ry0u.github.io/blog/2015/12/15/codeforces334-div2c-alternative-thinking/"/>
    <updated>2015-12-15T09:50:00+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/12/15/codeforces334-div2c-alternative-thinking</id>
    <content type="html"><![CDATA[<p>長さ<script type="math/tex">N</script>の'0'と'1'で構成された文字列が与えられる．ある区間を1度だけ反転して'0'と'1'が交互となる列の長さを最大化する．</p>

<h1>考察</h1>

<p>まず，文字列の交互列の長さを<script type="math/tex"> m </script>とすると，一度の反転で最大2しか増えないことが分かる．例えば，
<script type="math/tex; mode=display">
    1111(m = 1) \Rightarrow 11\color{red}01(m = 3) \
    1101(m = 3) \Rightarrow \color{red}0101(m = 4) \
    1100(m = 2) \Rightarrow 1\color{red}0\color{red}10(m = 4) \
</script>
のように出来る．また，<script type="math/tex"> m = N </script>の時以外に，区間を反転して長さが増えないケースを考えると，そのようなケースは無いと分かる．反転する区間で01を内包している場合，反転後をその部分は10で交互列になるからである．
<script type="math/tex; mode=display">
11 0101 00(m = 4) \Rightarrow 1 \color{red}0 \color{red}1\color{red}0\color{red}1\color{red}0 \color{red}1 0(m = 6) \
</script></p>

<p>よって，<script type="math/tex">N</script>を超えないように，+1，+2したらACが貰えた</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    string s;
    cin &gt;&gt; s;

    int cnt = 0;
    bool flag = true;

    if(s[0] == '1') cnt++;

    rep(i, n) {
        if(flag) {
            if(s[i] == '1') continue;
            else {
                cnt++;
                flag = false;
            }
        } else {
            if(s[i] == '1') {
                cnt++;
                flag = true;
            } else continue;
        }
    }

    if(cnt + 2 &lt;= n) cout &lt;&lt; cnt + 2 &lt;&lt; endl;
    else if(cnt + 1 &lt;= n) cout &lt;&lt; cnt + 1 &lt;&lt; endl;
    else cout &lt;&lt; cnt &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces332-div2C Day at the Beach]]></title>
    <link href="http://ry0u.github.io/blog/2015/11/25/codeforces332-div2c-day-at-the-beach/"/>
    <updated>2015-11-25T01:38:53+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/11/25/codeforces332-div2c-day-at-the-beach</id>
    <content type="html"><![CDATA[<p>数列 h があり，hをソートした状態にしたい．区間に分けるとその区間ではソートすることが出来る．この分ける区間の数を最大化したい．</p>

<h1>考察</h1>

<p>数列hをソートし，ソート前とソート後で比較する．左から見て個数をカウントしていき，それが0に担った所を区切る．この区切り方は，数列hの区間をソートした数列が，ソートした数列hと一緒になる一番短い区間になる方法である．よってこれを繰り返すことで最大値が求まる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n), t(n);
    rep(i, n) {
        cin &gt;&gt; v[i];
        t[i] = v[i];
    }

    sort(t.begin(), t.end());
    int ans = 0;
    map&lt;int, int&gt; m;

    rep(i, n) {
        if(m[v[i]] == -1) {
            m.erase(v[i]);
        } else {
            m[v[i]]++;
        }

        if(m[t[i]] == 1) {
            m.erase(t[i]);
        } else {
            m[t[i]]--;
        }

        if(m.size() == 0) {
            ans++;
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>本番中はよくわからないコードを書いていた．終了後にソートしたものと比較すれば良いことに気付いた．．．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces322-div2D Three Logos]]></title>
    <link href="http://ry0u.github.io/blog/2015/10/01/codeforces322-div2d-three-logos/"/>
    <updated>2015-10-01T04:09:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/10/01/codeforces322-div2d-three-logos</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/581/problem/D">http://codeforces.com/contest/581/problem/D</a></p>

<p>3つのブロックが与えられる．これらのブロックを上手く配置して正方形が出来るかを調べる．出来る場合はABCで実際に並べて，出来ない場合は-1を出力する．</p>

<h1>考察</h1>

<p>この3つのブロックの中で最大の辺が必ず，求めたい正方形の1辺となる．よって3つを横に並べるパターンと，縦横に分けて並べるパターンに分けて，出来るかどうかの判断をした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    vector&lt;pair&lt; pair&lt;int,int&gt;,int &gt; &gt; v(3);
    int len = 0;

    rep(i,3) {
        cin &gt;&gt; v[i].first.first &gt;&gt; v[i].first.second;
        v[i].second = i;

        if(v[i].first.first &lt; v[i].first.second) {
            swap(v[i].first.first, v[i].first.second);
        }

        len = max(len , v[i].first.first);
    }

    sort(v.begin(), v.end(),greater&lt;pair&lt;P,int&gt; &gt;());

    int a = v[0].first.first, b = v[0].first.second;
    int c = v[1].first.first, d = v[1].first.second;
    int e = v[2].first.first, f = v[2].first.second;

    char A = char('A' + v[0].second);
    char B = char('A' + v[1].second);
    char C = char('A' + v[2].second);

    if(a == len &amp;&amp; c == len &amp;&amp; e == len) {
        if(b + d + f == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,d) {
                rep(j,c) cout &lt;&lt; B;
                cout &lt;&lt; endl;
            }

            rep(i,f) {
                rep(j,e) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else {
            cout &lt;&lt; -1 &lt;&lt; endl;
        }
    } else {
        if(b + c == len &amp;&amp; b + e == len &amp;&amp; d + f == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,c) {
                rep(j,d) cout &lt;&lt; B;
                rep(j,f) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        }
        else if(b + d == len &amp;&amp; b + e == len &amp;&amp; c + f == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,d) {
                rep(j,c) cout &lt;&lt; B;
                rep(j,f) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else if(b + c == len &amp;&amp; b + f == len &amp;&amp; d + e == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,c) {
                rep(j,d) cout &lt;&lt; B;
                rep(j,e) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else if(b + d == len &amp;&amp; b + f == len &amp;&amp; c + e == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,d) {
                rep(j,c) cout &lt;&lt; B;
                rep(j,e) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else {
            cout &lt;&lt; -1 &lt;&lt; endl;
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
