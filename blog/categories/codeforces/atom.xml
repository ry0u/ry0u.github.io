<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-02-22T23:04:07+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces335-div2D Lazy Student]]></title>
    <link href="http://ry0u.github.io/blog/2015/12/15/codeforces335-div2d-lazy-student/"/>
    <updated>2015-12-15T11:04:47+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/12/15/codeforces335-div2d-lazy-student</id>
    <content type="html"><![CDATA[<p>グラフの頂点数<script type="math/tex">N</script>，辺の数<script type="math/tex">M</script>，
最小全域木を構築する辺とそれ以外の辺が与えられる．そのようなグラフが存在すればその一例を，そうでない場合は-1を出力する．</p>

<h1>考察</h1>

<p>最小全域木を構築する辺をコストの小さい順に一本につなげる．Sample 1では次のようにする．
<img src="/images/Codeforces/335/g.png"></p>

<p>後は最小全域木を壊さないように辺を追加する．2つの辺を選び，その端を結ぶことを考えるとその選び方は2乗通りある．
<img src="/images/Codeforces/335/g2.png"></p>

<p>しかし，最小全域木を壊さないということは，選んだ2つの辺のコストよりも大きい辺を追加すれば良いので，小さい順に見ていけばよい．一本の線にする時に小さい順にしているので，前から見ていくことで，追加する辺の個数回で済む．<br/>
<img src="/images/Codeforces/335/g3.png"></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;pair&lt;pair&lt;int,int&gt;, int&gt; &gt; v;
    rep(i, m) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;
        v.push_back(mp(mp(a, b), i));
    }

    sort(v.begin(), v.end());

    vector&lt;int&gt; e;
    vector&lt;P&gt; q;
    vector&lt;pair&lt;int,pair&lt;int,int&gt; &gt; &gt; ans;
    int t = 0;
    rep(i, m) {
        int cost = v[i].first.first;
        int f = v[i].first.second;
        int j = v[i].second;

        if(f == 1) {
            e.push_back(cost);
            ans.push_back(mp(j, mp(t, t+1)));
            t++;
        }
        else if(f == 0) {
            q.push_back(mp(cost, j));
        }
    }

    bool flag = true;
    int from = 0, to = 1;
    for(int i = 0; i &lt; q.size(); i++) {
        if(to == e.size()) {
            flag = false;
            break;
        }

        if(e[from] &lt;= q[i].first &amp;&amp; e[to] &lt;= q[i].first) {
            ans.push_back(mp(q[i].second, mp(from, to+1) ));
        } else {
            P p = q.back();
            if(e[from] &lt;= p.first &amp;&amp; e[to] &lt;= p.first) {
                ans.push_back(mp(p.second, mp(from, to+1)));
                q.pop_back();
            }
            i--;
        }

        if(from == to - 1) {
            from = 0;
            to++;
        } else {
            from++;
        }
    }

    if(flag) {
        sort(ans.begin(), ans.end());
        rep(i, ans.size()) {
            cout &lt;&lt; ans[i].second.first+1 &lt;&lt; " " &lt;&lt; ans[i].second.second+1 &lt;&lt; endl;
        }
    } else {
        cout &lt;&lt; -1 &lt;&lt; endl;
    }

    return 0;
}
</code></pre>

<p>選んだ辺のコストを超えないようにするということは，まず１つの辺を選んだ時に，それより小さい辺を見なければいけなかったが，大きい方の辺をずらしていくという意味の分からないことをしていてWAを連発した．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces332-div2C Day at the Beach]]></title>
    <link href="http://ry0u.github.io/blog/2015/11/25/codeforces332-div2c-day-at-the-beach/"/>
    <updated>2015-11-25T01:38:53+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/11/25/codeforces332-div2c-day-at-the-beach</id>
    <content type="html"><![CDATA[<p>数列 h があり，hをソートした状態にしたい．区間に分けるとその区間ではソートすることが出来る．この分ける区間の数を最大化したい．</p>

<h1>考察</h1>

<p>数列hをソートし，ソート前とソート後で比較する．左から見て個数をカウントしていき，それが0に担った所を区切る．この区切り方は，数列hの区間をソートした数列が，ソートした数列hと一緒になる一番短い区間になる方法である．よってこれを繰り返すことで最大値が求まる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n), t(n);
    rep(i, n) {
        cin &gt;&gt; v[i];
        t[i] = v[i];
    }

    sort(t.begin(), t.end());
    int ans = 0;
    map&lt;int, int&gt; m;

    rep(i, n) {
        if(m[v[i]] == -1) {
            m.erase(v[i]);
        } else {
            m[v[i]]++;
        }

        if(m[t[i]] == 1) {
            m.erase(t[i]);
        } else {
            m[t[i]]--;
        }

        if(m.size() == 0) {
            ans++;
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>本番中はよくわからないコードを書いていた．終了後にソートしたものと比較すれば良いことに気付いた．．．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces322-div2D Three Logos]]></title>
    <link href="http://ry0u.github.io/blog/2015/10/01/codeforces322-div2d-three-logos/"/>
    <updated>2015-10-01T04:09:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/10/01/codeforces322-div2d-three-logos</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/581/problem/D">http://codeforces.com/contest/581/problem/D</a></p>

<p>3つのブロックが与えられる．これらのブロックを上手く配置して正方形が出来るかを調べる．出来る場合はABCで実際に並べて，出来ない場合は-1を出力する．</p>

<h1>考察</h1>

<p>この3つのブロックの中で最大の辺が必ず，求めたい正方形の1辺となる．よって3つを横に並べるパターンと，縦横に分けて並べるパターンに分けて，出来るかどうかの判断をした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    vector&lt;pair&lt; pair&lt;int,int&gt;,int &gt; &gt; v(3);
    int len = 0;

    rep(i,3) {
        cin &gt;&gt; v[i].first.first &gt;&gt; v[i].first.second;
        v[i].second = i;

        if(v[i].first.first &lt; v[i].first.second) {
            swap(v[i].first.first, v[i].first.second);
        }

        len = max(len , v[i].first.first);
    }

    sort(v.begin(), v.end(),greater&lt;pair&lt;P,int&gt; &gt;());

    int a = v[0].first.first, b = v[0].first.second;
    int c = v[1].first.first, d = v[1].first.second;
    int e = v[2].first.first, f = v[2].first.second;

    char A = char('A' + v[0].second);
    char B = char('A' + v[1].second);
    char C = char('A' + v[2].second);

    if(a == len &amp;&amp; c == len &amp;&amp; e == len) {
        if(b + d + f == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,d) {
                rep(j,c) cout &lt;&lt; B;
                cout &lt;&lt; endl;
            }

            rep(i,f) {
                rep(j,e) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else {
            cout &lt;&lt; -1 &lt;&lt; endl;
        }
    } else {
        if(b + c == len &amp;&amp; b + e == len &amp;&amp; d + f == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,c) {
                rep(j,d) cout &lt;&lt; B;
                rep(j,f) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        }
        else if(b + d == len &amp;&amp; b + e == len &amp;&amp; c + f == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,d) {
                rep(j,c) cout &lt;&lt; B;
                rep(j,f) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else if(b + c == len &amp;&amp; b + f == len &amp;&amp; d + e == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,c) {
                rep(j,d) cout &lt;&lt; B;
                rep(j,e) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else if(b + d == len &amp;&amp; b + f == len &amp;&amp; c + e == len) {
            cout &lt;&lt; len &lt;&lt; endl;
            rep(i,b) {
                rep(j,a) cout &lt;&lt; A;
                cout &lt;&lt; endl;
            }

            rep(i,d) {
                rep(j,c) cout &lt;&lt; B;
                rep(j,e) cout &lt;&lt; C;
                cout &lt;&lt; endl;
            }
        } else {
            cout &lt;&lt; -1 &lt;&lt; endl;
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces322-div2C Developing Skills]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/30/codeforces322-div2c-developing-skills/"/>
    <updated>2015-09-30T15:41:28+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/30/codeforces322-div2c-developing-skills</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/581/problem/C">http://codeforces.com/contest/581/problem/C</a></p>

<p>主人公は，<script type="math/tex">n</script> 個のskillを持っている．<script type="math/tex"> \lfloor \frac{a_{i}}{10} \rfloor </script>が価値になる．killの値を<script type="math/tex"> k </script>だけ上げることが出来る時に，最大の価値の合計を求めよ．</p>

<h1>考察</h1>

<p>10刻みで1上がることが分かるので，次に価値が上がるまでいくら上げればいいかをpriority_queueに突っ込む．そしてこの値が小さい順にkを使って最大を計算する．それぞれのskillが100を超えてはいけないことに注意する（落ちた）．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n,k;
    cin &gt;&gt; n &gt;&gt; k;

    vector&lt;int&gt; v(n);
    rep(i,n) {
        cin &gt;&gt; v[i];
    }


    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;

    rep(i,n) {
        int d = v[i] % 10;
        que.push(P(10 - d,v[i]));
    }

    int ans = 0;
    while(k &gt; 0 &amp;&amp; que.size()) {
        P p = que.top();
        que.pop();

        if(p.second == 100) {
            ans += 10;
            continue;
        }

        if(k &gt;= p.first) {
            que.push(P(10,p.second + p.first));
            k -= p.first;
        } else {
            p.first -= k;
            que.push(P(p.first, p.second+k));
            k = 0;
        }
    }

    while(que.size()) {
        P p = que.top();
        que.pop();

        ans += p.second / 10;
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces322-div2B Luxurious Houses]]></title>
    <link href="http://ry0u.github.io/blog/2015/09/30/codeforces322-div2b-luxurious-houses/"/>
    <updated>2015-09-30T15:26:14+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/09/30/codeforces322-div2b-luxurious-houses</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/581/problem/B">http://codeforces.com/contest/581/problem/B</a></p>

<p>建物の高さが与えられる．自分から見て，右側の建物より高くなるために必要な高さを答えよ．</p>

<h1>考察</h1>

<p>CodeFestival予選練習会で<br/>
<a href="http://code-festival-2014-qualb.contest.atcoder.jp/tasks/code_festival_qualB_d">http://code-festival-2014-qualb.contest.atcoder.jp/tasks/code_festival_qualB_d</a><br/>
を解いたばかりである．これはRMQだ，と思って実装した．<br/>
しかし，そんなことをする必要は無く，右から見ていき，現在見た所までの最大の高さを持っているだけで出来た．この方法は思いつかなかった．</p>

<h1>Code</h1>

<p>RMQ</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct RMQ {
    int n;
    vector&lt;int&gt; dat;

    RMQ(int n_) {
        n = 1;
        while(n &lt; n_) n *= 2;

        dat.resize(n*4);
        rep(i,n*4) dat[i] = -INF;
    }

    void update(int k,int a) {
        int i = k+n-1;
        dat[i] = a;

        while(i &gt; 0) {
            i = (i-1) / 2;
            dat[i] = max(dat[i*2+1],dat[i*2+2]);
        }
    }

    //[a,b)
    //query(a,b,0,0,n)
    int _query(int a,int b,int k,int l,int r)
    {
        if(r &lt;= a || b &lt;= l) return -INF;

        if(a &lt;= l &amp;&amp; r &lt;= b) return dat[k];
        else { 
            int vl = _query(a,b,k*2+1,l,(l+r)/2);
            int vr = _query(a,b,k*2+2,(l+r)/2,r);
            return max(vl,vr);
        }
    }

    //[a,b)
    int query(int a,int b) {
        return _query(a,b,0,0,n);
    }

};

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n);
    RMQ rmq(n);
    rep(i,n) {
        cin &gt;&gt; v[i];
        rmq.update(i,v[i]);
    }

    rep(i,n) {
        int d = rmq.query(i,n+1);
        int d2 = rmq.query(i+1,n+1);

        if(d == v[i] &amp;&amp; v[i] != d2) cout &lt;&lt; 0;
        else cout &lt;&lt; d+1 - v[i];

        if(i == n-1) cout &lt;&lt; endl;
        else cout &lt;&lt; " ";
    }

    return 0;
}
</code></pre>

<p>右から見て行く．</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n);
    rep(i,n) cin &gt;&gt; v[i];

    int vmax = 0;
    vector&lt;int&gt; ans(n);
    for(int i=n-1; i&gt;=0; i--) {
        if(vmax &lt; v[i]) ans[i] = 0;
        else ans[i] = vmax+1 - v[i];

        vmax = max(vmax,v[i]);
    }

    rep(i,n) {
        cout &lt;&lt; ans[i];

        if(i ==n -1) cout &lt;&lt; endl;
        else cout &lt;&lt; " ";
    }

    return 0;
}
</code></pre>

<p>実装量がかなり違うので，出来るだけ実装が軽い方法を思いつけるようになりたい．</p>
]]></content>
  </entry>
  
</feed>
