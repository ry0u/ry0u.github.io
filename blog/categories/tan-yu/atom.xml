<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 貪欲 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/tan-yu/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-17T18:17:24+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1509 Rental DVD Shop NEO]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/10/aoj1509-rental-dvd-shop-neo/"/>
    <updated>2016-05-10T00:29:00+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/10/aoj1509-rental-dvd-shop-neo</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1509">Rental DVD Shop NEO | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>セットレンタルを複数回適用することが出来る，とある<script type="math/tex"> d </script>本以上買う場合は(選んだ本数) <script type="math/tex"> \times e</script>となるので，<script type="math/tex"> 1 </script>本を <script type="math/tex"> e </script>円でレンタルすることが出来る訳なので，複数回買ったのを結局まとめてしまえば，セットレンタルをするのは<script type="math/tex"> 1 </script>回で良いことが分かる．<br/>
<script type="math/tex"> e </script>円より高いものはこのセットで買った方がお得で，<script type="math/tex"> e </script>円より高いものが <script type="math/tex"> d </script>本無い場合は，どのへんまでをレンタルしたほうが良いかを判断しなければならないので，値段順に降順ソートして，セットレンタルする範囲と普通に借りる範囲を順番に見て，最小を取った．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    ll a, b, c, d, e;
    while(true) {
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e;

        if(a == 0 &amp;&amp; b == 0 &amp;&amp; c == 0 &amp;&amp; d == 0 &amp;&amp; e == 0) break;

        ll na, nb, nc;
        cin &gt;&gt; na &gt;&gt; nb &gt;&gt; nc;

        vector&lt;ll&gt; v;
        rep(i, na) v.push_back(a);
        rep(i, nb) v.push_back(b);
        rep(i, nc) v.push_back(c);

        sort(v.begin(), v.end(), greater&lt;ll&gt;());

        ll sum = a * na + b * nb + c * nc;
        ll ans = sum, pre = 0;

        rep(i, v.size()) {
            pre += v[i];
            sum -= v[i];
            if(i &gt;= d-1) {
                ans = min(ans, sum + min(pre, (i + 1) * e));
            } else {
                ans = min(ans, sum + min(pre, d * e));
            }
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
