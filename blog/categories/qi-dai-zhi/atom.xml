<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 期待値 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/qi-dai-zhi/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-20T23:41:41+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ABC008C コイン]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/29/abc008c-koin/"/>
    <updated>2016-03-29T22:16:02+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/29/abc008c-koin</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://abc008.contest.atcoder.jp/tasks/abc008_3">C: コイン - AtCoder Beginner Contest 008 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>コインが<script type="math/tex"> N </script>枚与えられる．<script type="math/tex"> \frac{表になる枚数}{N!} </script>を求める．ある数<script type="math/tex"> i </script>枚目が表になるか，裏になるかは<script type="math/tex"> N </script>枚の内，<script type="math/tex"> C_{i} </script>の約数であるものの個数によって変わる．<script type="math/tex"> i </script>枚目が表になる枚数は，表になる確率<script type="math/tex"> a_{i} </script>が分かれば<script type="math/tex"> N! \cdot a_{i} </script>で求まる．よって
<script type="math/tex; mode=display">
\begin{eqnarray}
    \frac{表になる枚数}{N!} &amp;=&amp; \frac{N! \cdot a<em>{1} + N! \cdot a</em>{2} + &hellip; + N! \cdot a<em>{N}}{N!} \
                            &amp;=&amp; \sum</em>{i=1} ^{N} a_{i}
\end{eqnarray}
</script>
となり， <script type="math/tex"> a_i </script>が求まれば良くなった．<script type="math/tex"> C_i </script>の約数の個数を <script type="math/tex"> s </script>と置き，コインの中で約数と自身のみ( <script type="math/tex"> s+1個 </script>)で考える．<br/>
例えば約数をo, 自身をx，約数の個数を<script type="math/tex"> 3 </script>とすると x o o o, o x o o, o o x o, o o o xの <script type="math/tex"> 4 </script>パターンで表になるのは x o o oとo o x oの <script type="math/tex"> 2 </script>パターンである．</p>

<ul>
<li><script type="math/tex"> sが奇数の時，表になる確率は\frac{\frac{1}{2}(s + 1)}{(s + 1)} = \frac{1}{2} </script></li>
<li><script type="math/tex"> sが偶数の時，表になる確率は\frac{\frac{1}{2}(s + 2)}{(s + 1)} </script></li>
</ul>


<p>後はこれをそれぞれ計算した．</p>

<hr />

<p>色々書いてることが怪しい．後で見直す．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n);
    rep(i, n) cin &gt;&gt; v[i];

    sort(v.begin(), v.end());

    int cnt[105];
    memset(cnt, 0, sizeof(cnt));

    rep(i, n) {
        rep(j, n) {
            if(i == j) continue;
            if(v[i] % v[j] == 0) {
                cnt[i]++;
            }
        }
    }

    double ans = 0;
    rep(i, n) {
        double d = cnt[i];

        if(cnt[i] % 2 == 1) {
            double a = 1 / 2.0;
            ans += a;
        } else {
            double a = ((d + 2) / 2.0) / (d + 1);
            ans += a;
        }

    }

    cout &lt;&lt; fixed;
    cout.precision(20);
    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1286 Expected Allowance]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj1286-expected-allowance/"/>
    <updated>2016-03-18T22:54:03+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj1286-expected-allowance</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1286">Expected Allowance | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p><script type="math/tex; mode=display">
    dp[i][j] := i回，m面のサイコロを降った時にjが出る回数
</script></p>

<p>として，シュミレーション．サイコロを振るのは <script type="math/tex"> dp[i+1][j+k] += dp[i][j] </script>と書ける．配列を再利用するために，<script type="math/tex"> iとi+1 </script>の偶奇を見て遷移する．次に遷移する場所に値が残っているとおかしいことになるので，<script type="math/tex"> dp[i][j] </script>からサイコロを振ったらそこは初期化する．分母は全て <script type="math/tex"> m ^n </script>で， <script type="math/tex"> k </script>引いた時に最低でも <script type="math/tex"> 1 </script>になるようにして期待値を求める．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int dp[2][100005];

int main() {
    int n, m, k;
    while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; k) {
        if(n == 0 &amp;&amp; m == 0 &amp;&amp; k == 0) break;

        memset(dp, 0, sizeof(dp));
        REP(j, 1, m + 1) {
            dp[1][j] = 1;
        }

        rep(i, n) {
            rep(j, 100005) {
                if(dp[i &amp; 1][j] == 0) continue;
                REP(k, 1, m+1) {
                    dp[(i+1)&amp;1][j+k] += dp[i&amp;1][j];
                }
                dp[i&amp;1][j] = 0;
            }
        }

        double ans = 0, t = 1;
        rep(i, n) {
            t *= m;
        }

        rep(j, 100005) {
            if(dp[n&amp;1][j] == 0) continue;

            double l = j - k;
            if(l &lt;= 0) l = 1;
            ans += (dp[n &amp; 1][j] / t) * l;
        }

        cout &lt;&lt; fixed;
        cout.precision(20);
        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
