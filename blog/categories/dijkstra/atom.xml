<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dijkstra | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/dijkstra/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-06-09T14:11:03+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ2151 Brave Princess Revisited]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/09/aoj2151-brave-princess-revisited/"/>
    <updated>2016-06-09T13:59:08+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/09/aoj2151-brave-princess-revisited</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2151">Brave Princess Revisited | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>状態を(襲われる盗賊や刺客の人数, お金, 頂点番号)としてdijkstra．現在の状態から次の状態への遷移は，護衛を雇わないで盗賊に襲われる，護衛を雇い守ってもらう，の$2$つである．お金が辺の長さより少ない場合は護衛を雇えないことに注意する．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;
typedef pair&lt;P, int&gt; PI;

struct edge {
    int from,to;
    int cost, res;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int t,int c,int r) : to(t), cost(c), res(r) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[105];
int d[105][105];

void dijkstra(int s, int l) {
    rep(i, 105) rep(j, 105) d[i][j] = INF;
    d[s][l] = 0;

    priority_queue&lt;PI, vector&lt;PI&gt;, greater&lt;PI&gt; &gt; que;
    que.push(mp(mp(0, -l), s));

    while(que.size()) {
        PI p = que.top(); que.pop();
        int cost = p.first.first;
        int coin = p.first.second;
        int v = p.second;
        coin *= -1;

        if(d[v][coin] &lt; cost) continue;

        rep(i, G[v].size()) {
            edge e = G[v][i];

            if(d[e.to][coin] &gt; d[v][coin] + e.res) {
                d[e.to][coin] = d[v][coin] + e.res;
                que.push(mp(mp(d[e.to][coin], -coin), e.to));
            }

            int nc = coin - e.cost;
            if(nc &gt;= 0 &amp;&amp; d[e.to][nc] &gt; d[v][coin]) {
                d[e.to][nc] = d[v][coin];
                que.push(mp(mp(d[e.to][nc], -nc), e.to));
            }
        }

    }
}

int main() {
    int n, m, l;
    while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; l)  {
        if(n == 0 &amp;&amp; m == 0 &amp;&amp; l == 0) break;

        rep(i, 105) G[i].clear();

        rep(i, m) {
            int a, b, c, d;
            cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;

            a--; b--;

            G[a].push_back(edge(b, c, d));
            G[b].push_back(edge(a, c, d));
        }

        dijkstra(0, l);

        int ans = INF;
        rep(i, l+1) {
            ans = min(ans, d[n-1][i]);
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ2608 Minus One]]></title>
    <link href="http://ry0u.github.io/blog/2016/06/06/aoj2608-minus-one/"/>
    <updated>2016-06-06T23:24:32+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/06/06/aoj2608-minus-one</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2608">Minus One | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>$G$に$e$を付け加えて無向グラフにおける$s$から$t$への最短路の長さより$1$だけ大きいものの個数を答える．これはつまり，パスを貼った時に最短経路長が$1$小さくなるものである．</p>

<p>$s$からの最短経路長を$d[i]$，$t$からの最短経路長を$d2[i]$とする．点$a$と点$b$を結んだ場合，$s \to a \to b \to t$という経路を行くとすると，コストは$d[a] + 1 + d2[b]$となる．この時$s \to t$の最短経路長$+1$となる経路は，
$$
\begin{eqnarray}
    d[t] - 1 &amp;=&amp; d[a] + 1 + d2[b] \\
    d2[b] &amp;=&amp; d[t] - 2 - d[a]
\end{eqnarray}
$$
が条件となる．愚直に$a, b$のペアを列挙して確認すると$O(n ^2)$で間に合わないが，点$a$を決めた時に，経路長$1$少なくなる$b$の選び方は$d[t] - 2 - d[a]$となる$d2[i]$の個数と決まるので，先に$d2[i]$をカウントしておくと$O(n)$で求められる．最短経路を求めるのが一番時間がかかるので全体で$O(n logn)$．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[100005];
int d[100005], d2[100005], cnt[100005];

void dijkstra(int s) {
    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;
    rep(i, 100005) d[i] = INF;

    que.push(mp(0, s));
    d[s] = 0;

    while(que.size()) {
        P p = que.top(); que.pop();
        int cost = p.first;
        int v = p.second;

        if(d[v] &lt; cost) continue;

        rep(i, G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(mp(d[e.to], e.to));
            }
        }
    }
}

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    int s, t;
    cin &gt;&gt; s &gt;&gt; t;
    s--; t--;

    rep(i, m) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;
        a--; b--;

        G[a].push_back(edge(b, 1));
        G[b].push_back(edge(a, 1));
    }

    dijkstra(s);
    rep(i, n) d2[i] = d[i];

    dijkstra(t);
    rep(i, n) swap(d[i], d2[i]);

    memset(cnt, 0, sizeof(cnt));
    rep(i, n) {
        if(d2[i] == INF) continue;
        cnt[d2[i]]++;
    }

    ll ans = 0;
    rep(i, n) {
        if(d[i] == INF || d2[i] == INF) continue;
        int x = d[t] - 2 - d[i];

        if(x &gt;= 0) {
            ans += cnt[x];
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>経路復元とか色々していて，色々考えた後に書き直したら非常にスッキリして面白いと思った．但し解くのに時間がかかりすぎている&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1505 Dungeon]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/21/aoj1505-dungeon/"/>
    <updated>2016-04-21T14:26:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/21/aoj1505-dungeon</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1505">Dungeon | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>まず最初dijkstraの始点を <script type="math/tex"> 0, n-1 </script>としてスタート地点からの最短経路と，ゴール地点からの最短経路を出しておく．これで各クエリに対して<script type="math/tex"> O(n) </script>で答えられるようになったが， <script type="math/tex">1 \leq n \leq 10 ^5, 1 \leq q \leq 10 ^5</script>なので間に合わない．<br/>
(スタート地点からの最短コスト, 頂点番号)のpairで，(ゴール地点からの最短コスト, 頂点番号)のpairでsortする．また頂点番号がsort後の配列のどこのindexかを持っておく．</p>

<p>スタート地点からのコスト</p>

<table>
<thead>
<tr>
<th style="text-align:center;">index</th>
<th style="text-align:center;">0</th>
<th style="text-align:center;">1</th>
<th style="text-align:center;">2</th>
<th style="text-align:center;">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">cost</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">3</td>
</tr>
<tr>
<td style="text-align:center;">頂点</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
</tr>
</tbody>
</table>


<p>ゴール地点からのコスト</p>

<table>
<thead>
<tr>
<th style="text-align:center;">index</th>
<th style="text-align:center;">0</th>
<th style="text-align:center;">1</th>
<th style="text-align:center;">2</th>
<th style="text-align:center;">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">cost</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">4</td>
</tr>
<tr>
<td style="text-align:center;">頂点</td>
<td style="text-align:center;">3</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">1</td>
</tr>
</tbody>
</table>


<p>スタート地点に関して頂点番号 <script type="math/tex"> _i </script>のsort後の配列のindexの変換テーブル</p>

<table>
<thead>
<tr>
<th style="text-align:center;">頂点</th>
<th style="text-align:center;">0</th>
<th style="text-align:center;">1</th>
<th style="text-align:center;">2</th>
<th style="text-align:center;">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">index</td>
<td style="text-align:center;">0</td>
<td style="text-align:center;">2</td>
<td style="text-align:center;">1</td>
<td style="text-align:center;">3</td>
</tr>
</tbody>
</table>


<p>次にクエリ <script type="math/tex"> q_i </script>の <script type="math/tex"> (fg, fs, クエリ番号) </script>でsortする． 少なくとも<script type="math/tex"> fg </script>かかる，という制限なので<script type="math/tex"> fg </script>を優先してsortすれば，それ以前のものは候補に上がらないので，省いて良い．この省くというのを表現するのにBITを用いた．<script type="math/tex"> fg </script>より小さい所は変換テーブルを用いてそのindexに <script type="math/tex"> +1 </script>する．次に <script type="math/tex"> fs </script>以下を満たす最大のindex持ってきてBITを用いてその区間和を引く．</p>

<p>説明が全く出来ている気がしない．後で見直し</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;61
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    ll cost;

    edge(int t,ll c) : to(t),cost(c) {}
    edge(int f,int t,ll c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[100005];
ll d[100005], d2[100005];

void dijkstra(int s, int n) {
    priority_queue&lt;pair&lt;ll, ll&gt; , vector&lt;pair&lt;ll, ll&gt; &gt;, greater&lt;pair&lt;ll, ll&gt; &gt; &gt; que;
    fill(d, d+n, INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i, G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}

struct BIT {
    vector&lt;int&gt; bit;

    BIT(int n) : bit(n+1) {}

    int sum(int i) {
        int s = 0;
        while(i &gt; 0) {
            s += bit[i];
            i -= i &amp; -i;
        }
        return s;
    }

    void add(int i,int x) {
        while(i &lt;= bit.size()) {
            bit[i] += x;
            i += i &amp; -i;
        }
    }
};

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    rep(i, m) {
        ll a, b, c;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;

        G[a].push_back(edge(b, c));
        G[b].push_back(edge(a, c));
    }

    dijkstra(n-1, n);
    memset(d2, 0, sizeof(d2));
    rep(i, n) {
        d2[i] = d[i];
    }

    dijkstra(0, n);

    vector&lt;ll&gt; d3(n);
    vector&lt;pair&lt;ll, int&gt; &gt; D, D2;
    rep(i, n) {
        d3[i] = d[i];
        D.push_back(mp(d[i], i));
        D2.push_back(mp(d2[i], i));
    }

    sort(d3.begin(), d3.end());
    sort(D.begin(), D.end());
    sort(D2.begin(), D2.end());

    map&lt;int, int&gt; ma;
    rep(i, n) {
        ma[ D[i].second ] = i;
    }

    int q;
    cin &gt;&gt; q;

    vector&lt;pair&lt;pair&lt;ll, ll&gt; , int&gt; &gt; query(q);

    rep(i, q) {
        ll s, g;
        cin &gt;&gt; s &gt;&gt; g;

        query[i] = mp(mp(g, s), i);
    }

    sort(query.begin(), query.end());

    BIT bit(n + 5);
    vector&lt;P&gt; ans;
    int start = 0;
    rep(i, q) {
        ll s = query[i].first.second;
        ll g = query[i].first.first;
        int id = query[i].second;

        for(; start &lt; n; start++) {
            if(g &gt; D2[start].first) {
                int k = ma[ D2[start].second ];
                bit.add(k + 1, 1);
                continue;
            } else break;
        }

        vector&lt;ll&gt;::iterator ite = upper_bound(d3.begin(), d3.end(), s);
        int k = ite - d3.begin() - 1;
        if(k &lt; 0) {
            ans.push_back(mp( id, 0));
        } else {
            int res = k + 1;
            res -= bit.sum(k + 1);
            ans.push_back(mp( id, res));
        }
    }

    sort(ans.begin(), ans.end());

    rep(i, ans.size()) {
        cout &lt;&lt; ans[i].second &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC012D バスと割けられない運命]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc012d-basutoge-kerarenaiyun-ming/"/>
    <updated>2016-04-03T17:27:51+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc012d-basutoge-kerarenaiyun-ming</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://abc012.contest.atcoder.jp/tasks/abc012_4">D: バスと避けられない運命 - AtCoder Beginner Contest 012 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>バス停の数<script type="math/tex"> N </script>が <script type="math/tex"> 1 \leq N \leq 300 </script>と小さいので，愚直にそこを始点とした最短経路を求め，最大値の最小値を取った． <script type="math/tex"> O(N ^2) </script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;60
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    ll cost;

    edge(int t, ll c) : to(t),cost(c) {}
    edge(int f, int t, ll c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[305];
ll d[305];

void dijkstra(int s, int n) {
    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;
    fill(d, d+n, INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i, G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}


int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    rep(i, m) {
        ll s, t, c;
        cin &gt;&gt; s &gt;&gt; t &gt;&gt; c;
        s--; t--;

        G[s].push_back(edge(t, c));
        G[t].push_back(edge(s, c));
    }

    ll ans = INF;
    rep(i, n) {
        dijkstra(i, n);
        ll res = 0;
        rep(j, n) {
            res = max(res, d[j]);
        }

        ans = min(ans, res);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ2021 Princess in Danger]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/23/aoj2021-princess-in-danger/"/>
    <updated>2016-03-23T19:48:34+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/23/aoj2021-princess-in-danger</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2021">Princess in Danger | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>状態を <script type="math/tex"> (cost, 残り時間, 番号) </script>としてdijkstra．現在の状態の残り時間のほうが辺のコストより大きい時に，次の町に行くことが可能．冷凍施設にいるときは， 現在の残り時間から<script type="math/tex"> M </script>まで回復出来るので <script type="math/tex"> 1 </script>分ずつ試す．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;
typedef pair&lt;P, int&gt; PI;
typedef pair&lt;P, P &gt; PP;

struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

int n, m, l, k, a, h;
vector&lt;edge&gt; G[105];
int d[105][105];
bool L[105];

void dijkstra(int s) {
    priority_queue&lt;PI, vector&lt;PI&gt;, greater&lt;PI&gt; &gt; que;
    rep(i, 105) {
        rep(j, 105) {
            d[i][j] = INF;
        }
    }

    d[s][m] = 0;
    que.push(PI(P(0, m), s));

    while(que.size()) {
        PI p = que.top();
        que.pop();

        int cost = p.first.first;
        int t = p.first.second;
        int v = p.second;
        if(d[v][t] &lt; cost) continue;

        if(L[v]) {
            REP(i, t+1, m+1) {
                if(d[v][i] &gt; d[v][t] + (i - t)) {
                    d[v][i] = d[v][t] + (i - t);
                    que.push(PI(P(d[v][i], i), v) );
                }
            }
        }

        rep(i, G[v].size()) {
            edge e = G[v][i];
            int nt = t - e.cost;
            if(nt &gt;= 0 &amp;&amp; d[e.to][nt] &gt; d[v][t] + e.cost) {
                d[e.to][nt] = d[v][t] + e.cost;
                que.push(PI(P(d[e.to][nt], nt), e.to));
            }
        }
    }
}


int main() {
    while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; l &gt;&gt; k &gt;&gt; a &gt;&gt; h) {
        if(n == 0 &amp;&amp; m == 0 &amp;&amp; l == 0 &amp;&amp; k == 0 &amp;&amp; a == 0 &amp;&amp; h == 0) break;

        rep(i, 105) G[i].clear();
        memset(L, 0, sizeof(L));

        rep(i, l) {
            int x;
            cin &gt;&gt; x;
            L[x] = true;
        }

        rep(i, k) {
            int s, t, c;
            cin &gt;&gt; s &gt;&gt; t &gt;&gt; c;
            G[s].push_back(edge(t, c));
            G[t].push_back(edge(s, c));
        }

        dijkstra(a);

        int ans = INF;
        rep(i, m + 1) {
            ans = min(ans, d[h][i]);
        }

        if(ans == INF) cout &lt;&lt; "Help!" &lt;&lt; endl;
        else cout &lt;&lt; ans &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
