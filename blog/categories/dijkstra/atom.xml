<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dijkstra | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/dijkstra/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-03-08T17:38:28+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0596 Taxis]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/06/aoj0596-taxis/"/>
    <updated>2016-03-06T01:40:26+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/06/aoj0596-taxis</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0596">Taxis | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>タクシーの移動しか使わないのでタクシーの移動の場合のグラフを作り直す．まず連結している町の辺のコストを<script type="math/tex"> 1 </script>にする．<br/>
頂点<script type="math/tex"> i </script>からdijkstraして<script type="math/tex"> d[j] \leq R[i] </script>以下の場合に，<script type="math/tex"> i \to j</script>にコスト<script type="math/tex"> C[i] </script>の辺を張る．<br/>
新しいグラフを構築したらそのグラフでdijkstra．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[5005];
vector&lt;int&gt; g[5005];
int C[5005], R[5005], d[5005];

void dijkstra(int s,int n) {
    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt; &gt; que;
    fill(d,d+n,INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i,G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    memset(C, 0, sizeof(C));
    memset(R, 0, sizeof(R));
    rep(i, n) cin &gt;&gt; C[i] &gt;&gt; R[i];
    rep(i, m) {
        int s, t;
        cin &gt;&gt; s &gt;&gt; t;

        s--;
        t--;

        g[s].push_back(t);
        g[t].push_back(s);
    }

    rep(i, n) {
        fill(d, d + n, INF);

        priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;
        que.push(mp(0, i));

        d[i] = 0;

        while(que.size()) {
            P p = que.top();
            que.pop();

            int v = p.second;

            if(d[v] &lt; p.first) continue;

            rep(i, g[v].size()) {
                if(d[g[v][i]] &gt; d[v] + 1) {
                    d[g[v][i]] = d[v] + 1;
                    que.push(mp(d[v] + 1, g[v][i]));
                }
            }
        }

        rep(j, n) {
            if(i == j) continue;
            if(d[j] &lt;= R[i]) {
                G[i].push_back(edge(j, C[i]));
            }
        }
    }

    dijkstra(0, n);

    cout &lt;&lt; d[n-1] &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
