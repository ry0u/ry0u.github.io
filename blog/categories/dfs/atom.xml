<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dfs | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/dfs/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-16T08:41:29+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0535 Crossing Black Ice]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/09/aoj0535-crossing-black-ice/"/>
    <updated>2016-02-09T14:46:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/09/aoj0535-crossing-black-ice</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0535">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0535</a></p>

<!-- more -->


<p>移動方法は20万通りを超えないと問題分に明記されているので，普通にDFSした．移動できる区画数の最大値を求めたいので移動出来る場所がなくなった時点でのMaxを返すようにした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int w,h;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
int f[100][100];
int ans = 0;

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; h &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; w) return true;
    return false;
}

void dfs(set&lt;int&gt; S, int y, int x) {
    bool flag = true;
    rep(i, 4) {
        int ny = y + dy[i];
        int nx = x + dx[i];
        int id = ny * h + nx;

        if(can(ny, nx) &amp;&amp; f[ny][nx] == 1 &amp;&amp; S.find(id) == S.end() ) {
            flag = false;
            S.insert(id);
            dfs(S, ny, nx);
            S.erase(id);
        }
    }

    if(flag) {
        ans = max(ans, (int)S.size());
    }
}

int main() {
    while(cin &gt;&gt; w &gt;&gt; h) {
        if(w == 0 &amp;&amp; h == 0) break;

        rep(i, h) {
            rep(j, w) cin &gt;&gt; f[i][j];
        }

        ans = 0;
        rep(i, h) {
            rep(j, w) {
                if(f[i][j]){
                    set&lt;int&gt; S;
                    S.insert(i * h + j);
                    dfs(S, i, j);
                }
            }
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
