<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: topcoder | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/topcoder/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-03-06T01:49:43+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SRM683 D2H SubtreesCounting]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/04/srm683-d2h-subtreescounting/"/>
    <updated>2016-03-04T16:38:35+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/04/srm683-d2h-subtreescounting</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=14179&rd=16653">TopCoder Statistics - Problem Statement</a></h4><p>You are given an undirected tree T. (The input format is specified below.) The vertices of the tree are numbered 0 through n-1. A subtree of T is any subgraph of T that is connected. The size of a subtree is the number of vertices it contains.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<h3>Sample1</h3>

<p>Sample1で構成される木は
<img src="/images/SRM/683d2h-0.png">
である．この木の全ての部分木の頂点数は</p>

<p>頂点数 <script type="math/tex"> 1 \to </script>
<img src="/images/SRM/683d2h-1.png">
<img src="/images/SRM/683d2h-2.png">
<img src="/images/SRM/683d2h-3.png"></p>

<p>頂点数 <script type="math/tex"> 2 \to </script>
<img src="/images/SRM/683d2h-4.png">
<img src="/images/SRM/683d2h-5.png"></p>

<p>頂点数 <script type="math/tex"> 3 \to </script>
<img src="/images/SRM/683d2h-6.png"></p>

<p>よって<script type="math/tex"> 1 + 1 + 1 + 2 + 2 + 3 = 10 </script>である．</p>

<hr />

<p>頂点<script type="math/tex"> i </script>を根とする木に頂点<script type="math/tex"> j </script>を根とする木を付け加える場合を考える．<br/>
<img src="/images/SRM/683d2h-7.png">
を
<img src="/images/SRM/683d2h-8.png">
としたい．<br/>
この時，
<script type="math/tex; mode=display">
\begin{eqnarray}
    dp[i] &amp;:=&amp; iを根とする全ての部分木の頂点数の和 \
    num[i] &amp;:=&amp; iを根とする部分木の個数
\end{eqnarray}
</script>
とすると，頂点数<script type="math/tex">dp[i]はdp[j] * num[i] + dp[i] * num[j] </script>だけ増加する．</p>

<ul>
<li><script type="math/tex"> dp[j] * num[i] </script><br/>
  <img src="/images/SRM/683d2h-9.png">
  <img src="/images/SRM/683d2h-10.png">
  <img src="/images/SRM/683d2h-11.png">
  <img src="/images/SRM/683d2h-12.png"></li>
<li><script type="math/tex"> dp[i] * num[j] </script><br/>
  <img src="/images/SRM/683d2h-12.png">
  <img src="/images/SRM/683d2h-13.png">
  <img src="/images/SRM/683d2h-14.png">
  <img src="/images/SRM/683d2h-15.png">
  <img src="/images/SRM/683d2h-16.png">
  <img src="/images/SRM/683d2h-17.png">
  <img src="/images/SRM/683d2h-18.png">
  <img src="/images/SRM/683d2h-19.png">
  <img src="/images/SRM/683d2h-20.png"></li>
</ul>


<p>同様に部分木の個数<script type="math/tex"> num[i]はnum[i] * num[j] </script>だけ増加する．適当に根を決め，潜って元の頂点に戻る時に足していく．自分の全ての子を潜り終わったらそれ以上変更があることはないので数える．</p>

<h1>Code</h1>

<pre><code class="cpp">struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[100005];
ll dp[100005], num[100005], cnt[100005];
bool used[100005];

void dfs(int cur) {
    used[cur] = true;
    dp[cur] = 1;
    num[cur] = 1;

    rep(i, G[cur].size()) {
        int to = G[cur][i].to;

        if(!used[to]) {
            dfs(to);

            dp[cur] += (dp[cur] * num[to]) + (dp[to] * num[cur]);
            num[cur] += num[cur] * num[to];

            dp[cur] %= MOD;
            num[cur] %= MOD;
        }
    }

    cnt[cur] = dp[cur];
}

class SubtreesCounting {
    public:
    int sumOfSizes(int n, int a0, int b, int c, int m) {

        rep(i, 100005) G[i].clear();

        vector&lt;ll&gt; v(n);
        v[0] = a0;

        REP(i, 1, n-1) {
            v[i] = (b * v[i-1]) % m + c;
            v[i] %= m;
        }

        REP(i, 1, n) {
            int j = v[i-1] % i;
            G[i].push_back(edge(j, 1));
            G[j].push_back(edge(i, 1));
        }

        memset(dp, 0, sizeof(dp));
        memset(num, 0, sizeof(num));
        memset(cnt, 0, sizeof(cnt));
        memset(used, 0, sizeof(used));

        dfs(0);

        ll ans = 0;
        rep(i, n) {
            ans += cnt[i];
            ans %= MOD;
        }

        return ans;
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM683 D2M MoveStonesEasy]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/03/srm683-d2m-movestoneseasy/"/>
    <updated>2016-03-03T23:54:40+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/03/srm683-d2m-movestoneseasy</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=14182&rd=16653">TopCoder Statistics - Problem Statement</a></h4><p>There are n piles of stones arranged in a line. The piles are numbered 0 through n-1, in order. In other words, for each valid i, piles i and i+1 are adjacent. You are given two int[]s a and b, each with n elements.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>現在の石の山と目的の石の山が渡されるので，左から順番に目的の石の山にしていく．</p>

<h1>Code</h1>

<pre><code class="cpp">    public:
    int get(vector &lt;int&gt; a, vector &lt;int&gt; b) {
        int n = a.size();

        ll ans = 0;
        ll asum = 0, bsum = 0;

        rep(i, n) asum += a[i];
        rep(i, n) bsum += b[i];

        if(asum != bsum) return -1;

        rep(i, n) {
            if(a[i] == b[i]) continue;
            if(a[i] &gt; b[i]) {
                a[i+1] += a[i] - b[i];
                ans += a[i] - b[i];
            } else {
                int len = 1, j = i+1;
                while(a[i] &lt; b[i]) {
                    int d = b[i] - a[i];
                    if(a[j] &gt;= d) {
                        a[j] -= d;
                        a[i] += d;
                        ans += d * len;
                    } else {
                        a[i] += a[j];
                        ans += a[j] * len;
                        a[j] = 0;
                        j++;
                        len++;
                    }
                }
            }
        }

        return ans;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM682 D2H FriendlyRobot]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/29/srm682-d2h-friendlyrobot/"/>
    <updated>2016-02-29T01:13:10+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/29/srm682-d2h-friendlyrobot</id>
    <content type="html"><![CDATA[<p>文字列<script type="math/tex"> U,D,R,L </script>の命令で動くロボットがある．この文字列を<script type="math/tex"> K </script>回書き換えられることが出来るときに，最大で何回<script type="math/tex">(0,0)</script>を通ることが出来るか．</p>

<!-- more -->


<hr />

<p>移動回数が奇数回の時に<script type="math/tex"> (0,0) </script>に戻ることは出来ない．また偶数回の場合でも横方向，縦方向の移動量が共に偶数回，共に奇数回の場合のみ戻ることが出来る．<br/>
また，<script type="math/tex"> +を-に，-を+</script>に変えることで<script type="math/tex"> 2 </script>移動量が変わる．<br/>
そして，戻るために命令を書き換えなければならない回数も以下のように一意に求まる．
<script type="math/tex; mode=display">
\begin{eqnarray}
    共に偶数回 &amp;:=&amp;  \frac{横方向}{2} + \frac{縦方向}{2} \
    共に奇数回 &amp;:=&amp;  \frac{横方向}{2} + \frac{縦方向}{2} + 1\
\end{eqnarray}
</script>
共に奇数回の場合に<script type="math/tex"> +1 </script>されるのは，例えば命令が<script type="math/tex"> UR </script>の場合に<script type="math/tex"> UD </script>に書き換えることで<script type="math/tex"> (0, 0) </script>に戻れるためである．</p>

<p>これより
<script type="math/tex; mode=display">
    dp[i][j] := i番目までの命令列をj回変更した時の(0, 0)を訪れる最大値
</script>
として，総当りしてmaxを取った．</p>

<h1>Code</h1>

<pre><code class="cpp">    public:
    int findMaximumReturns(string s, int K) {

        vector&lt;int&gt; X(s.size() + 1), Y(s.size() + 1);
        int x = 0, y = 0;
        rep(i, s.size()) {
            if(s[i] == 'U') y++;
            if(s[i] == 'D') y--;
            if(s[i] == 'R') x++;
            if(s[i] == 'L') x--;

            X[i+1] = x; Y[i+1] = y;
        }

        rep(i, s.size() + 1) {
            rep(j, K + 1) {
                dp[i][j] = -1;
            }
        }
        dp[0][0] = 0;

        rep(i, s.size() + 1) {
            rep(j, K + 1) {
                if(dp[i][j] == -1) continue;
                for(int k = i + 2; k &lt; s.size() + 1; k += 2) {
                    int s = abs(X[k] - X[i]), t = abs(Y[k] - Y[i]);
                    int res = 0;

                    if(s % 2 == 0 &amp;&amp; t % 2 == 1) continue;
                    if(s % 2 == 1 &amp;&amp; t % 2 == 0) continue;
                    if(s % 2 == 0 &amp;&amp; t % 2 == 0) res = s / 2 + t / 2;
                    if(s % 2 == 1 &amp;&amp; t % 2 == 1) res = s / 2 + t / 2 + 1;

                    if(j + res &gt; K) continue;
                    dp[k][j + res] = max(dp[k][j + res], dp[i][j] + 1);
                }
            }
        }

        ll ans = 0;
        rep(i, s.size() + 1) {
            rep(j, K + 1) {
                ans = max(ans, dp[i][j]);
            }
        }

        return ans;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM682 D2M TopBiologist]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/29/srm682-d2m-topbiologist/"/>
    <updated>2016-02-29T00:36:01+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/29/srm682-d2m-topbiologist</id>
    <content type="html"><![CDATA[<p>大文字アルファベットの<script type="math/tex">A, C, G, T</script>で構成される文字列が与えられる．この文字列に含まれない最小の<script type="math/tex">A, C, G, T</script>で構成される文字列を返す．</p>

<!-- more -->


<hr />

<p>与えられる文字列の長さは最大で<script type="math/tex">2000</script>なので長さ<script type="math/tex">6</script>の文字列が最大となる（長さ<script type="math/tex">5</script>の文字列を単純に連結すれば<script type="math/tex">5120</script>になるが上手いこと組み合わせれば<script type="math/tex">2000</script>以下になる）．</p>

<p>愚直に探索し，その文字列が見つからなければ返す．<br/>
部分文字列を全て列挙しmapに突っ込んだらMLEして落とした．</p>

<h1>Code</h1>

<pre><code class="cpp">    public:
    string findShortestNewSequence(string s) {
        m.clear();

        rep(i, s.size()) {
            stringstream ss;
            REP(j, i, s.size()) {
                string t = s.substr(i, j-i+1);
                if(t.size() &gt;= 10) continue;
                m[t] = true;
            }
        }

        que.push("A");
        que.push("C");
        que.push("G");
        que.push("T");

        string ans = "";
        while(que.size()) {
            string t = que.front();
            que.pop();

            if(!m[t]) {
                ans = t;
                break;
            }

            que.push(t + "A");
            que.push(t + "C");
            que.push(t + "G");
            que.push(t + "T");
        }

        // last check
        return ans;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM663 ABBA]]></title>
    <link href="http://ry0u.github.io/blog/2015/07/24/srm663-abba/"/>
    <updated>2015-07-24T18:55:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/07/24/srm663-abba</id>
    <content type="html"><![CDATA[<p>ある文字列Iに，2つの操作が出来る．<br/>
- 文字列の最後に"A"を足す<br/>
- 文字列を反転して，最後に"B"を足す</p>

<p>文字列Iが文字列Tになるかを判定せよ</p>

<h1>考察</h1>

<p>愚直にIに操作していくと，2<sup>T.size()-I.size()</sup>で無理．しかしTから減らしていくには，一意しかない．末尾が"A"ならば，一つ前の状態をpreTとすると，T = preT+&ldquo;A"となる．まと同様に，末尾が"B"ならば，T = reverse(preT) + "B"である．これを繰り返し，Iと同じsizeになった時に，同じかどうかで判定できる．</p>

<h1>Code</h1>

<pre><code class="cpp">#line 5 "ABBA.cpp"
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;cstring&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;map&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)

using namespace std;
typedef long long ll;

class ABBA {
    public:
    string canObtain(string I, string T) {

        while(T != I &amp;&amp; T.size() &gt; I.size()) {
            if(T[T.size()-1] == 'A') {
                T = T.substr(0,T.size()-1);
            }else {
                T = T.substr(0,T.size()-1);
                reverse(T.begin(),T.end());
            }
        }

        if(T == I) return "Possible";
        return "Impossible";
    }
};
</code></pre>

<p>コードを短く，シンプルにかける．本番中は誤読をしていて死んでいた．このある状態を目的の状態にする問題で，逆からやると上手くいく系はすぐ解けるようになりたい．</p>
]]></content>
  </entry>
  
</feed>
