<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aoj | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/aoj/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-02-20T00:56:15+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0574 Nails]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/20/aoj0574-nails/"/>
    <updated>2016-02-20T00:38:56+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/20/aoj0574-nails</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0574">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0574</a></p>

<!-- more -->


<ul>
<li><script type="math/tex"> (a,b)に+1</script></li>
<li><script type="math/tex"> (a, b+1)に-1 </script></li>
<li><script type="math/tex"> (a+x+1, b)に-1 </script></li>
<li><script type="math/tex">(a+x+2, b+1)に+1</script></li>
<li><script type="math/tex">(a+x+1, b+x+2)に+1</script></li>
<li><script type="math/tex">(a+x+2，b+x+2)に-1 </script></li>
</ul>


<p>して，左から右，上から下，左上から右下方向の累積和を取り，0ではない場所の個数を数えた．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int d[5005][5005];

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    memset(d, 0, sizeof(d));

    rep(i, m) {
        int a, b, x;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; x;

        a--;
        b--;

        d[a][b]++;
        d[a][b+1]--;

        d[a+x+1][b]--;
        d[a+x+2][b+1]++;

        d[a+x+1][b+x+2]++;
        d[a+x+2][b+x+2]--;
    }

    rep(i, n) {
        rep(j, i+1) d[i][j+1] += d[i][j];
    }

    rep(i, n) {
        rep(j, i+1) d[i+1][j] += d[i][j];
    }

    rep(i, n) {
        rep(j, i+1) d[i+1][j+1] += d[i][j];
    }

    int ans = 0;
    rep(i, n) {
        rep(j, i+1) {
            if(d[i][j]) ans++;
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0573 Night Market]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/16/aoj0573-night-market/"/>
    <updated>2016-02-16T23:20:29+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/16/aoj0573-night-market</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0573">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0573</a></p>

<!-- more -->


<p>ずっとグラフだろうと考えていた．
頂点を(楽しさ，時間)で持って，indexが大きい頂点にコストを時間とした辺を貼ったグラフを作っても，何を優先度にしてどう探索するか分からない．<br/>
最短時間を求めてながら楽しさを更新しても，時間が長く楽しさが非常に高い辺が来たら答えが合わないことに気づき，ダメ．</p>

<p>時間に注目してみた．ある時間での楽しさの最大値を考えるとナップサックのDPになった．indexの小さい順に訪れるというのは，与えられた順に<script type="math/tex"> i</script>番目のお店以内，と考えれば解決で，花火の時間について時刻<script type="math/tex"> S </script>をまたがる遷移をやめれば良さそうである．</p>

<p><script type="math/tex; mode=display">
    dp[i][j] := i番目以内のお店で，時刻jまで遊んだ時の楽しさの最大値
</script>
として，花火の時間をまたがる遷移をやめ，その最大値を求めたらACした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define mpp(t1, t2, t3, t4) mp(mp(t1, t2), mp(t3, t4))

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;
typedef pair&lt;P, P&gt; PP;

int dp[3005][3005];

int main() {
    int n, t, s;
    cin &gt;&gt; n &gt;&gt; t &gt;&gt; s;

    vector&lt;P&gt; v(n);
    rep(i, n) {
        cin &gt;&gt; v[i].first &gt;&gt; v[i].second;
    }

    memset(dp, 0, sizeof(dp));

    REP(i, 0, n) {
        rep(j, t + 1) {
            if(j - v[i].second &lt; 0 || (j - v[i].second &lt; s &amp;&amp; s &lt; j) ) {
                dp[i+1][j] = dp[i][j];
            } else {
                dp[i+1][j] = max(dp[i][j], dp[i][j-v[i].second] + v[i].first);
            }
        }
    }

    int ans = 0;
    rep(i, n + 1 ) {
        rep(j, t + 1) {
            ans = max(ans, dp[i][j]);
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0572 Card Game is Fun]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/16/aoj0572-card-game-is-fun/"/>
    <updated>2016-02-16T23:08:35+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/16/aoj0572-card-game-is-fun</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0572">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0572</a></p>

<!-- more -->


<p>ブルーノは上から何枚か，下から何枚かを削る．つまり連続したカードが残る．もしブルーノのカードの山が決まった時に，アンナがそのカードの山を作れるかは，先頭から見ていきアンナの山にあるかどうかを見れば良い．<br/>
ブルーノの残すと考えてる暫定カードの先頭と末尾の<script type="math/tex">id</script>を持っておき，<br/>
そのカードの山をアンナが作れるのであれば，末尾を<script type="math/tex">+1もしそうでなければ先頭を+1する． </script><br/>
この<script type="math/tex">maxを取れば良いのでO(n ^2)</script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;int&gt; a(n), b(m);
    rep(i, n) cin &gt;&gt; a[i];
    rep(i, m) cin &gt;&gt; b[i];

    set&lt; vector&lt;int&gt; &gt; st;

    int ans = 0,s = 0, t = 1;
    while(s != b.size()) {
        vector&lt;int&gt; v(t - s);
        REP(j, s, t) {
            v[j-s] = b[j];
        }

        bool flag = false;
        int id = 0;
        rep(j, n) {
            if(a[j] == v[id]) {
                id++;
                if(id == v.size()) {
                    flag = true;
                    break;
                }
            }
        }

        if(flag) {
            t++;
            ans = max(ans, (int)v.size());
        } else {
            s++;
            if(s == t) t++;
        }

    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0569 Illumination]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/16/aoj0569-illumination/"/>
    <updated>2016-02-16T22:49:54+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/16/aoj0569-illumination</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0569">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0569</a></p>

<!-- more -->


<p>六角座標の問題．yが偶奇でdy, dxを変えれば良い．<br/>
全てがイルミネーションの場合もあるので，まず全体を1マス余分にとる．<br/>
外の部分は，必ず<script type="math/tex"> (0, 0) から0で繋がっているはずなので，探索中に回りにある1の数を</script>数えれたらACした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int w, h;
int dy[6] = {-1, 0,+1,+1, 0,-1};
int dx[6] = { 0,-1, 0,+1,+1,+1};

int dy2[6] = {-1, 0,+1,+1, 0,-1};
int dx2[6] = {-1,-1,-1, 0,+1, 0};

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; h + 2 &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; w + 2) return true;
    return false;
}

int main() {
    cin &gt;&gt; w &gt;&gt; h;

    vector&lt; vector&lt;int&gt; &gt; v(h + 2, vector&lt;int&gt;(w + 2));
    rep(i, h) {
        rep(j, w) cin &gt;&gt; v[i+1][j+1];
    }

    int sy = 0, sx = 0;

    queue&lt;P&gt; que;
    que.push(mp(sy, sx));

    bool used[105][105];
    memset(used, 0, sizeof(used));
    used[sy][sx] = true;

    int ans = 0;

    while(que.size()) {
        P p = que.front();
        que.pop();

        rep(i, 6) {
            int y, x;

            if(p.first % 2 == 0) {
                y = p.first + dy2[i];
                x = p.second + dx2[i];
            } else {
                y = p.first + dy[i];
                x = p.second + dx[i];
            }

            if(can(y, x)) {
                if(v[y][x] == 1) {
                    ans++;
                } else if(!used[y][x]) {
                    used[y][x] = true;
                    que.push(mp(y, x));
                }
            }
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0568 Pasta]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/15/aoj0568-pasta/"/>
    <updated>2016-02-15T21:23:15+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/15/aoj0568-pasta</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0568">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0568</a></p>

<!-- more -->


<p>3日以上連続してはいけないので，連続して選んだ状態を<script type="math/tex"> 1 </script>，選んでいない状態を<script type="math/tex"> 0 </script>と分ける．
<script type="math/tex; mode=display">
\begin{eqnarray}
    dp[i][j][0] &amp;:=&amp; i日目にj番目のソースを選び，全日に同じソースを選んでいない場合の通り\
    dp[i][j][1] &amp;:=&amp; i日目にj番目のソースを選び，前日に同じソースを選んだ場合の通り
\end{eqnarray}
</script></p>

<blockquote><p>ある<script type="math/tex"> i </script>日目に<script type="math/tex"> j </script>番目を連続して選ぶ時に，同じ種類の<script type="math/tex"> j </script>番目を選ぶということだが，<script type="math/tex"> i-1 </script>日目が連続して選んだ場合から遷移すると3連続となってしまうので，<script type="math/tex"> i-1 </script>日目が非連続の場合からのみ遷移する．</p></blockquote>

<p>ソース1を<script type="math/tex"> j </script>番目に連続して選ぶ場合，<script type="math/tex"> j-1 </script>番目のソースを連続して選んでいない場合，つまり<script type="math/tex"> dp[i-1][1][0] </script>から遷移
<img src="/images/AOJ/0568-1.png"></p>

<p>ソース2を<script type="math/tex"> j </script>番目に連続して選ぶ場合，<script type="math/tex"> j-1 </script>番目のソースを連続して選んでいない場合，つまり<script type="math/tex"> dp[i-1][2][0] </script>から遷移
<img src="/images/AOJ/0568-2.png"></p>

<p>ソース3を<script type="math/tex"> j </script>番目に連続して選ぶ場合，<script type="math/tex"> j-1 </script>番目のソースを連続して選んでいない場合，つまり<script type="math/tex"> dp[i-1][3][0] </script>から遷移
<img src="/images/AOJ/0568-3.png"></p>

<blockquote><p>ある<script type="math/tex"> i </script>日目に<script type="math/tex"> j </script>番目を連続して選ばない時に，連続して選ばないということは同じ種類を選ばないということなので，<script type="math/tex"> i </script>日目の他の2種類の連続，非連続の場合から遷移する</p></blockquote>

<p>ソース1を<script type="math/tex"> j </script>番目に連続して選ばない場合，ソース1以外の場合，<br/>
つまり<script type="math/tex">dp[i-1][2][0] </script>，<script type="math/tex">dp[i-1][2][1] </script>，<script type="math/tex">dp[i-1][3][0] </script>，<script type="math/tex">dp[i-1][3][1] </script>から遷移<br/>
<img src="/images/AOJ/0568-4.png"></p>

<p>ソース2を<script type="math/tex"> j </script>番目に連続して選ばない場合，ソース2以外の場合，<br/>
つまり<script type="math/tex">dp[i-1][1][0] </script>，<script type="math/tex">dp[i-1][1][1] </script>，<script type="math/tex">dp[i-1][3][0] </script>，<script type="math/tex">dp[i-1][3][1] </script>から遷移<br/>
<img src="/images/AOJ/0568-5.png"></p>

<p>ソース3を<script type="math/tex"> j </script>番目に連続して選ばない場合，ソース3以外の場合，<br/>
つまり<script type="math/tex">dp[i-1][1][0] </script>，<script type="math/tex">dp[i-1][1][1] </script>，<script type="math/tex">dp[i-1][2][0] </script>，<script type="math/tex">dp[i-1][2][1] </script>から遷移<br/>
<img src="/images/AOJ/0568-6.png"></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair
#define MOD 10000

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int dp[105][5][5], d[105];
bool used[105];

int main() {
    int n, k;
    cin &gt;&gt; n &gt;&gt; k;

    memset(used, 0, sizeof(used));
    memset(d, 0, sizeof(d));

    rep(i, k) {
        int a, b;
        cin &gt;&gt; a &gt;&gt; b;

        used[a] = true;
        d[a] = b;
    }

    memset(dp, 0, sizeof(dp));

    if(used[1]) {
        REP(j, 1, 4) {
            if(d[1] == j) dp[1][j][0] = 1;
        }
    } else {
        REP(j, 1, 4) {
            dp[1][j][0] = 1;
        }
    }

    REP(i, 2, n + 1) {
        if(used[i]) {
            if(d[i] == 1) {
                dp[i][1][1] = dp[i-1][1][0];
                dp[i][1][0] = (dp[i-1][2][0] + dp[i-1][2][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
                dp[i][1][1] %= MOD;
                dp[i][1][0] %= MOD;
            } else if(d[i] == 2) {
                dp[i][2][1] = dp[i-1][2][0];
                dp[i][2][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
                dp[i][2][1] %= MOD;
                dp[i][2][0] %= MOD;
            } else {
                dp[i][3][1] = dp[i-1][3][0];
                dp[i][3][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][2][0] + dp[i-1][2][1]);
                dp[i][3][1] %= MOD;
                dp[i][3][0] %= MOD;
            }
        } else {
            dp[i][1][1] = dp[i-1][1][0];
            dp[i][1][0] = (dp[i-1][2][0] + dp[i-1][2][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
            dp[i][2][1] = dp[i-1][2][0];
            dp[i][2][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][3][0] + dp[i-1][3][1]);
            dp[i][3][1] = dp[i-1][3][0];
            dp[i][3][0] = (dp[i-1][1][0] + dp[i-1][1][1]) + (dp[i-1][2][0] + dp[i-1][2][1]);

            dp[i][1][1] %= MOD;
            dp[i][1][0] %= MOD;
            dp[i][2][1] %= MOD;
            dp[i][2][0] %= MOD;
            dp[i][3][1] %= MOD;
            dp[i][3][0] %= MOD;
        }
    }


    // rep(i, n + 1) {
    //  REP(j, 1, 4) {
    //      cout &lt;&lt; "(" &lt;&lt; dp[i][j][0] &lt;&lt; "," &lt;&lt; dp[i][j][1] &lt;&lt; ") ";
    //  }
    //  cout &lt;&lt; endl;
    // }

    int sum = 0;
    REP(j, 1, 4) {
        rep(k, 2) {
            sum += dp[n][j][k];
            sum %= MOD;
        }
    }

    cout &lt;&lt; sum &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
