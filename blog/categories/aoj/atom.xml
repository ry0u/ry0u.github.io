<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aoj | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/aoj/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-03-11T16:59:30+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0601 Sugar Glider]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/11/aoj0601-sugar-glider/"/>
    <updated>2016-03-11T16:43:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/11/aoj0601-sugar-glider</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0601">Sugar Glider | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>現在の場所までのコスト，高さを持ってdijkstra．次の木に飛び移る時に高さが<script type="math/tex"> 0 </script>より小さくなる場合，不足分を登ってから飛び移る．この時に，現在の木の高さが(現在の高さ+不足分)より小さいかをチェックする．また，次の木の高さを超えて場合，逆に下ってから飛び移る．この時に，不足分下った高さが<script type="math/tex"> 0 </script>より大きいかどうかをチェックする．<br/>
最終目標が木<script type="math/tex"> N </script>の一番上なので，答えは<script type="math/tex"> d[n-1] + (H[n-1] - Y[n-1]) </script>となる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;62
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;ll, ll&gt; P;
typedef pair&lt;P, ll&gt; PP;

struct edge {
    int from,to;
    ll cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

ll H[100005], Y[100005];
vector&lt;edge&gt; G[100005];
ll d[100005];

void dijkstra(int s, int n, int h) {
    priority_queue&lt;PP,vector&lt;PP&gt;,greater&lt;PP&gt; &gt; que;
    fill(d,d+n,INF);

    d[s] = 0;
    Y[s] = h;
    que.push(PP(P(0, h), s));

    while(que.size()) {
        PP p = que.top();
        que.pop();

        ll cost = p.first.first;
        ll cur = p.first.second;
        int v = p.second;
        if(d[v] &lt; cost) continue;

        rep(i,G[v].size()) {
            edge e = G[v][i];

            if(H[v] &lt; e.cost) continue;

            if(cur - e.cost &lt; 0) {
                if(e.cost - cur &lt;= H[v] - cur &amp;&amp; d[e.to] &gt; d[v] + (e.cost - cur) + e.cost) {
                    d[e.to] = d[v] + (e.cost - cur) + e.cost;
                    Y[e.to] = 0;
                    que.push(PP(P(d[e.to], 0), e.to));
                }
            } else if(cur - e.cost &gt; H[e.to]) {
                if(cur - ((cur - e.cost) - H[e.to]) &gt;= 0 &amp;&amp; d[e.to] &gt; d[v] + ((cur - e.cost) - H[e.to]) + e.cost) {
                    d[e.to] = d[v] + ((cur - e.cost) - H[e.to]) + e.cost;
                    Y[e.to] = cur - ((cur - e.cost) - H[e.to]) - e.cost;
                    que.push(PP(P(d[e.to], cur - ((cur - e.cost) - H[e.to]) - e.cost), e.to));
                }
            } else {
                if(d[e.to] &gt; d[v] + e.cost) {
                    d[e.to] = d[v] + e.cost;
                    Y[e.to] = cur - e.cost;
                    que.push(PP(P(d[e.to], cur - e.cost), e.to));
                }
            }
        }
    }
}

int main() {
    int n, m, h;
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; h;

    memset(H, 0, sizeof(H));
    memset(Y, 0, sizeof(Y));

    rep(i, n) cin &gt;&gt; H[i];
    rep(i, m) {
        ll a, b, c;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;

        a--;
        b--;

        G[a].push_back(edge(b, c));
        G[b].push_back(edge(a, c));
    }

    dijkstra(0, n, h);

    if(d[n-1] == INF) cout &lt;&lt; -1 &lt;&lt; endl;
    else cout &lt;&lt; d[n-1] + (H[n-1] - Y[n-1]) &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0600 Baumkuchen]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/10/aoj0600-baumkuchen/"/>
    <updated>2016-03-10T23:01:54+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/10/aoj0600-baumkuchen</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0600">Baumkuchen | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>円環を切って2つ繋げて表現する．<script type="math/tex"> sum[i]をi </script>未満の切り込み間の大きさの和として持っておく．区間<script type="math/tex"> (s, t] </script>を<script type="math/tex">3</script>ピースに分けた時の最小値，もう1つの切れ込みを入れる場所を <script type="math/tex"> id </script>と置くと，</p>

<ul>
<li><script type="math/tex"> (s, t] </script></li>
<li><script type="math/tex"> (t, id] </script></li>
<li><script type="math/tex"> (id, s+n]</script></li>
</ul>


<p>の<script type="math/tex"> 3 </script>ピースに分けることになる．区間<script type="math/tex"> (s, t] </script>を最小にしたいので，その区間の大きさ<script type="math/tex"> d </script>を初めて超える場所をlower_boundで取ってくる．後は取ってきた場所から<script type="math/tex"> s+n </script>までの和が<script type="math/tex"> d </script>よりも大きければ良い．もしをこれを満たすようなら，右端を伸ばしてみて，ダメだったら左端を縮める．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;ll&gt; v(n);
    rep(i, n) cin &gt;&gt; v[i];

    vector&lt;ll&gt; sum(2*n + 1);
    rep(i, n) {
        sum[i+1] += sum[i] + v[i];
    }

    rep(i, n) {
        sum[n+i+1] += sum[n + i] + v[i];
    }

    ll ans = 0;
    int s = 0, t = 0,cnt = 0;
    bool flag = true, first = true;

    while(true) {
        if(flag) t++;
        else s++;

        if(s + n &gt;= sum.size()) break;

        ll d = sum[t] - sum[s];
        int id = lower_bound(sum.begin(), sum.end(), sum[t]  + (sum[t] - sum[s])) - sum.begin();

        if(s + n &gt; id &amp;&amp; d &lt; sum[s+n] - sum[id]) {
            ans = max(ans, d);
            flag = true;
        } else {
            flag = false;
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0599 IOI Manju]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/08/aoj0599-ioi-manju/"/>
    <updated>2016-03-08T15:01:46+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/08/aoj0599-ioi-manju</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0599">IOI Manju | Aizu Online Judge</a></h4><p>ところで，あなたはJust Odd Inventions 社を知っているだろうか？ この会社の業務は「ただ奇妙な発明(just odd inventions)」をすることである．ここでは略してJOI 社と呼ぶ．IOI 社は，饅頭を詰めるための高級な箱をJOI 社に発注することになった．JOI 社の製作する饅頭用の箱は$N$ 種類あり， $j$ 番目$(1 \leq j \leq N)$の箱は最大で$C_j$ 個の饅頭を詰められる大きさであり，販売価格は$E_j$ 円である．これらの$N$ 種類の箱のうちの何種類か(0 種類以上$N$ 種類以下) を1 個ずつ発注し，饅頭をそれらの箱に詰め分けてセットで販売することになった．各饅頭セットの価格は，それに含まれる饅頭の価格の合計である．</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>饅頭<script type="math/tex"> i </script>から饅頭<script type="math/tex"> j </script>まで選んだ時の価格が欲しいので，累積和を取っておく．<br/>
<script type="math/tex; mode=display">
    dp[i][j] := i番目以内の箱を使い，饅頭jまで詰めた時の最大値
</script>
とする．<script type="math/tex"> i </script>番目の箱を</p>

<ul>
<li>使う遷移は，<script type="math/tex"> dp[i][j]+(d[j+c[i]]-d[j])-e[i]</script></li>
<li>使わない遷移は<script type="math/tex"> dp[i][j+c[i]]</script>．</li>
</ul>


<p><img src="/images/AOJ/0599.png"></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

ll dp[505][10005];

int main() {
    int m, n;
    cin &gt;&gt; m &gt;&gt; n;

    vector&lt;int&gt; v(m);
    rep(i, m) cin &gt;&gt; v[i];

    vector&lt;P&gt; p(n);
    rep(i, n) {
        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;
    }

    sort(v.begin(), v.end(), greater&lt;int&gt;());

    int d[10005];
    memset(d, 0, sizeof(d));
    REP(i, 1, m + 1) {
        d[i] += d[i-1] + v[i-1];
    }

    memset(dp, 0, sizeof(dp));
    rep(i, 505) {
        rep(j, 10005) dp[i][j]  = -1;
    }

    dp[0][0] = 0;

    rep(i, n) {
        rep(j, m + 1) {
            dp[i+1][j] = max(dp[i+1][j], dp[i][j]);
        }

        rep(j, m) {
            if(dp[i][j] == -1) continue;

            int id = j + p[i].first;
            id = min(id, m);
            dp[i+1][id] = max(dp[i+1][id], max(dp[i][id], dp[i][j] + (d[id] - d[j]) - p[i].second));
        }
    }


    ll ans = 0;
    rep(i, n + 1) {
        rep(j, m + 1) {
            ans = max(ans, dp[i][j]);
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0598 JOI Emblem]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/07/aoj0598-joi-emblem/"/>
    <updated>2016-03-07T09:47:00+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/07/aoj0598-joi-emblem</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0598">JOI Emblem | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>最初に今の旗に紋章がいくつあるかをみる．次に1文字ずつ変更し，新たに紋章となった所をカウントする．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int h, w;
bool used[1005][1005];
vector&lt;string&gt; s, v(2);


int func(int i, int j) {
    int ret = 0;
    if(i-1 &gt;= 0 &amp;&amp; j-1 &gt;= 0) {
        if(s[i-1][j-1] == v[0][0] &amp;&amp; s[i-1][j] == v[0][1] &amp;&amp; s[i][j-1] == v[1][0] &amp;&amp; s[i][j] == v[1][1]) {
            ret++;
        }
    }

    if(i-1 &gt;= 0 &amp;&amp; j+1 &lt; w) {
        if(s[i-1][j] == v[0][0] &amp;&amp; s[i-1][j+1] == v[0][1] &amp;&amp; s[i][j] == v[1][0] &amp;&amp; s[i][j+1] == v[1][1]) {
            ret++;
        }
    }
    if(i+1 &lt; h &amp;&amp; j-1 &gt;= 0) {
        if(s[i][j-1] == v[0][0] &amp;&amp; s[i][j] == v[0][1] &amp;&amp; s[i+1][j-1] == v[1][0] &amp;&amp; s[i+1][j] == v[1][1]) {
            ret++;
        }
    }

    if(i+1 &lt; h &amp;&amp; j+1 &lt; w) {
        if(s[i][j] == v[0][0] &amp;&amp; s[i][j+1] == v[0][1] &amp;&amp; s[i+1][j] == v[1][0] &amp;&amp; s[i+1][j+1] == v[1][1]) {
            ret++;
        }
    }
    return ret;
}

int main() {
    cin &gt;&gt; h &gt;&gt; w;

    s.resize(h);

    rep(i, h) cin &gt;&gt; s[i];
    rep(i, 2) cin &gt;&gt; v[i];

    int ans = 0;
    memset(used, 0, sizeof(used));

    rep(i, h-1) {
        rep(j, w-1) {
            if(s[i][j] == v[0][0] &amp;&amp; s[i][j+1] == v[0][1] &amp;&amp; s[i+1][j] == v[1][0] &amp;&amp; s[i+1][j+1] == v[1][1]) {
                ans++;
                used[i][j] = true;
                used[i][j+1] = true;
                used[i+1][j] = true;
                used[i+1][j+1] = true;
            }
        }
    }

    int res = 0;
    rep(i, h) {
        rep(j, w) {
            int t = func(i, j), t2 = 0;
            char c = s[i][j];

            s[i][j] = 'J';
            t2 = func(i, j);
            res = max(res, t2 - t);

            s[i][j] = 'O';
            t2 = func(i, j);
            res = max(res, t2 - t);

            s[i][j] = 'I';
            t2 = func(i, j);
            res = max(res, t2 - t);

            s[i][j] = c;
        }
    }

    cout &lt;&lt; ans + res &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0596 Taxis]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/06/aoj0596-taxis/"/>
    <updated>2016-03-06T01:40:26+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/06/aoj0596-taxis</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0596">Taxis | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>タクシーの移動しか使わないのでタクシーの移動の場合のグラフを作り直す．まず連結している町の辺のコストを<script type="math/tex"> 1 </script>にする．<br/>
頂点<script type="math/tex"> i </script>からdijkstraして<script type="math/tex"> d[j] \leq R[i] </script>以下の場合に，<script type="math/tex"> i \to j</script>にコスト<script type="math/tex"> C[i] </script>の辺を張る．<br/>
新しいグラフを構築したらそのグラフでdijkstra．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[5005];
vector&lt;int&gt; g[5005];
int C[5005], R[5005], d[5005];

void dijkstra(int s,int n) {
    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt; &gt; que;
    fill(d,d+n,INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i,G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    memset(C, 0, sizeof(C));
    memset(R, 0, sizeof(R));
    rep(i, n) cin &gt;&gt; C[i] &gt;&gt; R[i];
    rep(i, m) {
        int s, t;
        cin &gt;&gt; s &gt;&gt; t;

        s--;
        t--;

        g[s].push_back(t);
        g[t].push_back(s);
    }

    rep(i, n) {
        fill(d, d + n, INF);

        priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;
        que.push(mp(0, i));

        d[i] = 0;

        while(que.size()) {
            P p = que.top();
            que.pop();

            int v = p.second;

            if(d[v] &lt; p.first) continue;

            rep(i, g[v].size()) {
                if(d[g[v][i]] &gt; d[v] + 1) {
                    d[g[v][i]] = d[v] + 1;
                    que.push(mp(d[v] + 1, g[v][i]));
                }
            }
        }

        rep(j, n) {
            if(i == j) continue;
            if(d[j] &lt;= R[i]) {
                G[i].push_back(edge(j, C[i]));
            }
        }
    }

    dijkstra(0, n);

    cout &lt;&lt; d[n-1] &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
