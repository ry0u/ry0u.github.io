<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aoj | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/aoj/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-04-18T23:46:17+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0616 JOI Park]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0616-joi-park/"/>
    <updated>2016-03-18T16:24:27+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0616-joi-park</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0616">JOI Park | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>まず，<script type="math/tex"> 広場0 </script>からの各広場までの最短経路を求める．次に，コストが小さい順にソートし，その場所への到達コストを仮の<script type="math/tex"> X </script>と置き，整備する場所とする．整備される場所同士は，地下道を通して行き来できるためそのコストを全体から引く．始点を到達コスト<script type="math/tex"> 0 </script>の広場と見れば整備しない場合も考慮される．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;60
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct edge {
    int from,to;
    int cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

vector&lt;edge&gt; G[100005];
ll d[100005];
bool used[100005];

void dijkstra(int s,int n) {
    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt; &gt; que;
    fill(d,d+n,INF);

    d[s] = 0;
    que.push(P(0,s));

    while(que.size()) {
        P p = que.top();
        que.pop();

        int v = p.second;
        if(d[v] &lt; p.first) continue;

        rep(i,G[v].size()) {
            edge e = G[v][i];
            if(d[e.to] &gt; d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to],e.to));
            }
        }
    }
}

int main() {
    int n, m, c;
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; c;

    ll sum = 0;
    rep(i, m) {
        int a, b, d;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;

        a--;
        b--;
        sum += d;

        G[a].push_back(edge(b, d));
        G[b].push_back(edge(a, d));
    }

    dijkstra(0, n);

    vector&lt;pair&lt;ll, int&gt; &gt; v(n);
    rep(i, n) {
        v[i].first = d[i];
        v[i].second = i;
    }

    sort(v.begin(), v.end());
    memset(used, 0, sizeof(used));

    ll ans = INF;
    rep(i, v.size()) {
        int j = v[i].second;
        used[j] = true;

        rep(k, G[j].size()) {
            if(used[G[j][k].to]) {
                sum -= G[j][k].cost;
            }
        }

        ans = min(ans, d[j] * c + sum);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0615 Cake2]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0615-cake2/"/>
    <updated>2016-03-18T16:03:17+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0615-cake2</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0615">Cake 2 | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>左端と右端を持ってdpだろうとずっと考えていたけど全く分からなかった．調べた．</p>

<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://lattemalta.hatenablog.jp/entry/2015/09/07/220749">aoj0615:Cake2 - らての精進日記</a></h4><p>問題文 http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0615</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<p>非常に分かりやすかった．左端と右端を持つ区間DPを初めて書いた（写経）．バームクーヘンとかの時は円環を配列を繋げて表現する時に2つを繋げれば良かったが，とり方によってどっちにずれるかわからないので，真ん中を基準として左に1個，右に1個つなげる．</p>

<ul>
<li>区間の偶奇でどちらの順番かがわかる</li>
<li>左端から一個取る <script type="math/tex"> \to \rm{dfs}(l-1, r) + A[l]</script></li>
<li>右端から一個取る <script type="math/tex"> \to \rm{dfs}(l, r-1) + A[r]</script></li>
<li>memoに代入するのを忘れない</li>
</ul>


<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;ll,ll&gt; P;

int n;
vector&lt;ll&gt; v;
ll memo[4005][6005];

ll dfs(int l, int r) {
    if(memo[l][r] != -1) return memo[l][r];

    int turn = r - l - 1;

    if(turn == n) return memo[l][r] = 0;
    else if(turn % 2 == 1) {
        if(v[l] &lt; v[r]) {
            return memo[l][r] = dfs(l, r+1);
        } else {
            return memo[l][r] = dfs(l-1, r);
        }
    } else {
        return memo[l][r] = max(dfs(l-1, r) + v[l], dfs(l, r+1) + v[r]);
    }
}

int main() {
    cin &gt;&gt; n;

    v.resize(n*3);
    rep(i, n) { 
        cin &gt;&gt; v[i];
        v[i+n] = v[i];
        v[i+n+n] = v[i];
    }

    ll ans = 0;
    memset(memo, -1, sizeof(memo));

    rep(i, n) {
        ans = max(ans, dfs(i-1+n, i+1+n) + v[i]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0614 Railroad Trip]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0614-railroad-trip/"/>
    <updated>2016-03-18T15:49:20+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0614-railroad-trip</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0614">Railroad Trip | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>移動が終わった時に，各鉄道に何回乗ったか知りたい．imosで累積和を求めた後に，各鉄道に対して，切符を買って乗るか，その鉄道のICカードを書いICカードで乗るか，安い方を選んだ．</p>

<ul>
<li>切符で乗る <script type="math/tex"> \to cnt[i] \cdot a[i] </script></li>
<li>ICカードを買う + ICカードで乗る <script type="math/tex"> \to cnt[i] \cdot b[i] + c[i] </script></li>
</ul>


<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

ll cnt[100005];
vector&lt;ll&gt; p, a, b, c;

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    p.resize(m);
    rep(i, m) {
        cin &gt;&gt; p[i];
        p[i]--;
    }

    a.resize(n-1);
    b.resize(n-1);
    c.resize(n-1);

    rep(i, n-1) {
        cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];
    }

    rep(i, m-1) {
        if(p[i] == p[i+1]) continue;

        if(p[i] &lt; p[i+1]) {
            cnt[p[i]]++;
            cnt[p[i+1]]--;
        } else {
            cnt[p[i+1]]++;
            cnt[p[i]]--;
        }
    }

    rep(i, 100005) {
        cnt[i+1] += cnt[i];
    }

    ll ans = 0;
    rep(i, n-1) {
        ans += min(cnt[i] * a[i], cnt[i] * b[i] + c[i]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0612 Sandcastle]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0612-sandcastle/"/>
    <updated>2016-03-18T15:40:40+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0612-sandcastle</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0612">Sandcastle | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>最初に崩壊するマスをqueueに突っ込む．そのマスが崩壊したことによって崩壊するマスは隣接しているマスのみなので，queueから取ってきた時に隣接するマスのカウンタを<script type="math/tex"> +1 </script>して崩壊するならまたqueueに突っ込む．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int h, w;
int dy[8] = { 1, 1, 1, 0, 0,-1,-1,-1};
int dx[8] = { 1, 0,-1, 1,-1, 1, 0,-1};

bool can(int y, int x) {
    if(0 &lt;= y &amp;&amp; y &lt; h &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; w) return true;
    return false;
}


int cnt[1005][1005];
bool inQ[1005][1005], used[1005][1005];

int main() {
    cin &gt;&gt; h &gt;&gt; w;

    vector&lt;string&gt; s(h);
    rep(i, h) cin &gt;&gt; s[i];

    memset(cnt, 0, sizeof(cnt));
    memset(used, 0, sizeof(used));
    memset(inQ, 0, sizeof(inQ));

    queue&lt;P&gt; que;
    rep(i, h) {
        rep(j, w) {
            if(s[i][j] != '.') {
                rep(k, 8) {
                    int y = i + dy[k];
                    int x = j + dx[k];
                    if(can(y, x) &amp;&amp; s[y][x] == '.') {
                        cnt[i][j]++;
                    }
                }
                if(s[i][j] - '0' &lt;= cnt[i][j]) {
                    que.push(mp(i, j));
                    used[i][j] = true;
                }
            }
        }
    }


    int ans = 0;
    while(que.size()) {
        queue&lt;P&gt; tmp;
        while(que.size()) {
            P p = que.front();
            que.pop();

            rep(k, 8) {
                int y = p.first + dy[k];
                int x = p.second + dx[k];

                if(can(y, x)) {
                    cnt[y][x]++;
                    if(s[y][x] != '.' &amp;&amp; (s[y][x] - '0') &lt;= cnt[y][x] &amp;&amp; !used[y][x]) {
                        used[y][x] = true;
                        tmp.push(mp(y, x));
                    }
                }
            }
        }

        while(tmp.size()) {
            P p = tmp.front();
            tmp.pop();
            que.push(p);
        }

        ans++;
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0611 Silk Road]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0611-silk-road/"/>
    <updated>2016-03-18T01:27:54+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0611-silk-road</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0611">Silk Road | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p><script type="math/tex; mode=display">
    dp[i][j] := 都市iにj日目に到達した時に疲労度の最小値
</script></p>

<p>とする．<script type="math/tex"> 都市i-1 </script>に<script type="math/tex"> j日未満に </script>到達している時の最小値から移動するのが，都市<script type="math/tex"> i </script>に <script type="math/tex"> j </script>日目に到達する時の最小となる．これを繰り返す．<script type="math/tex"> O(nm log m) </script>．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct RMQ {
    int n;
    vector&lt;ll&gt; dat;

    RMQ(int n_) {
        n = 1;
        while(n &lt; n_) n *= 2;

        dat.resize(n*4);
        rep(i,n*4) dat[i] = INF;
    }

    void update(int k,ll a) {
        int i = k+n-1;
        dat[i] = a;

        while(i &gt; 0) {
            i = (i-1) / 2;
            dat[i] = min(dat[i*2+1],dat[i*2+2]);
        }
    }

    //[a,b)
    //query(a,b,0,0,n)
    ll _query(int a,int b,int k,int l,int r) {
        if(r &lt;= a || b &lt;= l) return INF;

        if(a &lt;= l &amp;&amp; r &lt;= b) return dat[k];
        else { 
            ll vl = _query(a,b,k*2+1,l,(l+r)/2);
            ll vr = _query(a,b,k*2+2,(l+r)/2,r);
            return min(vl,vr);
        }
    }

    //[a,b)
    ll query(int a,int b) {
        return _query(a,b,0,0,n);
    }
};

ll dp[1005][1005], d[1005][1005];

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;ll&gt; D(n), C(m);
    rep(i, n) cin &gt;&gt; D[i];
    rep(i, m) cin &gt;&gt; C[i];

    rep(i, n) {
        rep(j, m) dp[i][j] = INF;
    }

    rep(i, n) {
        rep(j, m) d[i][j] = D[i] * C[j];
    }

    rep(j, m) dp[0][j] = D[0] * C[j];

    REP(i, 1, n) {
        RMQ rmq(m);
        rep(j, m) rmq.update(j, dp[i-1][j]);

        rep(j, m) {
            dp[i][j] = rmq.query(0, j) + d[i][j];
        }
    }

    ll ans = INF;
    rep(j, m) {
        ans = min(ans, dp[n-1][j]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
