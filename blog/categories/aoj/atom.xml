<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aoj | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/aoj/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2017-02-10T01:42:35+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1077 The Great Summer Contest]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/16/aoj1077-the-great-summer-contest/"/>
    <updated>2016-05-16T08:29:30+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/16/aoj1077-the-great-summer-contest</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1077">The Great Summer Contest | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

それぞれの分野の問題が与えられるので，最大何回コンテストを開けるかを答える．  
最初は合わせて {% m %} 3 {% em %}問，ということでどちらかは必ず無いとダメと勘違いしていた．そうではないのでMathとDP，GreedyとGraph，GeometryとOtherの区別が入らない．バランスの良いコンテストを {% m %} 3 {% em %}回行うのと，それぞれのコンテストを {% m %} 3 {% em %}回やるのは同じであるが， バランスの良いコンテストを行えるだけ行う場合では，それぞれの分野のコンテストを行ったほうが良い場合がある．  例えば {% m %} (1, 3, 3) {% em %}では，バランスの良いコンテストは {% m %} 1 {% em %}回行えるがそれぞれの分野のコンテストは {% m %} 2 {% em %}回行える．なので {% m %} Max( {% em %}バランスの良いコンテスト行えるだけ行ったもの, それから {% m %} 1 or 2 {% em %}段階戻して，それぞれの分野のコンテストを行ったもの {% m %} ) {% em %}を取った．


# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	ll a, b, c, d, e, f;
	while(cin >> a >> c >> e >> b >> d >> f) {
		if(a == 0 && b == 0 && c == 0 && d == 0 && e == 0 && f == 0) break;

		ll ans = 0, A = 0, B = 0, C = 0;
		ll res = min(a + b, min(c + d, e + f));

		A = (a + b) - res;
		B = (c + d) - res;
		C = (e + f) - res;
		ans = res + (A / 3) + (B / 3) + (C / 3);

		if(res >= 1) {
			A++; B++; C++;
			res--;
		}
		else if(res >= 2) {
			A += 2; B += 2; C += 2;
			res -= 2;
		}

		cout << max(ans, res + (A / 3) + (B / 3) + (C / 3)) << endl;
	}
	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1076 Time Manipulation]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/16/aoj1076-time-manipulation/"/>
    <updated>2016-05-16T08:03:29+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/16/aoj1076-time-manipulation</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1076">Time Manipulation | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

　{% m %}1〜n{% em %}の中で {% m %} p\_i {% em %}の倍数で無い数の {% m %} \frac{和}{個数} {% em %}を求める．包除原理を用いて， {% m %} p\_i {% em %}の倍数である数の個数，和をそれぞれ求めて引いて計算するようにした．  
包除原理は，まずbitで状態を全列挙し，立っているbitの個数が偶数の時に減算，奇数の時に加算する．和は等比数列の和の公式を用いた．(初項{% m %} p\_i {% em %}，公差 {% m %} p\_i {% em %}，項数 {% m %} \frac{n}{p\_i} {% em %}の等差数列の和)．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <bitset>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

ll n, m;
ll c;

ll lcm(ll m, ll n) {
	if(m == 0 || n == 0) return 0;
	return ((m / __gcd(m,n)) * n);
}

ll f(vector<ll> v) {
	int k = v.size();
	c = 0;
	ll ret = 0;
	rep(i, 1<<k) {
		ll x = 1;
		int cnt = 0;
		bool ch = false;
		rep(j, k) {
			if(i & (1<<j)) {
				x = lcm(x, v[j]);
				cnt++;
			}

			if(x > n) {
				ch = true;
				break;
			}
		}

		if(x == 1LL) continue;
		if(ch) continue;

		ll o = n / x, s;

		if(o % 2 == 0) {
			s = (o / 2) * (2 * x + (o - 1) * x);
		} else {
			s = o * (x + (o - 1) * x / 2);
		}

		if(cnt % 2 == 0) {
			ret -= s;
			c -= o;
		} else {
			ret += s;
			c += o;
		}
	}

	return ret;
}

int main() {
	while(cin >> n >> m) {
		if(n == 0 && m == 0) break;

		bool flag = false;
		vector<ll> v(m);
		rep(i, m) {
			cin >> v[i];
			if(v[i] == 1) {
				flag = true;
			}
		}

		if(flag) {
			cout << fixed;
			cout.precision(20);
			cout << 0.0 << endl;
			continue;
		}

		ll sum = n * (n + 1) / 2;
		ll ret = f(v);
		ll res = sum - ret;
		double cnt = n - c;

		cout << fixed;
		cout.precision(20);
		cout << res / cnt << endl;
	}

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1074 Poplularity Estimation]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/aoj1074-poplularity-estimation/"/>
    <updated>2016-05-12T01:15:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/aoj1074-poplularity-estimation</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1074">Popularity Estimation | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

最初は各時間に名前を突っ込んで，時間で見て各キャラクターにポイントを配る方式にしてWAを量産した．間違っている所を発見することができず(諦めの気持ちで)，{% m %} cnt[i] (時間i {% em %}にいた人数)として，各キャラクターで見ていった結果普通にACが取れた．ポイントについては3行で場合分けが書いてあるけど，1行で{% m %} p[s[i]] += n - cnt[d[i][j]] + 1 {% em %}とかけた．  

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	int n;
	while(cin >> n && n) {
		map<string, int> p;
		int cnt[35];
		memset(cnt, 0, sizeof(cnt));

		string s[50];
		int m[50], d[50][50];
		rep(i, n) {
			cin >> s[i] >> m[i];

			rep(j, m[i]) {
				cin >> d[i][j];
				cnt[d[i][j]]++;
			}
		}

		rep(i, n) {
			rep(j, m[i]) {
				p[s[i]] += n - cnt[d[i][j]] + 1;
			}
		}

		int ans = INF;
		string res = "";
		rep(i, n) {
			if(ans > p[s[i]]) {
				ans = p[s[i]];
				res = s[i];
			} else if(ans == p[s[i]] && res > s[i]) {
				ans = p[s[i]];
				res = s[i];
			}
		}

		cout << ans << " " << res << endl;
	}

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1086 Live Schedule]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/aoj1086-live-schedule/"/>
    <updated>2016-05-12T00:53:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/aoj1086-live-schedule</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1086">Live Schedule | Aizu Online Judge</a></h4><p>YOKARI TAMURAは全国的に有名なアーティストである。今月YOKARIは D 日間にわたってライブツアーを行う。ツアーのスケジュールの決定においてこの国を C 種類の地域でわける。YOKARIがある地域でライブを行うことにより利益を得られ、これは正の整数で表される。YOKARIは原則として 1 日に最大 1 つまでライブを行う。ただし、ある地域でライブを行った後、隣接する地域でライブを行える場合はその地域で同じ日に再びライブを行うことができる。この条件を満たす限り、地域を移動しながら何度もライブを行うことができる。また、同じ日に同じ地域でライブを 2 度以上行うことはできない。さらに、同じ日に 2 回以上のライブを行う日の数はツアー期間中合計 X 以下でなければならない。</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

{% math %}
	dp[i][j][k] := i日目に疲労度jで2回以上ライブを行った回数がkの時の売上の最大値
{% endmath %}

として，動的計画法．ライブをし終わった地域から，次の日は開始かと思っていて状態に"町{% m %} i {% em %}"にいる時，というのを追加していたがいらなかった．ライブを始める町と終わる町はどこでも良いので {% m %} C ^2 {% em %}で区間を全探索し， その区間の疲労度を足した次の日に遷移可能とした．{% m %} 2 {% em %}回以上続けてライブを続けない場合は制限がないので，別に分けた．  
WAが取れなかった原因は，ライブを行わない，というのを追加していないことだった．区間は同じだが後々にライブをした方が利益が高い場合があるので，この行動を追加しなければおかしかった．  
また {% m %} E_{i, j} = 0 {% em %}の時にはライブを行うことが出来ない，という条件に気が付かず時間を溶かした．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <iomanip>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

// i日目に疲労度jで2回以上のライブ回数kの時の売上の最大値
ll dp[35][55][10];
ll E[20][35], F[20][35];

int main() {
	ll c, d, w, x;
	while(cin >> c >> d >> w >> x) {
		if(c == 0 && d == 0 && w == 0 && x == 0) break;

		memset(E, 0, sizeof(E));
		rep(i, c) {
			rep(j, d) cin >> E[i][j];
		}

		memset(F, 0, sizeof(F));
		rep(i, c) {
			rep(j, d) cin >> F[i][j];
		}

		// rep(i, c) {
		// 	rep(j, d) {
		// 		cout << "(" << E[i][j] << ", " << F[i][j] << ") ";
		// 	}
		// 	cout << endl;
		// }

		memset(dp, 0, sizeof(dp));

		rep(i, d) {
			rep(j, w + 1) {
				rep(k, x + 1) {
					dp[i+1][j][k] = max(dp[i+1][j][k], dp[i][j][k]);

					rep(s, c) {
						if(E[s][i] == 0) continue;

						ll sum = E[s][i];
						ll res = F[s][i];

						if(j + res <= w) {
							dp[i+1][j+res][k] = max(dp[i+1][j+res][k], dp[i][j][k] + sum);
						}

						REP(t, s + 1, c) {
							if(E[t][i] == 0) break;

							sum += E[t][i];
							res += F[t][i];

							if(j + res <= w && k + 1 <= x) {
								dp[i+1][j+res][k+1] = max(dp[i+1][j+res][k+1], dp[i][j][k] + sum);
							}
						}
					}
				}
			}
		}

		// rep(i, d + 1) {
		// 	cout << " ----- day : " << i << endl;
		// 	rep(j, w + 1) {
		// 		rep(k, x + 1) {
		// 			cout << setw(3) << dp[i][j][k] << " ";
		// 		}
		// 		cout << endl;
		// 	}
		// }
		
		ll ans = 0;
		// rep(i, d + 1) {
			rep(j, w + 1) {
				rep(k, x + 1) {
					ans = max(ans, dp[d][j][k]);
				}
			}
		// }

		cout << ans << endl;
	}

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1517 Challenge from Grandfather]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/11/aoj1517-challenge-from-grandfather/"/>
    <updated>2016-05-11T11:35:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/11/aoj1517-challenge-from-grandfather</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1517">Challenge from Grandfather | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

部分行列の回転，反転，左シフト，右シフト，島反転を実装する．  
回転は90度回転を{% m %} \frac{angle}{90} {% em %}回行う．  
反転，左シフト，右シフトはその通りにあって，島反転は幅優先で島を発見し反転していった．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int n, m;
int t[15][15];
vector<int> v[15];

void vrotate(int r, int c, int size, int angle) {
	if(angle == 0 || angle == 360) return;

	memset(t, 0, sizeof(t));

	rep(i, angle/90) {
		int col = c;
		for(int i = r + size - 1; i >= r; i--, col++) {
			REP(j, c, c + size) {
				t[r+j-c][col] = v[i][j];
			}
		}

		REP(i, r, r + size) {
			REP(j, c, c + size) {
				v[i][j] = t[i][j];
			}
		}
	}
}

void reversal(int r, int c, int size) {
	REP(i, r, min(n, r + size)) {
		REP(j, c, min(n, c + size)) {
			v[i][j] = !v[i][j];
		}
	}
}

void leftshift(int r) {
	int t = v[r][0];
	rep(i, n) {
		v[r][i] = v[r][i+1];
	}
	v[r][n-1] = t;
}

void rightshift(int r) {
	int t = v[r][n-1];
	for(int i = n-1; i >= 1; i--) {
		v[r][i] = v[r][i-1];
	}
	v[r][0] = t;
}

int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
bool used[15][15];

bool can(int y, int x) {
	if(0 <= y && y < n && 0 <= x && x < n) return true;
	return false;
}

void islandreversal(int r, int c) {
	queue<P> que;
	que.push(mp(r, c));

	memset(used, 0, sizeof(used));
	used[r][c] = true;
	int t = v[r][c];
	while(que.size()) {
		P p = que.front(); que.pop();
		int y = p.first;
		int x = p.second;

		if(v[y][x] == t) {
			v[y][x] = !v[y][x];
		}

		rep(i, 4) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if(can(ny, nx) && !used[ny][nx] && v[ny][nx] == t) {
				que.push(mp(ny, nx));
				used[ny][nx] = true;
			}
		}
	}
}

int main() {
	cin >> n >> m;

	memset(v, 0, sizeof(v));
	rep(i, n) {
		v[i].resize(n);
		rep(j, n) cin >> v[i][j];
	}

	rep(i, m) {
		int o;
		cin >> o;

		int r, c, size, angle;

		if(o == 0) { // rotate
			cin >> r >> c >> size >> angle;
			r--; c--;

			vrotate(r, c, size, angle);
		} else if(o == 1) { // reversal
			cin >> r >> c >> size;
			r--; c--;

			reversal(r, c, size);
		} else if(o == 2) { // left shift
			cin >> r;
			r--;

			leftshift(r);
		} else if(o == 3) { // right shift
			cin >> r;
			r--;
			rightshift(r);
		} else if(o == 4) { // Island reversal
			cin >> r >> c;
			r--; c--;
			islandreversal(r, c);
		}
	}

	rep(i, n) {
		rep(j, n) {
			cout << v[i][j];

			if(j == n-1) cout << endl;
			else cout << " ";
		}
	}

	return 0;
}
```

]]></content>
  </entry>
  
</feed>
