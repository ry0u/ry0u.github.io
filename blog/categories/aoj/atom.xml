<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aoj | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/aoj/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-14T23:52:35+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1074 Poplularity Estimation]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/aoj1074-poplularity-estimation/"/>
    <updated>2016-05-12T01:15:13+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/aoj1074-poplularity-estimation</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1074">Popularity Estimation | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>最初は各時間に名前を突っ込んで，時間で見て各キャラクターにポイントを配る方式にしてWAを量産した．間違っている所を発見することができず(諦めの気持ちで)，<script type="math/tex"> cnt[i] (時間i </script>にいた人数)として，各キャラクターで見ていった結果普通にACが取れた．ポイントについては3行で場合分けが書いてあるけど，1行で<script type="math/tex"> p[s[i]] += n - cnt[d[i][j]] + 1 </script>とかけた．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    while(cin &gt;&gt; n &amp;&amp; n) {
        map&lt;string, int&gt; p;
        int cnt[35];
        memset(cnt, 0, sizeof(cnt));

        string s[50];
        int m[50], d[50][50];
        rep(i, n) {
            cin &gt;&gt; s[i] &gt;&gt; m[i];

            rep(j, m[i]) {
                cin &gt;&gt; d[i][j];
                cnt[d[i][j]]++;
            }
        }

        rep(i, n) {
            rep(j, m[i]) {
                p[s[i]] += n - cnt[d[i][j]] + 1;
            }
        }

        int ans = INF;
        string res = "";
        rep(i, n) {
            if(ans &gt; p[s[i]]) {
                ans = p[s[i]];
                res = s[i];
            } else if(ans == p[s[i]] &amp;&amp; res &gt; s[i]) {
                ans = p[s[i]];
                res = s[i];
            }
        }

        cout &lt;&lt; ans &lt;&lt; " " &lt;&lt; res &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1086 Live Schedule]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/aoj1086-live-schedule/"/>
    <updated>2016-05-12T00:53:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/aoj1086-live-schedule</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1086">Live Schedule | Aizu Online Judge</a></h4><p>YOKARI TAMURAは全国的に有名なアーティストである。今月YOKARIは D 日間にわたってライブツアーを行う。ツアーのスケジュールの決定においてこの国を C 種類の地域でわける。YOKARIがある地域でライブを行うことにより利益を得られ、これは正の整数で表される。YOKARIは原則として 1 日に最大 1 つまでライブを行う。ただし、ある地域でライブを行った後、隣接する地域でライブを行える場合はその地域で同じ日に再びライブを行うことができる。この条件を満たす限り、地域を移動しながら何度もライブを行うことができる。また、同じ日に同じ地域でライブを 2 度以上行うことはできない。さらに、同じ日に 2 回以上のライブを行う日の数はツアー期間中合計 X 以下でなければならない。</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p><script type="math/tex; mode=display">
    dp[i][j][k] := i日目に疲労度jで2回以上ライブを行った回数がkの時の売上の最大値
</script></p>

<p>として，動的計画法．ライブをし終わった地域から，次の日は開始かと思っていて状態に"町<script type="math/tex"> i </script>&ldquo;にいる時，というのを追加していたがいらなかった．ライブを始める町と終わる町はどこでも良いので <script type="math/tex"> C ^2 </script>で区間を全探索し， その区間の疲労度を足した次の日に遷移可能とした．<script type="math/tex"> 2 </script>回以上続けてライブを続けない場合は制限がないので，別に分けた．<br/>
WAが取れなかった原因は，ライブを行わない，というのを追加していないことだった．区間は同じだが後々にライブをした方が利益が高い場合があるので，この行動を追加しなければおかしかった．<br/>
また <script type="math/tex"> E_{i, j} = 0 </script>の時にはライブを行うことが出来ない，という条件に気が付かず時間を溶かした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;iomanip&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

// i日目に疲労度jで2回以上のライブ回数kの時の売上の最大値
ll dp[35][55][10];
ll E[20][35], F[20][35];

int main() {
    ll c, d, w, x;
    while(cin &gt;&gt; c &gt;&gt; d &gt;&gt; w &gt;&gt; x) {
        if(c == 0 &amp;&amp; d == 0 &amp;&amp; w == 0 &amp;&amp; x == 0) break;

        memset(E, 0, sizeof(E));
        rep(i, c) {
            rep(j, d) cin &gt;&gt; E[i][j];
        }

        memset(F, 0, sizeof(F));
        rep(i, c) {
            rep(j, d) cin &gt;&gt; F[i][j];
        }

        // rep(i, c) {
        //  rep(j, d) {
        //      cout &lt;&lt; "(" &lt;&lt; E[i][j] &lt;&lt; ", " &lt;&lt; F[i][j] &lt;&lt; ") ";
        //  }
        //  cout &lt;&lt; endl;
        // }

        memset(dp, 0, sizeof(dp));

        rep(i, d) {
            rep(j, w + 1) {
                rep(k, x + 1) {
                    dp[i+1][j][k] = max(dp[i+1][j][k], dp[i][j][k]);

                    rep(s, c) {
                        if(E[s][i] == 0) continue;

                        ll sum = E[s][i];
                        ll res = F[s][i];

                        if(j + res &lt;= w) {
                            dp[i+1][j+res][k] = max(dp[i+1][j+res][k], dp[i][j][k] + sum);
                        }

                        REP(t, s + 1, c) {
                            if(E[t][i] == 0) break;

                            sum += E[t][i];
                            res += F[t][i];

                            if(j + res &lt;= w &amp;&amp; k + 1 &lt;= x) {
                                dp[i+1][j+res][k+1] = max(dp[i+1][j+res][k+1], dp[i][j][k] + sum);
                            }
                        }
                    }
                }
            }
        }

        // rep(i, d + 1) {
        //  cout &lt;&lt; " ----- day : " &lt;&lt; i &lt;&lt; endl;
        //  rep(j, w + 1) {
        //      rep(k, x + 1) {
        //          cout &lt;&lt; setw(3) &lt;&lt; dp[i][j][k] &lt;&lt; " ";
        //      }
        //      cout &lt;&lt; endl;
        //  }
        // }

        ll ans = 0;
        // rep(i, d + 1) {
            rep(j, w + 1) {
                rep(k, x + 1) {
                    ans = max(ans, dp[d][j][k]);
                }
            }
        // }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1517 Challenge from Grandfather]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/11/aoj1517-challenge-from-grandfather/"/>
    <updated>2016-05-11T11:35:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/11/aoj1517-challenge-from-grandfather</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1517">Challenge from Grandfather | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>部分行列の回転，反転，左シフト，右シフト，島反転を実装する．<br/>
回転は90度回転を<script type="math/tex"> \frac{angle}{90} </script>回行う．<br/>
反転，左シフト，右シフトはその通りにあって，島反転は幅優先で島を発見し反転していった．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int n, m;
int t[15][15];
vector&lt;int&gt; v[15];

void vrotate(int r, int c, int size, int angle) {
    if(angle == 0 || angle == 360) return;

    memset(t, 0, sizeof(t));

    rep(i, angle/90) {
        int col = c;
        for(int i = r + size - 1; i &gt;= r; i--, col++) {
            REP(j, c, c + size) {
                t[r+j-c][col] = v[i][j];
            }
        }

        REP(i, r, r + size) {
            REP(j, c, c + size) {
                v[i][j] = t[i][j];
            }
        }
    }
}

void reversal(int r, int c, int size) {
    REP(i, r, min(n, r + size)) {
        REP(j, c, min(n, c + size)) {
            v[i][j] = !v[i][j];
        }
    }
}

void leftshift(int r) {
    int t = v[r][0];
    rep(i, n) {
        v[r][i] = v[r][i+1];
    }
    v[r][n-1] = t;
}

void rightshift(int r) {
    int t = v[r][n-1];
    for(int i = n-1; i &gt;= 1; i--) {
        v[r][i] = v[r][i-1];
    }
    v[r][0] = t;
}

int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
bool used[15][15];

bool can(int y, int x) {
    if(0 &lt;= y &amp;&amp; y &lt; n &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; n) return true;
    return false;
}

void islandreversal(int r, int c) {
    queue&lt;P&gt; que;
    que.push(mp(r, c));

    memset(used, 0, sizeof(used));
    used[r][c] = true;
    int t = v[r][c];
    while(que.size()) {
        P p = que.front(); que.pop();
        int y = p.first;
        int x = p.second;

        if(v[y][x] == t) {
            v[y][x] = !v[y][x];
        }

        rep(i, 4) {
            int ny = y + dy[i];
            int nx = x + dx[i];

            if(can(ny, nx) &amp;&amp; !used[ny][nx] &amp;&amp; v[ny][nx] == t) {
                que.push(mp(ny, nx));
                used[ny][nx] = true;
            }
        }
    }
}

int main() {
    cin &gt;&gt; n &gt;&gt; m;

    memset(v, 0, sizeof(v));
    rep(i, n) {
        v[i].resize(n);
        rep(j, n) cin &gt;&gt; v[i][j];
    }

    rep(i, m) {
        int o;
        cin &gt;&gt; o;

        int r, c, size, angle;

        if(o == 0) { // rotate
            cin &gt;&gt; r &gt;&gt; c &gt;&gt; size &gt;&gt; angle;
            r--; c--;

            vrotate(r, c, size, angle);
        } else if(o == 1) { // reversal
            cin &gt;&gt; r &gt;&gt; c &gt;&gt; size;
            r--; c--;

            reversal(r, c, size);
        } else if(o == 2) { // left shift
            cin &gt;&gt; r;
            r--;

            leftshift(r);
        } else if(o == 3) { // right shift
            cin &gt;&gt; r;
            r--;
            rightshift(r);
        } else if(o == 4) { // Island reversal
            cin &gt;&gt; r &gt;&gt; c;
            r--; c--;
            islandreversal(r, c);
        }
    }

    rep(i, n) {
        rep(j, n) {
            cout &lt;&lt; v[i][j];

            if(j == n-1) cout &lt;&lt; endl;
            else cout &lt;&lt; " ";
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1516 Nasty Boys]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/11/aoj1516-nasty-boys/"/>
    <updated>2016-05-11T11:13:41+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/11/aoj1516-nasty-boys</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1516">Nasty Boys | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>一筆書き出来るか，ということでグラフ作って奇数点の頂点を数えようかと思ったけど，グラフを作るなら，mapに突っ込んで <script type="math/tex"> 1 </script>文字ずつ隣接しているか見たほうが早いと思い，そっちにした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

map&lt;char, set&lt;char&gt; &gt; m;

int main() {

    m['A'].insert('B');
    m['A'].insert('D');

    m['B'].insert('A');
    m['B'].insert('C');
    m['B'].insert('E');

    m['C'].insert('B');
    m['C'].insert('F');

    m['D'].insert('A');
    m['D'].insert('E');
    m['D'].insert('G');

    m['E'].insert('B');
    m['E'].insert('D');
    m['E'].insert('F');
    m['E'].insert('H');

    m['F'].insert('C');
    m['F'].insert('E');
    m['F'].insert('I');

    m['G'].insert('D');
    m['G'].insert('H');

    m['H'].insert('E');
    m['H'].insert('G');
    m['H'].insert('I');

    m['I'].insert('F');
    m['I'].insert('H');

    rep(i, 1000) {
        string s;
        cin &gt;&gt; s;

        bool flag = true;
        rep(j, s.size()-1) {
            if(m[s[j]].find(s[j+1]) == m[s[j]].end()) {
                flag = false;
                break;
            }
        }

        if(flag) cout &lt;&lt; s &lt;&lt; endl;
    }


    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1512 Smartphone Game]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/10/aoj1512-smartphone-game/"/>
    <updated>2016-05-10T00:50:38+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/10/aoj1512-smartphone-game</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1512">Smartphone Game | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<blockquote><p>ブロックを任意に1つだけ決めて、最大でn回まで上下左右に移動できる。移動先のブロックは移動元のブロックのあった場所に移動する。つまり、隣接したブロックを交換する事になる。</p></blockquote>

<p>この部分が理解出来ていなかった．普通に <script type="math/tex"> n </script>回まで，隣接しているブロック同士をswapしていて <script type="math/tex"> 1 </script>つのブロックだけをswapしていくことが出来ていなかった．<br/>
求めるのは<script type="math/tex"> 1 </script>回のプレイで得られる最大の点数なので，まずは <script type="math/tex"> n </script>回までswapしたブロックの状態をsetに突っ込む．その後，削除，移動で変化が無くなるまで続ける．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int cost[6];
bool used[5][5], flag;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; 5 &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; 5) return true;
    return false;
}

ll del(vector&lt;vector&lt;int&gt; &gt; &amp;v, ll bonus) {
    memset(used, 0, sizeof(used));
    rep(i, 5) {
        rep(j, 5) {
            if(v[i][j] == 0) continue;

            int a = i;
            while(a + 1 &lt;= 4 &amp;&amp; v[a+1][j] == v[i][j]) {
                a++;
            }

            int b = i;
            while(b - 1 &gt;= 0 &amp;&amp; v[b-1][j] == v[i][j]) {
                b--;
            }

            int c = j;
            while(c + 1 &lt;= 4 &amp;&amp; v[i][c+1] == v[i][j]) {
                c++;
            }

            int d = j;
            while(d - 1 &gt;= 0 &amp;&amp; v[i][d-1] == v[i][j]) {
                d--;
            }

            if(a - b + 1 &gt;= 3 || c - d + 1 &gt;= 3) used[i][j] = true;
        }
    }

    ll ret = 0;
    rep(i, 5) {
        rep(j, 5) {
            if(used[i][j]) {
                ret += bonus * cost[v[i][j]];
                flag = true;
                v[i][j] = 0;
            }
        }
    }

    return ret;
}

void mov(vector&lt;vector&lt;int&gt; &gt; &amp;v) {
    for(int i = 4; i &gt;= 0; i--) {
        rep(j, 5) {
            int y = i;
            while(y + 1 &lt;= 4 &amp;&amp; v[y + 1][j] == 0) {
                swap(v[y][j], v[y+1][j]);
                y++;
            }
        }
    }
}

int n;
ll ans = 0;

set&lt;vector&lt;vector&lt;int&gt; &gt; &gt; res;

void dfs(int cnt, int y, int x, vector&lt;vector&lt;int&gt; &gt; v) {
    res.insert(v);

    if(cnt == n) {
        return;
    }

    rep(i, 4) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if(can(ny, nx)) {
            swap(v[y][x], v[ny][nx]);
            dfs(cnt + 1, ny, nx, v);
            swap(v[y][x], v[ny][nx]);
        }
    }
}

int main() {
    while(cin &gt;&gt; n &amp;&amp; n != -1) {
        ans = 0;
        res.clear();

        vector&lt;vector&lt;int&gt; &gt; v(5, vector&lt;int&gt;(5));
        rep(i, 5) rep(j, 5) cin &gt;&gt; v[i][j];
        rep(i, 5) cin &gt;&gt; cost[i+1];

        rep(i, 5) {
            rep(j, 5) {
                dfs(0, i, j, v);
            }
        }

        set&lt;vector&lt;vector&lt;int&gt; &gt; &gt;::iterator ite;
        for(ite = res.begin(); ite != res.end(); ite++) {

            ll bonus = 1, sum = 0;
            vector&lt;vector&lt;int&gt; &gt; t = *ite;

            while(true) {
                flag = false;
                sum += del(t, bonus);

                if(flag) {
                    mov(t);
                    bonus++;

                } else break;
            }

            // cout &lt;&lt; "----- : " &lt;&lt; sum &lt;&lt; endl;
            // rep(i, 5) {
            //  rep(j, 5) {
            //      cout &lt;&lt; t[i][j] &lt;&lt; " ";
            //  }
            //  cout &lt;&lt; endl;
            // }
            ans = max(ans, sum);
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
