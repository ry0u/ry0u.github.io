<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aoj | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/aoj/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-03-18T09:31:45+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0611 Silk Road]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/18/aoj0611-silk-road/"/>
    <updated>2016-03-18T01:27:54+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/18/aoj0611-silk-road</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0611">Silk Road | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>{% math %}
    dp[i][j] := 都市iにj日目に到達した時に疲労度の最小値
{% endmath %}</p>

<p>とする．{% m %} 都市i-1 {% em %}に{% m %} j日未満に {% em %}到達している時の最小値から移動するのが，都市{% m %} i {% em %}に {% m %} j {% em %}日目に到達する時の最小となる．これを繰り返す．{% m %} O(nm log m) {% em %}．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

struct RMQ {
    int n;
    vector&lt;ll&gt; dat;

    RMQ(int n_) {
        n = 1;
        while(n &lt; n_) n *= 2;

        dat.resize(n*4);
        rep(i,n*4) dat[i] = INF;
    }

    void update(int k,ll a) {
        int i = k+n-1;
        dat[i] = a;

        while(i &gt; 0) {
            i = (i-1) / 2;
            dat[i] = min(dat[i*2+1],dat[i*2+2]);
        }
    }

    //[a,b)
    //query(a,b,0,0,n)
    ll _query(int a,int b,int k,int l,int r) {
        if(r &lt;= a || b &lt;= l) return INF;

        if(a &lt;= l &amp;&amp; r &lt;= b) return dat[k];
        else { 
            ll vl = _query(a,b,k*2+1,l,(l+r)/2);
            ll vr = _query(a,b,k*2+2,(l+r)/2,r);
            return min(vl,vr);
        }
    }

    //[a,b)
    ll query(int a,int b) {
        return _query(a,b,0,0,n);
    }
};

ll dp[1005][1005], d[1005][1005];

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    vector&lt;ll&gt; D(n), C(m);
    rep(i, n) cin &gt;&gt; D[i];
    rep(i, m) cin &gt;&gt; C[i];

    rep(i, n) {
        rep(j, m) dp[i][j] = INF;
    }

    rep(i, n) {
        rep(j, m) d[i][j] = D[i] * C[j];
    }

    rep(j, m) dp[0][j] = D[0] * C[j];

    REP(i, 1, n) {
        RMQ rmq(m);
        rep(j, m) rmq.update(j, dp[i-1][j]);

        rep(j, m) {
            dp[i][j] = rmq.query(0, j) + d[i][j];
        }
    }

    ll ans = INF;
    rep(j, m) {
        ans = min(ans, dp[n-1][j]);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0605 Modern Mansion]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/16/aoj0605-modern-mansion/"/>
    <updated>2016-03-16T01:28:12+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/16/aoj0605-modern-mansion</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0605">Modern Mansion | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>状態を {% m %} (cost, id, state) {% em %}として，現在どちら方向の扉が空いているかを持ってdijkstra．扉が空いている方向で最小値を更新出来る場所に行く．TLEを連発した．時間制限が1secで0.94secでギリギリ通した．変にlogをつけて死んでいた．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;60
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;
typedef pair&lt;P, bool&gt; PI;

int w, h, k;
vector&lt;P&gt; X[200005], Y[200005];
vector&lt;P&gt; xy;
ll d[200005][2];

// PI f(int a, int b, int c) {
//  return mp(mp(a, b), c);
// }

void dijkstra() {
    rep(i, 200005) {
        d[i][0] = INF;
        d[i][1] = INF;
    }

    // cost id (0 or 1)
    priority_queue&lt;PI, vector&lt;PI&gt;, greater&lt;PI&gt; &gt; que;

    rep(i, X[1].size()) {
        int y = X[1][i].first;
        int to = X[1][i].second;

        d[to][1] = y;
        // que.push(f(y, to, 1));
        que.push(mp(mp(y, to), 1));
    }

    while(que.size()) {
        PI p = que.top(); 
        que.pop();

        int c = p.first.first;
        int v = p.first.second;
        int state = p.second;

        if(d[v][state] &lt; c) continue;

        int y = xy[v].first;
        int x = xy[v].second;

        if(state == 0) {
            rep(i, X[x].size()) {
                int ny = X[x][i].first;
                int to = X[x][i].second;

                if(ny == y) continue;

                if(d[to][1] &gt; d[v][state] + abs(ny - y) + 1) {
                    d[to][1] = d[v][state] + abs(ny- y) + 1;
                    // que.push(f(d[to][1], to, 1));
                    que.push(mp(mp(d[to][1], to), 1));
                }
            }
        } else {
            rep(i, Y[y].size()) {
                int nx = Y[y][i].first;
                int to = Y[y][i].second;

                if(nx == x) continue;

                if(d[to][0] &gt; d[v][state] + abs(nx - x) + 1) {
                    d[to][0] = d[v][state] + abs(nx - x) + 1;
                    // que.push(f(d[to][0], to, 0));
                    que.push(mp(mp(d[to][0], to), 0));
                }
            }
        }
    }
}

int main() {
    cin &gt;&gt; w &gt;&gt; h &gt;&gt; k;

    xy.resize(k);
    rep(i, k) {
        int x, y;
        cin &gt;&gt; x &gt;&gt; y;

        xy[i] = mp(y, x);
        X[x].push_back(mp(y, i));
        Y[y].push_back(mp(x, i));
    }

    dijkstra();

    ll ans = INF;
    rep(i, k) {
        int y = xy[i].first;
        int x = xy[i].second;

        if(y == h) {
            ans = min(ans, d[i][1] + abs(w - x));
        }

        if(x == w) {
            ans = min(ans, d[i][0] + abs(h - y));
        }
    }

    if(ans == INF) cout &lt;&lt; -1 &lt;&lt; endl;
    else cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0604 Take the 'IOI' train]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/16/aoj0604-take-the-ioi-train/"/>
    <updated>2016-03-16T00:31:03+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/16/aoj0604-take-the-ioi-train</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0604">Take the 'IOI' train | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>待機用レールは列車を組み始めたら使えない．最初に避難させることは出来るが使いはじめる場所を決めたら，その列車を使うか，その列車以降を使わないかになる．</p>

<p>{% math %}
\begin{eqnarray}
    dp[i][j][0] &amp;:=&amp; Sをiまで，Tをjまで見て，末尾がOの時の最大値 \
    dp[i][j][1] &amp;:=&amp; Sをiまで，Tをjまで見て，末尾がIの時の最大値
\end{eqnarray}
{% endmath %}</p>

<p>このように状態を持つと遷移は4パターンになる．</p>

<p>{% img /images/AOJ/0604-1.png %}
{% img /images/AOJ/0604-2.png %}</p>

<p>{% img /images/AOJ/0604-3.png %}
{% img /images/AOJ/0604-4.png %}</p>

<p>最初は {% m %} I {% em %}で始め， {% m %} I {% em %}で終わることに注意する．また，どちらかの列車を全く使わなくても良いので最初に空白を入れて表現してみた(変だ)．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int dp[2005][2005][2];

int main() {
    int n, m;
    cin &gt;&gt; n &gt;&gt; m;

    string s, t;
    cin &gt;&gt; s &gt;&gt; t;

    n++;
    m++;
    s = " " + s;
    t = " " + t;

    memset(dp, 0, sizeof(dp));

    REP(i, 0, n) {
        REP(j, 0, m) {

            if(i == 0 &amp;&amp; j == 0) continue;

            bool a = false, b = false;
            if(i == 0) {
                b = true;
            } else if(j == 0) {
                a = true;
            } else {
                a = true;
                b = true;
            }

            if(a) {
                if(dp[i-1][j][1] == 0) {
                    if(s[i] == 'I') {
                        dp[i][j][1] = max(dp[i][j][1], dp[i-1][j][0] + 1);
                    }
                } else {
                    if(s[i] == 'I') {
                        dp[i][j][1] = max(dp[i][j][1], dp[i-1][j][0] + 1);
                    } else {
                        dp[i][j][0] = max(dp[i][j][0], dp[i-1][j][1] + 1);
                    }
                }
            }

            if(b) {
                if(dp[i][j-1][1] == 0) {
                    if(t[j] == 'I') {
                        dp[i][j][1] = max(dp[i][j][1], dp[i][j-1][0] + 1);
                    }
                } else {
                    if(t[j] == 'I') {
                        dp[i][j][1] = max(dp[i][j][1], dp[i][j-1][0] + 1);
                    } else {
                        dp[i][j][0] = max(dp[i][j][0], dp[i][j-1][1] + 1);
                    }
                }
            }
        }
    }

    int ans = 0;
    rep(i, n) {
        rep(j, m) {
            // cout &lt;&lt; "(" &lt;&lt; dp[i][j][0] &lt;&lt; "," &lt;&lt; dp[i][j][1] &lt;&lt; ") ";
            ans = max(ans, dp[i][j][1]);
        }
        // cout &lt;&lt; endl;
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0603 Illumination]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/12/aoj0603-illumination/"/>
    <updated>2016-03-12T21:51:55+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/12/aoj0603-illumination</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0603">Illumination | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>まんまこれだ</p>

<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://codeforces.com/contest/604/problem/C">Problem - C - Codeforces</a></h4><p>Kevin has just recevied his disappointing results on the USA Identification of Cows Olympiad (USAICO) in the form of a binary string of length n. Each character of Kevin's string represents Kevin's score on one of the n questions of the olympiad-'1' for a correctly identified cow and '0' otherwise.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>


<p>と思ったけど，連続，非連続で違った．<br/>
連続して{% m %} 01 {% em %}，または{% m %} 10 {% em %}の列に分ける．{% m %} 1 {% em %}つの列を反転するとその前後の列を含む{% m %} 01, 10 {% em %}列になる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n);
    rep(i, n) cin &gt;&gt; v[i];

    vector&lt;int&gt; t;
    t.push_back(0);
    REP(i, 1, n) {
        if(v[i-1] == v[i]) {
            t.push_back(i);
        }
    }
    t.push_back(n);

    int ans = 0;
    rep(i, t.size()-1) {
        ans = max(ans, t[i+1] - t[i]);
    }

    rep(i, n) {
        int j = upper_bound(t.begin(), t.end(), i) - t.begin();
        int res = t[j+1] - t[j-2];
        ans = max(ans, res);
    }

    cout &lt;&lt; ans &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0601 Sugar Glider]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/11/aoj0601-sugar-glider/"/>
    <updated>2016-03-11T16:43:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/11/aoj0601-sugar-glider</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0601">Sugar Glider | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>現在の場所までのコスト，高さを持ってdijkstra．次の木に飛び移る時に高さが{% m %} 0 {% em %}より小さくなる場合，不足分を登ってから飛び移る．この時に，現在の木の高さが(現在の高さ+不足分)より小さいかをチェックする．また，次の木の高さを超えて場合，逆に下ってから飛び移る．この時に，不足分下った高さが{% m %} 0 {% em %}より大きいかどうかをチェックする．<br/>
最終目標が木{% m %} N {% em %}の一番上なので，答えは{% m %} d[n-1] + (H[n-1] - Y[n-1]) {% em %}となる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1LL&lt;&lt;62
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;ll, ll&gt; P;
typedef pair&lt;P, ll&gt; PP;

struct edge {
    int from,to;
    ll cost;

    edge(int t,int c) : to(t),cost(c) {}
    edge(int f,int t,int c) : from(f),to(t),cost(c) {}

    bool operator&lt;(const edge &amp;e) const {
        return cost &lt; e.cost;
    }
};

ll H[100005], Y[100005];
vector&lt;edge&gt; G[100005];
ll d[100005];

void dijkstra(int s, int n, int h) {
    priority_queue&lt;PP,vector&lt;PP&gt;,greater&lt;PP&gt; &gt; que;
    fill(d,d+n,INF);

    d[s] = 0;
    Y[s] = h;
    que.push(PP(P(0, h), s));

    while(que.size()) {
        PP p = que.top();
        que.pop();

        ll cost = p.first.first;
        ll cur = p.first.second;
        int v = p.second;
        if(d[v] &lt; cost) continue;

        rep(i,G[v].size()) {
            edge e = G[v][i];

            if(H[v] &lt; e.cost) continue;

            if(cur - e.cost &lt; 0) {
                if(e.cost - cur &lt;= H[v] - cur &amp;&amp; d[e.to] &gt; d[v] + (e.cost - cur) + e.cost) {
                    d[e.to] = d[v] + (e.cost - cur) + e.cost;
                    Y[e.to] = 0;
                    que.push(PP(P(d[e.to], 0), e.to));
                }
            } else if(cur - e.cost &gt; H[e.to]) {
                if(cur - ((cur - e.cost) - H[e.to]) &gt;= 0 &amp;&amp; d[e.to] &gt; d[v] + ((cur - e.cost) - H[e.to]) + e.cost) {
                    d[e.to] = d[v] + ((cur - e.cost) - H[e.to]) + e.cost;
                    Y[e.to] = cur - ((cur - e.cost) - H[e.to]) - e.cost;
                    que.push(PP(P(d[e.to], cur - ((cur - e.cost) - H[e.to]) - e.cost), e.to));
                }
            } else {
                if(d[e.to] &gt; d[v] + e.cost) {
                    d[e.to] = d[v] + e.cost;
                    Y[e.to] = cur - e.cost;
                    que.push(PP(P(d[e.to], cur - e.cost), e.to));
                }
            }
        }
    }
}

int main() {
    int n, m, h;
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; h;

    memset(H, 0, sizeof(H));
    memset(Y, 0, sizeof(Y));

    rep(i, n) cin &gt;&gt; H[i];
    rep(i, m) {
        ll a, b, c;
        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;

        a--;
        b--;

        G[a].push_back(edge(b, c));
        G[b].push_back(edge(a, c));
    }

    dijkstra(0, n, h);

    if(d[n-1] == INF) cout &lt;&lt; -1 &lt;&lt; endl;
    else cout &lt;&lt; d[n-1] + (H[n-1] - Y[n-1]) &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
