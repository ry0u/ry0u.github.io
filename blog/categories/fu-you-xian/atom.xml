<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 幅優先 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/fu-you-xian/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-09-03T02:19:57+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces354-div2D Theseus and labyrinth]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/26/codeforces354-div2d-theseus-and-labyrinth/"/>
    <updated>2016-05-26T10:19:44+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/26/codeforces354-div2d-theseus-and-labyrinth</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/676/problem/D">Problem - D - Codeforces</a></h4><p>Theseus has just arrived to Crete to fight Minotaur. He found a labyrinth that has a form of a rectangular field of size and consists of blocks of size 1 × 1. Each block of the labyrinth has a button that rotates all blocks 90 degrees clockwise.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

サイズが {% m %} 1 \times 1 {% em %}のブロックで構成される {% m %} n \times m {% em %}の {% m %} field {% em %}がある． {% m %} 1 {% em %}回の行動で隣接するマスに移動するか，全てのブロックを {% m %} 90 {% em %}度時計回りに回転するかが出来る．隣接するマスには移動するためには，現在のマスから隣接するマスの方向にドアがあり，隣接するマスから現在のマスの方向にドアがあるのが条件となる． {% m %} (x_t, y_t) {% em %}から {% m %} (x_mm, y_m) {% em %}には最小何回でいけるか．  
  
盤面と状態を{% m %} (y, x, rot) {% em %}で持って，幅優先探索．当たられる座標が {% m %} xとy {% em %}で逆なので注意する．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;
typedef pair<int, P> IP;
typedef pair<P, P> PP;

int d[1001][1001][4];
char v[1001][1001][4];
map<char, vector<char> > ma;

// (y, x)にdirのドアがあるか
bool ch(int y, int x, int rot, int i) {
	char c = v[y][x][rot];
	if(c == '+') return true;
	if(c == '*') return false;

	if(i == 0) {
		if(c == '-' || c == '>' || c == 'D' || c == 'L' || c == 'U') return true;
		return false;
	} else if(i == 1) {
		if(c == '|' || c == 'v' || c == 'L' || c == 'U' || c == 'R') return true;
		return false;
	} else if(i == 2) {
		if(c == '-' || c == '<' || c == 'U' || c == 'R' || c == 'D') return true;
		return false;
	} else if(i == 3) {
		if(c == '|' || c == '^' || c == 'R' || c == 'D' || c == 'L') return true;
		return false;
	}
}

int main() {
	int n, m;
	cin >> n >> m;

	ma['+'].push_back('+');
	ma['+'].push_back('+');
	ma['+'].push_back('+');
	ma['+'].push_back('+');

	ma['-'].push_back('-');
	ma['-'].push_back('|');
	ma['-'].push_back('-');
	ma['-'].push_back('|');

	ma['|'].push_back('|');
	ma['|'].push_back('-');
	ma['|'].push_back('|');
	ma['|'].push_back('-');

	ma['^'].push_back('^');
	ma['^'].push_back('>');
	ma['^'].push_back('v');
	ma['^'].push_back('<');

	ma['>'].push_back('>');
	ma['>'].push_back('v');
	ma['>'].push_back('<');
	ma['>'].push_back('^');

	ma['v'].push_back('v');
	ma['v'].push_back('<');
	ma['v'].push_back('^');
	ma['v'].push_back('>');

	ma['<'].push_back('<');
	ma['<'].push_back('^');
	ma['<'].push_back('>');
	ma['<'].push_back('v');

	ma['L'].push_back('L');
	ma['L'].push_back('U');
	ma['L'].push_back('R');
	ma['L'].push_back('D');

	ma['U'].push_back('U');
	ma['U'].push_back('R');
	ma['U'].push_back('D');
	ma['U'].push_back('L');

	ma['R'].push_back('R');
	ma['R'].push_back('D');
	ma['R'].push_back('L');
	ma['R'].push_back('U');

	ma['D'].push_back('D');
	ma['D'].push_back('L');
	ma['D'].push_back('U');
	ma['D'].push_back('R');

	ma['*'].push_back('*');
	ma['*'].push_back('*');
	ma['*'].push_back('*');
	ma['*'].push_back('*');

	vector<string> s(n);
	rep(i, n) cin >> s[i];

	rep(i, n) {
		rep(j, m) {
			rep(k, 4) {
				v[i][j][k] = ma[s[i][j]][k];
			}
		}
	}

	int sy, sx;
	cin >> sy >> sx;

	sy--; sx--;

	int gy, gx;
	cin >> gy >> gx;

	gy--; gx--;

	rep(i, n) {
		rep(j, m) {
			rep(k, 4) d[i][j][k] = INF;
		}
	}

	queue<IP> que;
	que.push(mp(0, mp(sy, sx)));
	d[sy][sx][0] = 0;

	int dx[4] = {1, 0, -1, 0};
	int dy[4] = {0, 1, 0, -1};
	int nd[4] = {2, 3, 0, 1};

	while(que.size()) {
		IP p = que.front(); que.pop();
		int rot = p.first;
		int y = p.second.first;
		int x = p.second.second;

		rep(i, 4) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if(0 <= ny && ny < n && 0 <= nx && nx < m && ch(y, x, rot, i) && ch(ny, nx, rot, nd[i])) {
				if(d[ny][nx][rot] > d[y][x][rot] + 1) {
				   d[ny][nx][rot] = d[y][x][rot] + 1;
					que.push(mp(rot, mp(ny, nx)));
				}
			}
		}

		int nr = (rot + 1) % 4;
		if(d[y][x][nr] > d[y][x][rot] + 1) {
			d[y][x][nr] = d[y][x][rot] + 1;
			que.push(mp(nr, mp(y, x)));
		}
	}

	// rep(k, 4) {
	// 	cout  << "-------- " << endl;
	// 	rep(i, n) {
	// 		rep(j, m) {
	// 			if(d[i][j][k] == INF) cout << "X ";
	// 			else cout << d[i][j][k] << " ";
	// 		}
	// 		cout << endl;
	// 	}
	// }

	int ans = INF;
	rep(i, 4) {
		ans = min(ans, d[gy][gx][i]);
	}

	if(ans == INF) cout << -1 << endl;
	else cout << ans << endl;

	return 0;
}
```

実装がひどい．各方向に行けるかいけないかをboolで持っておけば， {% m %} ch {% em %}の中で全て列挙する形にならないので良いと思った．実装の方針がミスのしやすさ，実装時間に影響すると思うのでなるべく考えてから書きたい．
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1501 Grid]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/20/aoj1501-grid/"/>
    <updated>2016-04-20T22:05:48+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/20/aoj1501-grid</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1501">Grid | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

愚直に幅優先で見て行くが，誤読に続く誤読を繰り返しとても時間がかかった．端と端が繋がるのは

```cpp
int nx = (x + dx[i] + r) % r;
int ny = (y + dy[i] + c) % c;
```

と表現出来る．後は同じ深さの所は足していく．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair
#define MOD 100000007

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

bool used[1005][1005];
ll cnt[1005][1005];
int depth[1005][1005];

int r, c;
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

bool can(int x, int y) {
	if(0 <= x &&  x < r && 0 <= y && y < c) return true;
	return false;
}

int main() {
	int a1, a2, b1, b2;
	cin >> r >> c >> a1 >> a2 >> b1 >> b2;


	memset(used, 0, sizeof(used));
	used[a1][a2] = true;

	memset(cnt, 0, sizeof(cnt));
	cnt[a1][a2] = 1;

	memset(depth, 0, sizeof(depth));

	queue<P> que;
	que.push(mp(a1, a2));

	int ans = INF;
	while(que.size()) {
		P p = que.front(); que.pop();
		int x = p.first; int y = p.second;
		
		if(x == b1 && y == b2) {
			break;
		}

		rep(i, 4) {
			int nx = x + dx[i] + r;
			int ny = y + dy[i] + c;

			nx %= r; ny %= c;

			if(!used[nx][ny]) {
				cnt[nx][ny] += cnt[x][y];
				cnt[nx][ny] %= MOD;
				used[nx][ny] = true;
				depth[nx][ny] = depth[x][y] + 1;
				que.push(mp(nx, ny));
			} else if(depth[nx][ny] == depth[x][y] + 1) {
				cnt[nx][ny] += cnt[x][y];
				cnt[nx][ny] %= MOD;
			}
		}
	}

	cout << cnt[b1][b2] << endl;

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1296 Repeated Substitution with Sed]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/23/aoj1296-repeated-substitution-with-sed/"/>
    <updated>2016-03-23T20:48:42+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/23/aoj1296-repeated-substitution-with-sed</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1296">Repeated Substitution with Sed</a></h4><p>Do you know "sed," a tool provided with Unix? Its most popular use is to substitute every occurrence of a string contained in the input string (actually each input line) with another string β. More precisely, it proceeds as follows. Within the input string, every non-overlapping (but possibly adjacent) occurrences of α are marked.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

文字列から {% m %} \alpha_i {% em %}の文字列を探して置換を繰り返す．探すのはstring::find, 置換はstring::replaceを使用して楽をした．幅優先で文字列が {% m %} \delta {% em %}になったら変更回数を答える．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	int n;
	while(cin >> n && n) {
		vector<string> v(n), v2(n);
		rep(i, n) cin >> v[i] >> v2[i];

		string s, t;
		cin >> s >> t;

		queue<pair<string, int> > que;
		que.push(mp(s, 0));
		int ans = -1;

		while(que.size()) {
			pair<string, int> p = que.front();
			que.pop();

			if(p.first == t) {
				ans = p.second;
				break;
			}

			rep(i, n) {
				bool flag = false;
				string s2 = p.first;
				string::size_type id = s2.find(v[i]);
				while(id != string::npos) {
					flag = true;
					s2.replace(id, v[i].size(), v2[i]);
					id = s2.find(v[i], id + v2[i].size());
				}

				if(flag && s2.size() <= t.size()) {
					que.push(mp(s2, p.second + 1));
				}
			}
		}

		cout << ans << endl;
	}

	return 0;
}
```

]]></content>
  </entry>
  
</feed>
