<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 幅優先 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/fu-you-xian/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-04-19T23:49:28+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1296 Repeated Substitution with Sed]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/23/aoj1296-repeated-substitution-with-sed/"/>
    <updated>2016-03-23T20:48:42+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/23/aoj1296-repeated-substitution-with-sed</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1296">Repeated Substitution with Sed</a></h4><p>Do you know "sed," a tool provided with Unix? Its most popular use is to substitute every occurrence of a string contained in the input string (actually each input line) with another string β. More precisely, it proceeds as follows. Within the input string, every non-overlapping (but possibly adjacent) occurrences of α are marked.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>文字列から <script type="math/tex"> \alpha_i </script>の文字列を探して置換を繰り返す．探すのはstring::find, 置換はstring::replaceを使用して楽をした．幅優先で文字列が <script type="math/tex"> \delta </script>になったら変更回数を答える．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n;
    while(cin &gt;&gt; n &amp;&amp; n) {
        vector&lt;string&gt; v(n), v2(n);
        rep(i, n) cin &gt;&gt; v[i] &gt;&gt; v2[i];

        string s, t;
        cin &gt;&gt; s &gt;&gt; t;

        queue&lt;pair&lt;string, int&gt; &gt; que;
        que.push(mp(s, 0));
        int ans = -1;

        while(que.size()) {
            pair&lt;string, int&gt; p = que.front();
            que.pop();

            if(p.first == t) {
                ans = p.second;
                break;
            }

            rep(i, n) {
                bool flag = false;
                string s2 = p.first;
                string::size_type id = s2.find(v[i]);
                while(id != string::npos) {
                    flag = true;
                    s2.replace(id, v[i].size(), v2[i]);
                    id = s2.find(v[i], id + v2[i].size());
                }

                if(flag &amp;&amp; s2.size() &lt;= t.size()) {
                    que.push(mp(s2, p.second + 1));
                }
            }
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
