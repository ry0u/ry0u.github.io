<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: いもす法 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/imosufa/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-09-03T02:19:57+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces353-div2C Money Transfers]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/17/codeforces353-div2c-money-transfers/"/>
    <updated>2016-05-17T18:20:16+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/17/codeforces353-div2c-money-transfers</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/675/problem/C">Problem - C - Codeforces</a></h4><p>There are n banks in the city where Vasya lives, they are located in a circle, such that any two banks are neighbouring if their indices differ by no more than . Also, bank 1 and bank n are neighbours if n  > 1. No bank is a neighbour of itself.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

隣接した場所の値を自由に交換出来る時，数列を全部{% m %} 0 {% em %}にするには最小何回で出来るか．  
円環なので，切って {% m %} 2 {% em %}つ繋げて表現した．最初は累積和を取って， {% m %} [0, 0] {% em %}となる区間で移動させるようにしていた．これはそれぞれの {% m %} (区間数-1) {% em %}の和が答えで，つまり {% m %} (n - 累積和が0の個数) {% em %}となる．  
累積和が {% m %} 0 {% em %}となる場所の個数は，累積和を開始する地点による．

{% img /images/Codeforces/353/c.png %}

上の図(適当)は，累積和をカウントしたものとする．開始地点をずらすというのは，赤の線をどこに引くか( {% m %} 0 {% em %}となる基準をどこにするか)ということになる．よって，最初の累積和の数の個数を数えて，そのmaxを {% m %} n {% em %}から引く．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	int n;
	cin >> n;

	vector<ll> v(n);
	rep(i, n) cin >> v[i];


	ll imos[100005];
	memset(imos, 0, sizeof(imos));
	imos[0] = v[0];

	REP(i, 1, n) {
		imos[i] += imos[i-1] + v[i];
	}

	map<ll, int> m;
	int x = 0;

	rep(i, n) {
		m[imos[i]]++;
		x = max(x, m[imos[i]]);
	}

	cout << n - x << endl;

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ2331 A Way to Invite Friends]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/14/aoj2331-a-way-to-invite-friends/"/>
    <updated>2016-05-14T23:45:52+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/14/aoj2331-a-way-to-invite-friends</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2331">A Way to Invite Friends | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

各友だちの，嫌がらない海に行く人数の範囲( {% m %} a_i 〜 b_i {% em %})が与えられる．海に誘える最大人数を求める．  
海に行く人数には「わたし」も含まれるので {% m %} i {% em %}人誘えるかは， {% m %} i+1 {% em %}人で海に行くことを嫌がらない友だちの数が {% m %} i {% em %}人以上いるか，となるのでいもす法で累積和を取って順番に見ていった．


# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	int n;
	cin >> n;

	int imos[100005];
	memset(imos, 0, sizeof(imos));

	rep(i, n) {
		int a, b;
		cin >> a >> b;

		imos[a]++;
		imos[b+1]--;
	}

	REP(i, 1, 100005) {
		imos[i] += imos[i-1];
	}

	int ans = 0;
	rep(i, 100005) {
		if(imos[i+1] >= i) {
			ans = i;
		}
	}

	cout << ans << endl;

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0574 Nails]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/20/aoj0574-nails/"/>
    <updated>2016-02-20T00:38:56+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/20/aoj0574-nails</id>
    <content type="html"><![CDATA[問題文  
http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0574

<!-- more -->

* {% m %} (a,b)に+1{% em %}
* {% m %} (a, b+1)に-1 {% em %}
* {% m %} (a+x+1, b)に-1 {% em %}
* {% m %}(a+x+2, b+1)に+1{% em %}
* {% m %}(a+x+1, b+x+2)に+1{% em %}
* {% m %}(a+x+2，b+x+2)に-1 {% em %}

して，左から右，上から下，左上から右下方向の累積和を取り，0ではない場所の個数を数えた．  


# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int d[5005][5005];

int main() {
	int n, m;
	cin >> n >> m;

	memset(d, 0, sizeof(d));

	rep(i, m) {
		int a, b, x;
		cin >> a >> b >> x;

		a--;
		b--;

		d[a][b]++;
		d[a][b+1]--;

		d[a+x+1][b]--;
		d[a+x+2][b+1]++;

		d[a+x+1][b+x+2]++;
		d[a+x+2][b+x+2]--;
	}

	rep(i, n) {
		rep(j, i+1) d[i][j+1] += d[i][j];
	}

	rep(i, n) {
		rep(j, i+1) d[i+1][j] += d[i][j];
	}

	rep(i, n) {
		rep(j, i+1) d[i+1][j+1] += d[i][j];
	}

	int ans = 0;
	rep(i, n) {
		rep(j, i+1) {
			if(d[i][j]) ans++;
		}
	}
	
	cout << ans << endl;

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0560 Planetary Exploration]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/12/aoj0560-planetary-exploration/"/>
    <updated>2016-02-12T02:11:59+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/12/aoj0560-planetary-exploration</id>
    <content type="html"><![CDATA[問題文  
http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0560

<!-- more -->

2次元imos．{% m %} (a, b) 〜 (c, d) {% em %}は

1. f\[a-1]\[b-1]
2. f\[a-1]\[d]
3. f\[c]\[b-1] 
4. f\[c]\[d]

1
{% img /images/AOJ/0560-4.png %}
2
{% img /images/AOJ/0560-3.png %}  
3
{% img /images/AOJ/0560-2.png %}
4
{% img /images/AOJ/0560-1.png %}

とすると，{% m %} f(c, d) - f(c, b-1) - f(a-1, d) + f(a-1, b-1) {% em %}で求めることが出来る．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int J[1005][1005], O[1005][1005], I[1005][1005];

int main() {
	int m, n, k;
	cin >> m >> n >> k;

	vector<string> v(m);
	rep(i, m) cin >> v[i];

	memset(J, 0, sizeof(J));
	memset(O, 0, sizeof(O));
	memset(I, 0, sizeof(I));

	rep(i, m) {
		rep(j, n) {
			if(v[i][j] == 'J') J[i][j]++;
			if(v[i][j] == 'O') O[i][j]++;
			if(v[i][j] == 'I') I[i][j]++;
		}
	}

	rep(i, m) {
		REP(j, 1, n) {
			J[i][j] += J[i][j-1];
			O[i][j] += O[i][j-1];
			I[i][j] += I[i][j-1];
		}
	}

	rep(i, n) {
		REP(j, 1, m) {
			J[j][i] += J[j-1][i];
			O[j][i] += O[j-1][i];
			I[j][i] += I[j-1][i];
		}
	}

	rep(i, k) {
		int a, b, c, d;
		cin >> a >> b >> c >> d;

		a--;
		b--;
		c--;
		d--;

		cout << J[c][d] - (a-1 >= 0 ? J[a-1][d] : 0) - (b-1 >= 0 ? J[c][b-1] : 0) + (a-1 >= 0 && b -1 >= 0 ? J[a-1][b-1] : 0) << " ";
		cout << O[c][d] - (a-1 >= 0 ? O[a-1][d] : 0) - (b-1 >= 0 ? O[c][b-1] : 0) + (a-1 >= 0 && b -1 >= 0 ? O[a-1][b-1] : 0) << " ";
		cout << I[c][d] - (a-1 >= 0 ? I[a-1][d] : 0) - (b-1 >= 0 ? I[c][b-1] : 0) + (a-1 >= 0 && b -1 >= 0 ? I[a-1][b-1] : 0) << endl;
	}

	return 0;
}
```

ベースを{% m %} (0, 0)にするとa == 0 || b == 0の時にちょっと面倒 {% em %}．
]]></content>
  </entry>
  
</feed>
