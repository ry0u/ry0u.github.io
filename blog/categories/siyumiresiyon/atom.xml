<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: シュミレーション | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/siyumiresiyon/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-02-29T15:45:23+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SRM682 D2M TopBiologist]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/29/srm682-d2m-topbiologist/"/>
    <updated>2016-02-29T00:36:01+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/29/srm682-d2m-topbiologist</id>
    <content type="html"><![CDATA[<p>大文字アルファベットの<script type="math/tex">A, C, G, T</script>で構成される文字列が与えられる．この文字列に含まれない最小の<script type="math/tex">A, C, G, T</script>で構成される文字列を返す．</p>

<!-- more -->


<hr />

<p>与えられる文字列の長さは最大で<script type="math/tex">2000</script>なので長さ<script type="math/tex">6</script>の文字列が最大となる（長さ<script type="math/tex">5</script>の文字列を単純に連結すれば<script type="math/tex">5120</script>になるが上手いこと組み合わせれば<script type="math/tex">2000</script>以下になる）．</p>

<p>愚直に探索し，その文字列が見つからなければ返す．<br/>
部分文字列を全て列挙しmapに突っ込んだらMLEして落とした．</p>

<h1>Code</h1>

<pre><code class="cpp">    public:
    string findShortestNewSequence(string s) {
        m.clear();

        rep(i, s.size()) {
            stringstream ss;
            REP(j, i, s.size()) {
                string t = s.substr(i, j-i+1);
                if(t.size() &gt;= 10) continue;
                m[t] = true;
            }
        }

        que.push("A");
        que.push("C");
        que.push("G");
        que.push("T");

        string ans = "";
        while(que.size()) {
            string t = que.front();
            que.pop();

            if(!m[t]) {
                ans = t;
                break;
            }

            que.push(t + "A");
            que.push(t + "C");
            que.push(t + "G");
            que.push(t + "T");
        }

        // last check
        return ans;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0540 Amidakuji]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/10/aoj0540-amidakuji/"/>
    <updated>2016-02-10T20:28:02+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/10/aoj0540-amidakuji</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0540">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0540</a></p>

<!-- more-->


<p>減らす棒は1本で良いので，アミダをシュミレーションして，下から順に戻した．戻していく時に，k番目以内に双方が入っている場合はその棒を無くしてもk番目までのコストの和は変わらないので，どちらか一方がk番目に入っている場合に更新があるかないかの判断をした．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, m, h, k;

    while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; h &gt;&gt; k) {
        if(n == 0 &amp;&amp; m == 0 &amp;&amp; h == 0 &amp;&amp; k == 0) break;

        vector&lt;int&gt; cost(n);
        rep(i, n) cin &gt;&gt; cost[i];

        vector&lt;P&gt; p(m);
        rep(i, m) cin &gt;&gt; p[i].second &gt;&gt; p[i].first;
        sort(p.begin(), p.end());

        vector&lt;int&gt; id(n);
        rep(i, n) id[i] = i;

        rep(i, m) {
            swap(id[ p[i].second-1 ], id[ p[i].second]);
        }

        int ans = 0;
        vector&lt;int&gt; v(n);
        rep(i, n) {
            v[id[i]] = cost[i];
            if(id[i] &lt; k) ans += cost[i];
        }

        int res = 0;
        for(int i = m-1; i &gt;= 0; i--) {
            int a = id[ p[i].second-1];
            int b = id[ p[i].second];

            if(a &lt; k &amp;&amp; k &lt;= b) {
                if(v[a] &gt; v[b]) {
                    res = max(res, v[a] - v[b]);
                }
            } else if(b &lt; k &amp;&amp; k &lt;= a) {
                if(v[b] &gt; v[a]) {
                    res = max(res, v[b] - v[a]);
                }
            }

            swap(id[ p[i].second-1], id[p[i].second]);
        }

        cout &lt;&lt; ans - res &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ0534 Chain]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/09/aoj0534-chain/"/>
    <updated>2016-02-09T15:14:15+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/09/aoj0534-chain</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0534">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0534</a></p>

<!-- more -->


<p>まず，色を変えるのを選ぶ．変える色は前後のどちらかの色にする．次に色を変えた状態で何個残るかをシュミレーションする．<br/>
シュミレーションは上から見て行く．同じ色の塊で(色，個数)をstackに積んでいく．もし4つ以上連続している場合はstackには積まない(消える)．stackのtopと現在見てる個数が4を超えればpopして，超えない場合はpushすることで連鎖を表現出来る．<script type="math/tex"> O(N^2) </script></p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;stack&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int func(vector&lt;int&gt;&amp; v) {
    stack&lt;P&gt; st;
    int n = v.size(), ret = 0;

    rep(i, n) {
        int len = 1, c = v[i];
        REP(j, i+1, n) {
            if(c == v[j]) {
                i++;
                len++;
                continue;
            } else break;
        }

        if(len &gt;= 4) continue;
        else {
            if(st.size() == 0) {
                st.push(mp(c, len));
                ret += len;
            } else {
                P p = st.top();
                if(p.first == c) {
                    if(p.second + len &lt; 4) {
                        st.top().second += len;
                        ret += len;
                    } else {
                        st.pop();
                        ret -= p.second;
                    }
                } else {
                    st.push(mp(c, len));
                    ret += len;
                }
            }
        }
    }

    return ret;
}

int main() {
    int n;
    while(cin &gt;&gt; n &amp;&amp; n) {

        vector&lt;int&gt; v(n);
        rep(i, n) cin &gt;&gt; v[i];

        int ans = n + 1;
        rep(i, n) {
            int t = v[i];

            v[i] = 1;
            if(i == 0) {
                v[i] = v[i+1];
                ans = min(ans, func(v));
            } else if(i == n-1) {
                v[i] = v[i-1];
                ans = min(ans, func(v));
            } else {
                if(v[i+1] == v[i-1]) {
                    v[i] = v[i+1];
                    ans = min(ans, func(v));
                } else {
                    v[i] = v[i-1];
                    ans = min(ans, func(v));

                    v[i] = v[i+1];
                    ans = min(ans, func(v));
                }
            }

            v[i] = t;
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>

<p>制限時間が結構厳しかった．TLEを連発して0.96secまで落とした．</p>
]]></content>
  </entry>
  
</feed>
