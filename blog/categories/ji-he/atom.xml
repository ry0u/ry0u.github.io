<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 幾何 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/ji-he/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-11-19T01:27:19+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SRM324 D1M TournamentPlan]]></title>
    <link href="http://ry0u.github.io/blog/2016/11/18/srm324-d1m-tournamentplan/"/>
    <updated>2016-11-18T22:34:18+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/11/18/srm324-d1m-tournamentplan</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=6807&rd=10004">TopCoder Statistics - Problem Statement</a></h4><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2010, TopCoder, Inc. All rights reserved.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>
<!-- more -->

$(street[i], avenue[i])$に$i$番目の人がいて，どこかの地点に集まりたい．集まる地点からのマンハッタン距離の合計を最小化したい．

---

これがマンハッタン距離でなくてユークリッド距離であれば，全て足してその平均を取れば良い(重心)．実際に重心からそんなに離れないだろうと思って重心を中心に$-1000, 1000$ぐらいずらして見たけどサンプルが合わない．

思考が止まってしまって，探索するのかと考えたけど全然分からない．解説を見るとマンハッタン距離なので，これが平均でなくて中央値で良いらしい．感覚は分かるけど，証明があまり良くわかっていない．

```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <cmath>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

class TournamentPlan {

    public:

    int getTravelDistance(vector <int> street, vector <int> avenue) {
		int n = street.size();

		sort(street.begin(), street.end());
		sort(avenue.begin(), avenue.end());

		int x = street[n / 2];
		int y = avenue[n / 2];

		int ans = 0;
		rep(i, n) {
			ans += abs(street[i] - x) + abs(avenue[i] - y);
		}

		return ans;
    }
};
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM312 D2H PizzaDivision]]></title>
    <link href="http://ry0u.github.io/blog/2016/09/30/srm312-d2h-pizzadivision/"/>
    <updated>2016-09-30T13:55:59+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/09/30/srm312-d2h-pizzadivision</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=6493&rd=9992">TopCoder Statistics - Problem Statement</a></h4><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2010, TopCoder, Inc. All rights reserved.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

ピザにトッピングが載っている．トッピングを平等に分ける切り方は何通りあるか？

---

まず切り方が無限にあるのはトッピングが1つかつ原点の場合のみなので，それは場合分けしておく．それ以外の場合は原点にあるトッピングは無視して，そのトッピングと原点を結ぶ直線を作る．また，全ての二点間の中点と原点を結ぶ直線も作る．  
あとはその直線がトッピングを平等に分ける直線となっていくか見ていく．点が最大で$50$と少ないので，ある点と今見ている直線との距離が等しい別の点を全探索し，$1$つでもあればその直線と点に対する線対称な点が存在するとして判定した．


# Code

```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <cmath>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define EPS 1e-9
#define equals(a,b) fabs((a) - (b)) < EPS
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct Point {
	double x, y;

	Point(double x=0, double y=0) : x(x), y(y) {}

	Point operator+(const Point &o) const { return Point(x+o.x, y+o.y); }

	Point operator-(const Point &o) const { return Point(x-o.x, y-o.y); }

	Point operator*(const double m) const { return Point(x*m, y*m); }

	Point operator/(const double d) const { return Point(x/d, y/d); }

	bool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }

	bool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }
};

ostream& operator << (ostream& os, const Point& p) {
	os << "(" << p.x << ", " << p.y << ")";
	return os;
}

double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }
double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }
double atan(Point p) { return atan2(p.y, p.x); }
double norm(Point p) { return p.x * p.x + p.y * p.y; }
double abs(Point p) { return sqrt(norm(p)); }
double distancePP(Point p, Point o) { return sqrt(norm(o - p)); }

int ccw(Point a, Point b, Point c) {
	b = b-a;
	c = c-a;

	if(cross(b, c) > 0.0) return +1;	//conter clockwise
	if(cross(b, c) < 0.0) return -1;	//clockwise
	if(dot(b, c) < 0.0) return +2;	//a on Seg(b,c)
	if(norm(b) < norm(c)) return -2;	//b on Seg(a,c)
	return 0;	//c on Seg(a,b)
}

struct Line {
	Point a, b;

	Line() : a(Point(0, 0)), b(Point(0, 0)) {}

	Line(Point a, Point b) : a(a), b(b) {}
};

ostream& operator << (ostream& os, const Line& l) {
	os << "(" << l.a.x << ", " << l.a.y << ")-(" << l.b.x << "," << l.b.y << ")";
	return os;
}

struct Seg {
	Point a,b;

	Seg() : a(Point(0, 0)), b(Point(0, 0)) {}

	Seg (Point a, Point b) : a(a),b(b) {}
};

ostream& operator << (ostream& os, const Seg& s) {
	os << "(" << s.a.x << ", " << s.a.y << ")-(" << s.b.x << "," << s.b.y << ")";
	return os;
}

bool isOrthogonal(Line l1, Line l2) { return equals(dot((l1.b - l1.a), (l2.b - l2.a)), 0.0); }

bool isParallel(Line l1, Line l2) { return equals(cross((l1.b - l1.a), (l2.b - l2.a)), 0.0); }

bool sameLine(Line l1, Line l2) { return abs(cross(l1.b - l1.a, l2.b - l2.a)) < EPS; }

bool isIntersectLL(Line l1, Line l2) { return !isParallel(l1, l2) || sameLine(l1, l2); }

bool isIntersectLS(Line l, Seg s) {
	return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < 0;
}

bool isIntersectSS(Seg s1, Seg s2) { 
	return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 
		&& ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;
}

double distanceLP(Line l, Point p) {
	return abs(cross(l.b - l.a, p - l.a)) / abs(l.b - l.a);
}

double distanceLS(Line l, Seg s) {
	if (isIntersectLS(l, s)) return 0.0;
	return min(distanceLP(l, s.a), distanceLP(l, s.b));
}

double distanceSP(Seg s, Point p) {
	if (dot(s.b - s.a, p - s.a) < 0.0) return abs(p - s.a);
	if (dot(s.a - s.b, p - s.b) < 0.0) return abs(p - s.b);
	return distanceLP(Line(s.a, s.b) , p);
}

double distanceSS(Seg s1, Seg s2) {
	if (isIntersectSS(s1, s2)) return 0.0;
	return min( min(distanceSP(s1, s2.a), distanceSP(s1, s2.b)), min(distanceSP(s2, s1.a), distanceSP(s2, s1.b)) );
}

// if isIntersectLL(l1, l2)
Point crossPointLL(Line l1, Line l2) {
	Point v = l1.b - l1.a;
	Point v2 = l2.b - l2.a;
	return l1.a + v * cross(v2, l2.a - l1.a) / cross(v2, v);
}

// if isIntersectLS(l, s)
Point crossPointLS(Line l, Seg s) { return crossPointLL(l, Line(s.a, s.b)); }

// if isIntersectSS(s1, s2)
Point crossPointSS(Seg s1, Seg s2) { return crossPointLL(Line(s1.a, s1.b), Line(s2.a, s2.b)); }

Point project(Line l, Point p) {
	Point base = l.b - l.a;
	double t = dot(base, p-l.a) / dot(base, base);
	return l.a + base * t;
}

Point reflect(Line l, Point p) {
	return p + (project(l, p) - p) * 2.0;
}

vector<string> split(const string &str, char delim) {
	vector<string> res;
	size_t current = 0, found;
	while((found = str.find_first_of(delim, current)) != string::npos) {
		res.push_back(string(str, current, found - current));
		current = found + 1;
	}
	res.push_back(string(str, current, str.size() - current));
	return res;
}

vector<Line> uniqueLine(vector<Line> lines) {
	vector<Line> ret;
	rep(i, lines.size()) {
		bool flag = true;
		REP(j, i+1, lines.size()) {
			if(sameLine(lines[i], lines[j])) {
				flag = false;
			}
		}

		if(flag) ret.push_back(lines[i]);
	}

	return ret;
}

class PizzaDivision {

    public:

    int howMany(vector <string> toppings) {
		int n = toppings.size();

		vector<Point> v(n);
		rep(i, n) {
			vector<string> ret = split(toppings[i], ' ');
			double x, y;
			stringstream ss1(ret[0]);
			stringstream ss2(ret[1]);

			ss1 >> x;
			ss2 >> y;

			v[i].x = x;
			v[i].y = y;
		}

		if(n == 1 && equals(v[0].x, 0.0) && equals(v[0].y, 0.0)) return -1;

		vector<Line> lines;
		rep(i, n) {
			if(equals(v[i].x, 0) && equals(v[i].y, 0)) continue;
			Line l;
			l.a = v[i];
			l.b.x = 0.0;
			l.b.y = 0.0;
		
			lines.push_back(l);
		}

		rep(i, n) {
			REP(j, i + 1, n) {
				Line l;
				double x = (v[j].x + v[i].x) / 2;
				double y = (v[j].y + v[i].y) / 2;

				l.a.x = x;
				l.a.y = y;
				l.b.x = 0.0;
				l.b.y = 0.0;

				if(equals(x, 0.0) && equals(y, 0.0)) {
					Point vec = v[i] - l.a;
					x = vec.x * 0 - vec.y * 1;
					y = vec.x * 1 + vec.y * 0;

					l.b.x += x;
					l.b.y += y;
				}

				lines.push_back(l);
			}
		}

		lines = uniqueLine(lines);

		int cnt = 0;
		rep(i, lines.size()) {
			bool flag = true;
			rep(j, n) {
				if(equals(distanceLP(lines[i], v[j]), 0.0)) continue;

				bool ch = false;
				rep(k, n) {
					if(k == j) continue;

					Line l(v[j], v[k]);

					if(isOrthogonal(lines[i], l)) {
						Point p = crossPointLL(lines[i], l);
						double dist1 = distancePP(v[j], p);
						double dist2 = distancePP(v[k], p);
						if(equals(dist1, dist2)) {
							ch = true;
						}
					}
				}

				if(ch) continue;
				flag = false;
			}

			if(flag) cnt++;
		}

		return cnt;
    }
};
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM304 D1E-D2H PolyMove]]></title>
    <link href="http://ry0u.github.io/blog/2016/08/23/srm304-d1e-d2h-polymove/"/>
    <updated>2016-08-23T23:43:47+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/08/23/srm304-d1e-d2h-polymove</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article-full"><h4><a href="https://community.topcoder.com/stat?c=problem_statement&pm=6190&rd=9825">TopCoder Statistics - Problem Statement</a></h4><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2010, TopCoder, Inc. All rights reserved.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

凸包が与えられる．隣り合わない点を選び，距離が$1$以下なら移動することができる．この条件の時に最大面積の増加分を答える

---
正六角形の場合を考えてみた．

{% img /images/SRM/304-01.png %}

右上の点について考える．

{% img /images/SRM/304-02.png %}

まずは移動しない場合の青の部分の面積を出してみる．

{% img /images/SRM/304-03.png %}

この面積を出すには赤の線を底辺$a$として，緑の線を高さ$h$とすると，$\frac{ah}{2}$である．

{% img /images/SRM/304-05.png %}

ここからこの点を移動することを考えるが，移動後の三角形もこの式で計算出来るため$h$を最大にすれば良い．最大の$h$とは，底辺に対して垂直に伸ばせば良いので，新しい三角形の高さは$h + 1$となる．つまり緑の点の場所に移動する．

{% img /images/SRM/304-06.png %}

次に面積の増加分を求める．増加した部分は緑の場所である．

{% img /images/SRM/304-07.png %}

これは移動後の三角形(赤)から移動前の三角形(青)を引けば出てくる．

{% img /images/SRM/304-08.png %}
{% img /images/SRM/304-09.png %}
{% img /images/SRM/304-10.png %}

$\frac{a(h + 1)}{2} - \frac{ah}{2} = \frac{a}{2}$となり，高さが分かる必要がないことが分かる．後は移動する点が隣り合わないという条件を満たすようにdpで計算していく．

$$
	dp[i][j] := 点\_{i}まで見て，点\_{i}を移動した場合はj=1, していない場合はj=0とした時の増加分の最大
$$

$0$と$n-1$番目が隣接しているため，$0$を使って$n-1$を見ないパターンと，$1$から始めて$n-1$まで見るパターンをやる．下の図は移動した場合の点が緑で，遷移が線となる．割り当てた状態をtextで書いてみた．

{% img /images/SRM/304-14.png %}

この場合は以下の$2$つが答えとなる．

{% img /images/SRM/304-12.png %}
{% img /images/SRM/304-13.png %}

# Code

```cpp
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <cmath>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define each(it,v) for(__typeof((v).begin()) it=(v).begin();it!=(v).end();it++)
#define INF 1<<30
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int, int> P;

double dp[55][2];

class PolyMove {
	public:
	double addedArea(vector <int> x, vector <int> y) {
		int n = x.size();
		memset(dp, 0, sizeof(dp));

		REP(i, 1, n) {
			int j = (i - 1 + n) % n;
			int k = (i + 1 + n) % n;

			dp[i][0] = max(dp[j][0], dp[j][1]);
			dp[i][1] = dp[j][0] + sqrt((x[j] - x[k]) * (x[j] - x[k]) + (y[j] - y[k]) * (y[j] - y[k]));
		}

		double ans = 0;
		rep(i, n) {
			rep(j, 2) {
				ans = max(ans, dp[i][j]);
			}
		}

		memset(dp, 0, sizeof(dp));
		rep(i, n - 1) {
			int j = (i - 1 + n) % n;
			int k = (i + 1 + n) % n;

			dp[i][0] = max(dp[j][0], dp[j][1]);
			dp[i][1] = dp[j][0] + sqrt((x[j] - x[k]) * (x[j] - x[k]) + (y[j] - y[k]) * (y[j] - y[k]));
		}

		rep(i, n) {
			rep(j, 2) {
				ans = max(ans, dp[i][j]);
			}
		}

		return ans / 2;
	}
};
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces352-div2C Recycling Bottles]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/12/codeforces352-div2-recycling-bottles/"/>
    <updated>2016-05-12T14:55:05+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/12/codeforces352-div2-recycling-bottles</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://codeforces.com/contest/672/problem/C">Problem - C - Codeforces</a></h4><p>It was recycling day in Kekoland. To celebrate it Adil and Bera went to Central Perk where they can take bottles from the ground and put them into a recycling bin. We can think Central Perk as coordinate plane. There are n bottles on the ground, the i-th bottle is located at position .</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

荷物は一個しか持てないので，毎回拾って戻して，拾って戻してを繰り返す．なので，まずそれぞれから {% m %} (tx, ty) {% em %}から行く道と帰る道を両方張る．それから {% m %} a {% em %}が最初に拾った方が良いものがあれば拾う． {% m %} b {% em %}が最初に拾った方が良いものがあれば拾う．とする  
また，{% m %} a {% em %}が動かず {% m %} b {% em %}が全部拾う場合や， {% m %} a {% em %}が動かず {% m %} b {% em %}が拾う場合がある．最初に拾う点を選んでむしろ距離が増えてしまった場合は，その場に立ち止まるようにする．  
また距離の初期値のINFがオーバーフローした．制約に気を付けたい．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <cmath>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1LL<<60
#define pb push_back
#define mp make_pair
#define EPS 1e-8

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct Point {
	double x, y;

	Point(double x=0, double y=0) : x(x), y(y) {}

	Point operator+(const Point &o) const { return Point(x+o.x, y+o.y); }

	Point operator-(const Point &o) const { return Point(x-o.x, y-o.y); }

	Point operator*(const double m) const { return Point(x*m, y*m); }

	Point operator/(const double d) const { return Point(x/d, y/d); }

	bool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }

	bool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }
};

ostream& operator << (ostream& os, const Point& p) {
	os << "(" << p.x << ", " << p.y << ")";
	return os;
}

double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }
double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }
double atan(Point p) { return atan2(p.y, p.x); }
double norm(Point p) { return p.x * p.x + p.y * p.y; }
double abs(Point p) { return sqrt(norm(p)); }
double distancePP(Point p, Point o) { return sqrt(norm(o - p)); }

int main() {
	Point a, b, t;
	cin >> a.x >> a.y >> b.x >> b.y >> t.x >> t.y;

	int n;
	cin >> n;

	vector<Point> v(n);
	rep(i, n) cin >> v[i].x >> v[i].y;

	double sum = 0;
	rep(i, n) {
		sum += distancePP(t, v[i]) * 2;
	}

	double A = sum, B = sum;
	{
		double len = -INF;
		int id = -1;
		rep(i, n) {
			double p = distancePP(t, v[i]);
			double q = distancePP(a, v[i]);

			if(p - q > len) {
				len = p - q;
				id = i;
			}
		}

		double len2 = 0;
		int id2 = -1;
		rep(i, n) {
			if(i == id) continue;

			double p = distancePP(t, v[i]);
			double q = distancePP(b, v[i]);

			if(p - q > len2) {
				len2 = p - q;
				id2 = i;
			}
		}

		// cout <<  " A -> B" << endl;
		// cout << id << " " << id2 << endl;
		// cout << "sum:" << sum << endl;
		// cout << distancePP(t, v[id]) << " " << distancePP(a, v[id]) << " " << len << endl;
		// cout << distancePP(t, v[id2]) << " " << distancePP(b, v[id2]) << " " << len2 << endl;

		if(id != -1) A -= len;
		if(id2 != -1) A -= len2;
	}
	{
		double len = -INF;
		int id = -1;

		rep(i, n) {
			double p = distancePP(t, v[i]);
			double q = distancePP(b, v[i]);

			if(p - q > len) {
				len = p - q;
				id = i;
			}
		}

		double len2 = 0;
		int id2 = -1;
		rep(i, n) {
			if(i == id) continue;

			double p = distancePP(t, v[i]);
			double q = distancePP(a, v[i]);

			if(p - q > len2) {
				len2 = p - q;
				id2 = i;
			}
		}

		// cout <<  " B -> A" << endl;
		// cout << id << " " << id2 << endl;
		// cout << "sum:" << sum << endl;
		// cout << distancePP(t, v[id]) << " " << distancePP(b, v[id]) << " " << len << endl;
		// cout << distancePP(t, v[id2]) << " " << distancePP(a, v[id2]) << " " << len2 << endl;

		if(id != -1) B -= len;
		if(id2 != -1) B -= len2;
	}

	cout << fixed;
	cout.precision(20);
	cout << min(A, B) << endl;

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ABC010C 浮気調査]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc010c-fu-qi-diao-cha/"/>
    <updated>2016-04-03T17:05:27+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc010c-fu-qi-diao-cha</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-branding="0" data-card-type="article-full"><h4><a href="http://abc010.contest.atcoder.jp/tasks/abc010_3">C: 浮気調査 - AtCoder Beginner Contest 010 | AtCoder</a></h4><p>(null)</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

一人ひとり，その場所に行って電話に出た場所まで {% m %} T {% em %}以内にいけるを試す．移動した距離が {% m %} T * V {% em %}より小さければ可能である．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <cmath>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair
#define EPS 1e-8
#define equals(a,b) fabs((a) - (b)) < EPS

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct Point {
	double x, y;

	Point(double x=0, double y=0) : x(x), y(y) {}

	Point operator+(const Point &o) const { return Point(x+o.x, y+o.y); }

	Point operator-(const Point &o) const { return Point(x-o.x, y-o.y); }

	Point operator*(const double m) const { return Point(x*m, y*m); }

	Point operator/(const double d) const { return Point(x/d, y/d); }

	bool operator<(const Point &o) const { return x != o.x ? x < o.x : y < o.y; }

	bool operator==(const Point &o) const { return fabs(x-o.x) < EPS && fabs(y-o.y) < EPS; }
};

ostream& operator << (ostream& os, const Point& p) {
	os << "(" << p.x << ", " << p.y << ")";
	return os;
}

double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }
double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }
double atan(Point p) { return atan2(p.y, p.x); }
double norm(Point p) { return p.x * p.x + p.y * p.y; }
double abs(Point p) { return sqrt(norm(p)); }
double distancePP(Point p, Point o) { return sqrt(norm(o - p)); }

int main() {
	Point s, t;
	int T, V;
	cin >> s.x >> s.y >> t.x >> t.y >> T >> V;

	bool flag = false;

	int n;
	cin >> n;

	rep(i, n) {
		Point p;
		cin >> p.x >> p.y;

		if(distancePP(s, p) + distancePP(p, t)  <= T * V) {
			flag = true;
		}
	}

	if(flag) {
		cout << "YES" << endl;
	} else {
		cout << "NO" << endl;
	}

	return 0;
}
```

]]></content>
  </entry>
  
</feed>
