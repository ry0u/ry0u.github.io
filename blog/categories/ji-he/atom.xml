<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 幾何 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/ji-he/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2015-07-14T15:05:34+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SRM662 Flee]]></title>
    <link href="http://ry0u.github.io/blog/2015/07/11/srm662-flee/"/>
    <updated>2015-07-11T22:34:20+09:00</updated>
    <id>http://ry0u.github.io/blog/2015/07/11/srm662-flee</id>
    <content type="html"><![CDATA[<p>(0,0)から(10<sup>100</sup>,0)に行きたい．最大3つまで警備員の場所が与えられる．目的地に行くことが出来る最大の距離を求める．</p>

<p>Sample0<br/>
<img src="/images/SRM662/sample1.png"><br/>
右にそのまま行く</p>

<p>Sample1<br/>
<img src="/images/SRM662/sample2.png"><br/>
これ以上大きくすると原点を覆ってしまう.また同じ点が与えられることもある</p>

<p>Sample2<br/>
<img src="/images/SRM662/sample3.png"><br/>
右の道は行けないけど左上を通ればよい</p>

<p>Sample3<br/>
<img src="/images/SRM662/sample4.png"><br/>
これもSample0と同様右でよい</p>

<h1>考察</h1>

<p>場合分けして考えた.<br/>
- n = 1の時は，原点との距離が最大の距離である<br/>
- n = 2の時は，原点との距離が小さい方が最大の距離である<br/>
- n = 3の時は，その3点で構成される三角形に内包されているかいないかに分ける</p>

<h3>内包されていない場合</h3>

<p>具体的に内包されていないとは次のような場合である
<img src="/images/SRM662/image1.png"><br/>
このような場合は原点を覆わないようにすればよいので，原点との距離が最小となる距離を選べばよい
<img src="/images/SRM662/image2.png"></p>

<h3>内包されている場合</h3>

<p>Sample0を考える．この場合の原点との距離が最小なのは5.09&hellip;である．しかしこの距離を採用すると，これでは目的地に行くことが出来ない．
<img src="/images/SRM662/image3.png"><br/>
ここで答えの5は(1,5)と(1,-5)との距離の半分である．つまり原点を覆わずに，円が重ならない場所が1つでもあればよい．
<img src="/images/SRM662/image4.png"></p>

<h1>Code</h1>

<p>内包されている場合は各頂点と原点との距離の最小値と，各頂点間の距離の半分の中から条件を満たす最大値を返す．また距離を考える場合,ルートを取らずに自乗和を比較した(sampleで死んだ)．</p>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;cstring&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;cmath&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define EPS 1e-9
#define INF 1&lt;&lt;30

using namespace std;
typedef long long ll;

struct Point {
    double x, y;

    Point(double x=0, double y=0) : x(x), y(y) {}

    Point operator+(const Point &amp;o) const { return Point(x+o.x, y+o.y); }

    Point operator-(const Point &amp;o) const { return Point(x-o.x, y-o.y); }

    Point operator*(const double m) const { return Point(x*m, y*m); }

    Point operator/(const double d) const { return Point(x/d, y/d); }

    bool operator&lt;(const Point &amp;o) const { return x != o.x ? x &lt; o.x : y &lt; o.y; }

    bool operator==(const Point &amp;o) const { return fabs(x-o.x) &lt; EPS &amp;&amp; fabs(y-o.y) &lt; EPS; }

    double cross(const Point &amp;o) const { return x * o.y - y * o.x; }

    double dot(const Point &amp;o) const { return x * o.x + y * o.y; }

    double atan() const { return atan2(y, x); }

    double norm() const { return sqrt(dot(*this)); }

    double distance(const Point &amp;o) const { return (o - (*this)).norm(); }

    double area(const Point &amp;a,const Point &amp;b) {
        Point p = a - (*this), p2 = b - (*this); 
        return p.cross(p2);
    }

    double area_abs(const Point &amp;a,const Point &amp;b) const {
        Point p = a - (*this), p2 = b - (*this);
        return fabs(p.cross(p2)) / 2.0;
    }   

    // //線分abが自身に含まれているのかどうか判断する
    // int between(const Point &amp;a,const Point &amp;b) {
    //     if(area(a,b) != 0) return 0;
    //
    //     if(a.x != b.x)  return ((a.x &lt;= x) &amp;&amp; (x &lt;= b.x) || (a.x &gt;= x) &amp;&amp; (x &gt;= b.x));
    //     else return ((a.y &lt;= y) &amp;&amp; (y &lt;= b.y) || (a.y &gt;= y) &amp;&amp; (y &gt;= b.y));
    // }      

    double distance_seg(const Point&amp; a,const Point&amp; b) {
        if((b-a).dot(*this-a) &lt; EPS) {
            return (*this-a).norm();
        }
        if((a-b).dot(*this-b) &lt; EPS) {
            return (*this-b).norm();
        }
        return abs((b-a).cross(*this-a)) / (b-a).norm();
    }

    bool hitPolygon(const Point&amp; a,const Point&amp; b,const Point&amp; c) {
        double t = (b-a).cross(*this-b);
        double t2 = (c-b).cross(*this-c);
        double t3 = (a-c).cross(*this-a);   

        if((t &gt; 0 &amp;&amp; t2 &gt; 0 &amp;&amp; t3 &gt; 0) || ( t &lt; 0 &amp;&amp; t2 &lt; 0 &amp;&amp; t3 &lt; 0)) {
            return true;
        }

        return false;
    }
};

class Flee {
    public:
    double maximalSafetyLevel(vector &lt;int&gt; x, vector &lt;int&gt; y) {
        int n = x.size();

        vector&lt;Point&gt; v;
        map&lt;pair&lt;int,int&gt;,bool &gt; m;
        rep(i,n) {
            pair&lt;int,int&gt; p = make_pair(x[i],y[i]);
            if(m[p]) continue;

            v.push_back(Point(x[i],y[i]));
            m[p] = true;
        }

        double ans = 0;

        if(v.size() == 1) {
            ans = v[0].norm();
        }
        else if(v.size() == 2) {
            ans = min(v[0].norm(),v[1].norm());
        }else {
            vector&lt;int&gt; d;
            int res = INF;
            rep(i,v.size()) {
                res = min(res,(int)(v[i]*2).dot(v[i]*2));
            }

            d.push_back(res);

            Point p(0,0);
            if(p.hitPolygon(v[0],v[1],v[2])) {
                rep(i,v.size()) {
                    rep(j,v.size()) {
                        if(i == j) continue;

                        Point p(v[i]-v[j]);
                        if(p.dot(p) &lt; res) {
                            d.push_back(p.dot(p));
                        }
                    }
                }

                sort(d.begin(),d.end(),greater&lt;double&gt;());
                d.erase(unique(d.begin(),d.end()),d.end());

                rep(k,d.size()) {
                    int len = d[k];
                    bool flag = false;
                    Point p1(v[0].x-v[1].x, v[0].y-v[1].y);
                    Point p2(v[0].x-v[2].x, v[0].y-v[2].y);
                    Point p3(v[1].x-v[2].x, v[1].y-v[2].y);

                    int r = (int)p1.x*p1.x + p1.y*p1.y;
                    int r2 = (int)p2.x*p2.x + p2.y*p2.y;
                    int r3 = (int)p3.x*p3.x + p3.y*p3.y;

                    if(r &gt;= len) {
                        flag = true;
                    }
                    if(r2 &gt;= len) {
                        flag = true;
                    }
                    if(r3 &gt;= len) {
                        flag = true;
                    }

                    if(flag) {
                        ans = sqrt(d[k])/2.0;
                        break;
                    }
                }
            }else {
                sort(d.begin(),d.end());
                ans = sqrt(d[0])/2.0;
            }
        }

        return ans;
    }
};
</code></pre>

<p>内包判定は外積を見れば良い．何かbetweenはコンパイル通らなくてコメントアウトが原因がよく分からない．とりあえずSystemTestは通ったけど，Pointを使わなくても，更に言えば場合分けをしなくても上手く書けそう． <br/>
今回は3点しかないが，これがn点になっても凸包を作って同じことをすれば良さそうに思える．</p>
]]></content>
  </entry>
  
</feed>
