<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 幅優先探索 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/fu-you-xian-tan-suo/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-04-19T23:49:28+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ0558 Cheese]]></title>
    <link href="http://ry0u.github.io/blog/2016/02/12/aoj0558-cheese/"/>
    <updated>2016-02-12T01:43:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/02/12/aoj0558-cheese</id>
    <content type="html"><![CDATA[<p>問題文<br/>
<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0558">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0558</a></p>

<!-- more -->


<p>N個の工場は1種類のみ生産するので，次に行くべき場所が一意に定まる．N回幅優先で最短時間をもとめも十分間に合う．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;queue&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int h, w, n;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; h &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; w) return true;
    return false;
}

int main() {
    cin &gt;&gt; h &gt;&gt; w &gt;&gt; n;

    vector&lt;string&gt; s(h);
    rep(i, h) cin &gt;&gt; s[i];

    int sx = -1, sy = -1;
    rep(i, h) {
        rep(j, w) {
            if(s[i][j] == 'S') {
                sy = i;
                sx = j;
            }
        }
    }

    int ans = 0, y = sy, x = sx;
    int d[1005][1005];
    bool used[1005][1005];

    rep(i, n) {
        queue&lt;P&gt; que;
        que.push(P(y, x));

        memset(used, 0, sizeof(used));
        used[y][x] = x;

        memset(d, 0, sizeof(d));
        int cnt = 0;

        while(que.size()) {
            P p = que.front();
            que.pop();

            if(s[p.first][p.second] == char('1' + i)) {
                ans += d[p.first][p.second];
                y = p.first;
                x = p.second;
                break;
            }

            rep(j, 4) {
                int ny = p.first + dy[j];
                int nx = p.second + dx[j];

                if(can(ny, nx) &amp;&amp; !used[ny][nx] &amp;&amp; s[ny][nx] != 'X') {
                    used[ny][nx] = true;
                    d[ny][nx] += d[p.first][p.second] + 1;
                    que.push(P(ny, nx));
                }
            }
        }
    }

    cout &lt;&lt; ans &lt;&lt; endl;
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
