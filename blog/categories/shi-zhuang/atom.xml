<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 実装 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/shi-zhuang/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-12-01T23:52:11+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1517 Challenge from Grandfather]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/11/aoj1517-challenge-from-grandfather/"/>
    <updated>2016-05-11T11:35:39+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/11/aoj1517-challenge-from-grandfather</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1517">Challenge from Grandfather | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

部分行列の回転，反転，左シフト，右シフト，島反転を実装する．  
回転は90度回転を{% m %} \frac{angle}{90} {% em %}回行う．  
反転，左シフト，右シフトはその通りにあって，島反転は幅優先で島を発見し反転していった．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int n, m;
int t[15][15];
vector<int> v[15];

void vrotate(int r, int c, int size, int angle) {
	if(angle == 0 || angle == 360) return;

	memset(t, 0, sizeof(t));

	rep(i, angle/90) {
		int col = c;
		for(int i = r + size - 1; i >= r; i--, col++) {
			REP(j, c, c + size) {
				t[r+j-c][col] = v[i][j];
			}
		}

		REP(i, r, r + size) {
			REP(j, c, c + size) {
				v[i][j] = t[i][j];
			}
		}
	}
}

void reversal(int r, int c, int size) {
	REP(i, r, min(n, r + size)) {
		REP(j, c, min(n, c + size)) {
			v[i][j] = !v[i][j];
		}
	}
}

void leftshift(int r) {
	int t = v[r][0];
	rep(i, n) {
		v[r][i] = v[r][i+1];
	}
	v[r][n-1] = t;
}

void rightshift(int r) {
	int t = v[r][n-1];
	for(int i = n-1; i >= 1; i--) {
		v[r][i] = v[r][i-1];
	}
	v[r][0] = t;
}

int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
bool used[15][15];

bool can(int y, int x) {
	if(0 <= y && y < n && 0 <= x && x < n) return true;
	return false;
}

void islandreversal(int r, int c) {
	queue<P> que;
	que.push(mp(r, c));

	memset(used, 0, sizeof(used));
	used[r][c] = true;
	int t = v[r][c];
	while(que.size()) {
		P p = que.front(); que.pop();
		int y = p.first;
		int x = p.second;

		if(v[y][x] == t) {
			v[y][x] = !v[y][x];
		}

		rep(i, 4) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if(can(ny, nx) && !used[ny][nx] && v[ny][nx] == t) {
				que.push(mp(ny, nx));
				used[ny][nx] = true;
			}
		}
	}
}

int main() {
	cin >> n >> m;

	memset(v, 0, sizeof(v));
	rep(i, n) {
		v[i].resize(n);
		rep(j, n) cin >> v[i][j];
	}

	rep(i, m) {
		int o;
		cin >> o;

		int r, c, size, angle;

		if(o == 0) { // rotate
			cin >> r >> c >> size >> angle;
			r--; c--;

			vrotate(r, c, size, angle);
		} else if(o == 1) { // reversal
			cin >> r >> c >> size;
			r--; c--;

			reversal(r, c, size);
		} else if(o == 2) { // left shift
			cin >> r;
			r--;

			leftshift(r);
		} else if(o == 3) { // right shift
			cin >> r;
			r--;
			rightshift(r);
		} else if(o == 4) { // Island reversal
			cin >> r >> c;
			r--; c--;
			islandreversal(r, c);
		}
	}

	rep(i, n) {
		rep(j, n) {
			cout << v[i][j];

			if(j == n-1) cout << endl;
			else cout << " ";
		}
	}

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1512 Smartphone Game]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/10/aoj1512-smartphone-game/"/>
    <updated>2016-05-10T00:50:38+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/10/aoj1512-smartphone-game</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1512">Smartphone Game | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

> ブロックを任意に1つだけ決めて、最大でn回まで上下左右に移動できる。移動先のブロックは移動元のブロックのあった場所に移動する。つまり、隣接したブロックを交換する事になる。

この部分が理解出来ていなかった．普通に {% m %} n {% em %}回まで，隣接しているブロック同士をswapしていて {% m %} 1 {% em %}つのブロックだけをswapしていくことが出来ていなかった．  
求めるのは{% m %} 1 {% em %}回のプレイで得られる最大の点数なので，まずは {% m %} n {% em %}回までswapしたブロックの状態をsetに突っ込む．その後，削除，移動で変化が無くなるまで続ける．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int cost[6];
bool used[5][5], flag;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
	if(0 <= y && y < 5 && 0 <= x && x < 5) return true;
	return false;
}

ll del(vector<vector<int> > &v, ll bonus) {
	memset(used, 0, sizeof(used));
	rep(i, 5) {
		rep(j, 5) {
			if(v[i][j] == 0) continue;

			int a = i;
			while(a + 1 <= 4 && v[a+1][j] == v[i][j]) {
				a++;
			}

			int b = i;
			while(b - 1 >= 0 && v[b-1][j] == v[i][j]) {
				b--;
			}

			int c = j;
			while(c + 1 <= 4 && v[i][c+1] == v[i][j]) {
				c++;
			}

			int d = j;
			while(d - 1 >= 0 && v[i][d-1] == v[i][j]) {
				d--;
			}

			if(a - b + 1 >= 3 || c - d + 1 >= 3) used[i][j] = true;
		}
	}

	ll ret = 0;
	rep(i, 5) {
		rep(j, 5) {
			if(used[i][j]) {
				ret += bonus * cost[v[i][j]];
				flag = true;
				v[i][j] = 0;
			}
		}
	}

	return ret;
}

void mov(vector<vector<int> > &v) {
	for(int i = 4; i >= 0; i--) {
		rep(j, 5) {
			int y = i;
			while(y + 1 <= 4 && v[y + 1][j] == 0) {
				swap(v[y][j], v[y+1][j]);
				y++;
			}
		}
	}
}

int n;
ll ans = 0;

set<vector<vector<int> > > res;

void dfs(int cnt, int y, int x, vector<vector<int> > v) {
	res.insert(v);

	if(cnt == n) {
		return;
	}

	rep(i, 4) {
		int ny = y + dy[i];
		int nx = x + dx[i];

		if(can(ny, nx)) {
			swap(v[y][x], v[ny][nx]);
			dfs(cnt + 1, ny, nx, v);
			swap(v[y][x], v[ny][nx]);
		}
	}
}

int main() {
	while(cin >> n && n != -1) {
		ans = 0;
		res.clear();

		vector<vector<int> > v(5, vector<int>(5));
		rep(i, 5) rep(j, 5) cin >> v[i][j];
		rep(i, 5) cin >> cost[i+1];

		rep(i, 5) {
			rep(j, 5) {
				dfs(0, i, j, v);
			}
		}

		set<vector<vector<int> > >::iterator ite;
		for(ite = res.begin(); ite != res.end(); ite++) {

			ll bonus = 1, sum = 0;
			vector<vector<int> > t = *ite;

			while(true) {
				flag = false;
				sum += del(t, bonus);

				if(flag) {
					mov(t);
					bonus++;

				} else break;
			}

			// cout << "----- : " << sum << endl;
			// rep(i, 5) {
			// 	rep(j, 5) {
			// 		cout << t[i][j] << " ";
			// 	}
			// 	cout << endl;
			// }
			ans = max(ans, sum);
		}

		cout << ans << endl;
	}

	return 0;
}
```
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1510 Independent Reserach]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/10/aoj1510-independent-reserach/"/>
    <updated>2016-05-10T00:43:06+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/10/aoj1510-independent-reserach</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1510">Independent Research | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->
グリッドが {% m %} 5 \times 5 \times 5 {% em %}， {% m %} N \leq 100 {% em %}なので，愚直にシュミレーション．そのマスの周り {% m %} 26 {% em %}マスに生息している生物の数を数えて，そのマスの誕生と死滅を判断する．  

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int n, c = 0;
int v[5][5][5], v2[5][5][5];
bool a[30], b[30];

int dx[26] = { 1,-1,	 0, 0,	   0, 0,	 1, 1,-1,-1,	 1, 1,-1,-1,	 0, 0, 0, 0,	 1, 1, 1, 1,	-1,-1,-1,-1};
int dy[26] = { 0, 0,	 1,-1,	   0, 0,	 1,-1, 1,-1,	 0, 0, 0, 0,	 1, 1,-1,-1,	 1, 1,-1,-1,	 1, 1,-1,-1};
int dz[26] = { 0, 0,	 0, 0,	   1,-1,	 0, 0, 0, 0,	 1,-1, 1,-1,	 1,-1, 1,-1,	 1,-1, 1,-1,	 1,-1, 1,-1};

bool can(int x,int y,int z) {
	if(0 <= x && x < 5 && 0 <= y && y < 5 && 0 <= z && z < 5) return true;
	return false;
}

int main() {
	while(cin >> n && n) {
		memset(v, 0, sizeof(v));
		memset(v2, 0, sizeof(v2));

		rep(i, 5) {
			rep(j, 5) {
				string s;
				cin >> s;

				rep(k, 5) {
					v[i][j][k] = s[k] - '0';
				}
			}
		}

		int m1;
		cin >> m1;

		memset(a, 0, sizeof(a));
		rep(i, m1) {
			int x;
			cin >> x;
			a[x] = true;
		}

		int m2;
		cin >> m2;
		memset(b, 0, sizeof(b));
		rep(i, m2) {
			int x;
			cin >> x;
			b[x] = true;
		}

		rep(q, n) {
			rep(i, 5) rep(j, 5) rep(k, 5) v2[i][j][k] = v[i][j][k];
			rep(i, 5) {
				rep(j, 5) {
					rep(k, 5) {
						int sum = 0;

						rep(l, 26) {
							int x = i + dx[l];
							int y = j + dy[l];
							int z = k + dz[l];

							if(can(x, y, z)) sum += v[x][y][z];
						}

						if(v[i][j][k] == 0) {
							if(a[sum]) {
								v2[i][j][k] = 1;
							}
						} else {
							if(!b[sum]) {
								v2[i][j][k] = 0;
							}
						}
					}
				}
			}

			rep(i, 5) rep(j, 5) rep(k, 5) v[i][j][k] = v2[i][j][k];
		}

		if(c) cout << endl;
		cout << "Case " << c + 1 << ":" << endl;
		c++;

		rep(i, 5) {
			if(i) cout << endl;
			rep(j, 5) {
				rep(k, 5) {
					cout << v[i][j][k];
				}
				cout << endl;
			}
		}
	}

	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1174 Identically Colored Panels Connection]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/18/aoj1174-identically-colored-panels-connection/"/>
    <updated>2016-04-18T23:00:29+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/18/aoj1174-identically-colored-panels-connection</id>
    <content type="html"><![CDATA[<a class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article" href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1174">Identically Colored Panels Connection</a>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

塗る色を決めて順番に塗っていく． それぞれ  

* {% m %} rec {% em %} : 始点から探索して{% m %} c {% em %}と同じパネルが何色あるか
* {% m %} dfs {% em %} : 始点から探索して{% m %} target {% em %}の色を {% m %} change {% em %}にする．
* {% m %} func {% em %} : {% m %} i {% em %}回塗った状態． 最終的に{% m %} 5 {% em %}回塗った回数を答えるが，最後に {% m %} c {% em %}に塗り替えた場合なので，{% m %} 4 {% em %}回塗った後に {% m %} c {% em %}に塗って {% m %} rec {% em %}を呼ぶ．

>ただし，電極は左上角のパネルに固定されていることとする． 

の文を見逃していて，塗り始める場所を全探索していてSampleがずっと合わなかった...  
全体的に辛い

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int h, w, c;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
	if(0 <= y && y < h && 0 <= x && x < w) return true;
	return false;
}

int cnt = 0, sy = 0, sx = 0;
bool used[10][10];
vector< vector<int> > v;

void rec(int y, int x) {
	used[y][x] = true;
	cnt++;

	rep(i, 4) {
		int ny = y + dy[i];
		int nx = x + dx[i];

		if(can(ny, nx) && !used[ny][nx] && v[ny][nx] == c) {
			rec(ny, nx);
		}
	}
}

int target, change;

void dfs(int y, int x) {
	v[y][x] = change;
	rep(i, 4) {
		int ny = y + dy[i];
		int nx = x + dx[i];

		if(can(ny, nx) && v[ny][nx] == target) {
			dfs(ny, nx);
		}
	}
}

int ans = 0;
void func(vector< vector<int> > t, int id) {
	// cout << " ------ func ---- :" << id << endl;
	// rep(i, h) {
	// 	rep(j, w) cout << t[i][j] << " ";
	// 	cout << endl;
	// }
	if(id == 4) {
		v = t;
		target = t[sy][sx];

		if(target == c) return;
		change = c;
		dfs(sy, sx);

		cnt = 0;
		memset(used, 0, sizeof(used));
		rec(sy, sx);
		ans = max(ans, cnt);
		return;
	}

	REP(i, 1, 7) {
		if(i == t[sy][sx]) continue;
		v = t;
		target = t[sy][sx]; change = i;
		dfs(sy, sx);
		func(v, id + 1);
	}
}

int main() {
	while(cin >> h >> w >> c) {
		if(h == 0 && w == 0 && c == 0) break;

		v.resize(h);
		rep(i, h) {
			v[i].resize(w);
			rep(j, w) cin >> v[i][j];
		}

		ans = 0;
		func(v, 0);

		cout << ans << endl;
	}
	return 0;
}
```

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1326 Stylish]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/26/aoj1326-stylish/"/>
    <updated>2016-03-26T21:21:31+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/26/aoj1326-stylish</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1326">Stylish</a></h4><p>Stylish is a programming language whose syntax comprises names, that are sequences of Latin alphabet letters, three types of grouping symbols, periods ('.'), and newlines. Grouping symbols, namely round brackets ('(' and ')'), curly brackets ('{' and '}'), and square brackets ('[' and ']'), must match and be nested properly.</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

i番目までの括弧の量を先に計算しておく．{% m %} R {% em %}, {% m %} C {% em %}, {% m %} S {% em %}を総当りしてインデントが合う組み合わせを見つける． {% m %} 2 {% em %}つ以上ある場合は {% m %} -1 {% em %}にする．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	int n, m;
	while(cin >> n >> m) {
		if(n == 0 && m == 0) break;

		vector<string> v(n), v2(m);
		rep(i, n) cin >> v[i];
		rep(i, m) cin >> v2[i];

		int r[105], c[105], s[105];
		memset(r, 0, sizeof(r));
		memset(c, 0, sizeof(c));
		memset(s, 0, sizeof(s));

		REP(i, 1, n) {
			r[i] = r[i-1];
			c[i] = c[i-1];
			s[i] = s[i-1];
			rep(j, v[i-1].size()) {
				char ch = v[i-1][j];
				if(ch == '(') r[i]++;
				if(ch == ')') r[i]--;
				if(ch == '{') c[i]++;
				if(ch == '}') c[i]--;
				if(ch == '[') s[i]++;
				if(ch == ']') s[i]--;
			}
		}

		int r2[105], c2[105], s2[105];
		memset(r2, 0, sizeof(r2));
		memset(c2, 0, sizeof(c2));
		memset(s2, 0, sizeof(s2));

		REP(i, 1, m) {
			r2[i] = r2[i-1];
			c2[i] = c2[i-1];
			s2[i] = s2[i-1];
			rep(j, v2[i-1].size()) {
				char ch = v2[i-1][j];
				if(ch == '(') r2[i]++;
				if(ch == ')') r2[i]--;
				if(ch == '{') c2[i]++;
				if(ch == '}') c2[i]--;
				if(ch == '[') s2[i]++;
				if(ch == ']') s2[i]--;
			}
		}

		int d[105];
		memset(d, 0, sizeof(d));

		rep(i, n) {
			rep(j, v[i].size()) {
				if(v[i][j] != '.') {
					d[i] = j;
					break;
				}
			}
		}

		vector<int> ans(m);
		rep(i, m) ans[i] = INF;

		REP(i, 1, 21) {
			REP(j, 1, 21) {
				REP(k, 1, 21) {
					bool flag = true;

					rep(l, n) {
						if(d[l] == i * r[l] + j * c[l] + k * s[l]) continue;
						flag = false;
					}

					if(flag) {
						rep(l, m) {
							int d = i * r2[l] + j * c2[l] + k * s2[l];

							if(ans[l] == INF) ans[l] = d;
							else if(ans[l] != d) ans[l] = -1;
						}
					}
				}
			}
		}

		rep(i, m) {
			cout << ans[i];
			if(i == m-1) cout << endl;
			else cout << " ";
		}
	}

	return 0;
}
```

]]></content>
  </entry>
  
</feed>
