<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 実装 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/shi-zhuang/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-05-10T00:56:36+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ1512 Smartphone Game]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/10/aoj1512-smartphone-game/"/>
    <updated>2016-05-10T00:50:38+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/10/aoj1512-smartphone-game</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1512">Smartphone Game | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<blockquote><p>ブロックを任意に1つだけ決めて、最大でn回まで上下左右に移動できる。移動先のブロックは移動元のブロックのあった場所に移動する。つまり、隣接したブロックを交換する事になる。</p></blockquote>

<p>この部分が理解出来ていなかった．普通に <script type="math/tex"> n </script>回まで，隣接しているブロック同士をswapしていて <script type="math/tex"> 1 </script>つのブロックだけをswapしていくことが出来ていなかった．<br/>
求めるのは<script type="math/tex"> 1 </script>回のプレイで得られる最大の点数なので，まずは <script type="math/tex"> n </script>回までswapしたブロックの状態をsetに突っ込む．その後，削除，移動で変化が無くなるまで続ける．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int cost[6];
bool used[5][5], flag;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; 5 &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; 5) return true;
    return false;
}

ll del(vector&lt;vector&lt;int&gt; &gt; &amp;v, ll bonus) {
    memset(used, 0, sizeof(used));
    rep(i, 5) {
        rep(j, 5) {
            if(v[i][j] == 0) continue;

            int a = i;
            while(a + 1 &lt;= 4 &amp;&amp; v[a+1][j] == v[i][j]) {
                a++;
            }

            int b = i;
            while(b - 1 &gt;= 0 &amp;&amp; v[b-1][j] == v[i][j]) {
                b--;
            }

            int c = j;
            while(c + 1 &lt;= 4 &amp;&amp; v[i][c+1] == v[i][j]) {
                c++;
            }

            int d = j;
            while(d - 1 &gt;= 0 &amp;&amp; v[i][d-1] == v[i][j]) {
                d--;
            }

            if(a - b + 1 &gt;= 3 || c - d + 1 &gt;= 3) used[i][j] = true;
        }
    }

    ll ret = 0;
    rep(i, 5) {
        rep(j, 5) {
            if(used[i][j]) {
                ret += bonus * cost[v[i][j]];
                flag = true;
                v[i][j] = 0;
            }
        }
    }

    return ret;
}

void mov(vector&lt;vector&lt;int&gt; &gt; &amp;v) {
    for(int i = 4; i &gt;= 0; i--) {
        rep(j, 5) {
            int y = i;
            while(y + 1 &lt;= 4 &amp;&amp; v[y + 1][j] == 0) {
                swap(v[y][j], v[y+1][j]);
                y++;
            }
        }
    }
}

int n;
ll ans = 0;

set&lt;vector&lt;vector&lt;int&gt; &gt; &gt; res;

void dfs(int cnt, int y, int x, vector&lt;vector&lt;int&gt; &gt; v) {
    res.insert(v);

    if(cnt == n) {
        return;
    }

    rep(i, 4) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if(can(ny, nx)) {
            swap(v[y][x], v[ny][nx]);
            dfs(cnt + 1, ny, nx, v);
            swap(v[y][x], v[ny][nx]);
        }
    }
}

int main() {
    while(cin &gt;&gt; n &amp;&amp; n != -1) {
        ans = 0;
        res.clear();

        vector&lt;vector&lt;int&gt; &gt; v(5, vector&lt;int&gt;(5));
        rep(i, 5) rep(j, 5) cin &gt;&gt; v[i][j];
        rep(i, 5) cin &gt;&gt; cost[i+1];

        rep(i, 5) {
            rep(j, 5) {
                dfs(0, i, j, v);
            }
        }

        set&lt;vector&lt;vector&lt;int&gt; &gt; &gt;::iterator ite;
        for(ite = res.begin(); ite != res.end(); ite++) {

            ll bonus = 1, sum = 0;
            vector&lt;vector&lt;int&gt; &gt; t = *ite;

            while(true) {
                flag = false;
                sum += del(t, bonus);

                if(flag) {
                    mov(t);
                    bonus++;

                } else break;
            }

            // cout &lt;&lt; "----- : " &lt;&lt; sum &lt;&lt; endl;
            // rep(i, 5) {
            //  rep(j, 5) {
            //      cout &lt;&lt; t[i][j] &lt;&lt; " ";
            //  }
            //  cout &lt;&lt; endl;
            // }
            ans = max(ans, sum);
        }

        cout &lt;&lt; ans &lt;&lt; endl;
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1510 Independent Reserach]]></title>
    <link href="http://ry0u.github.io/blog/2016/05/10/aoj1510-independent-reserach/"/>
    <updated>2016-05-10T00:43:06+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/05/10/aoj1510-independent-reserach</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1510">Independent Research | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>グリッドが <script type="math/tex"> 5 \times 5 \times 5 </script>， <script type="math/tex"> N \leq 100 </script>なので，愚直にシュミレーション．そのマスの周り <script type="math/tex"> 26 </script>マスに生息している生物の数を数えて，そのマスの誕生と死滅を判断する．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int n, c = 0;
int v[5][5][5], v2[5][5][5];
bool a[30], b[30];

int dx[26] = { 1,-1,     0, 0,     0, 0,     1, 1,-1,-1,     1, 1,-1,-1,     0, 0, 0, 0,     1, 1, 1, 1,    -1,-1,-1,-1};
int dy[26] = { 0, 0,     1,-1,     0, 0,     1,-1, 1,-1,     0, 0, 0, 0,     1, 1,-1,-1,     1, 1,-1,-1,     1, 1,-1,-1};
int dz[26] = { 0, 0,     0, 0,     1,-1,     0, 0, 0, 0,     1,-1, 1,-1,     1,-1, 1,-1,     1,-1, 1,-1,     1,-1, 1,-1};

bool can(int x,int y,int z) {
    if(0 &lt;= x &amp;&amp; x &lt; 5 &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; 5 &amp;&amp; 0 &lt;= z &amp;&amp; z &lt; 5) return true;
    return false;
}

int main() {
    while(cin &gt;&gt; n &amp;&amp; n) {
        memset(v, 0, sizeof(v));
        memset(v2, 0, sizeof(v2));

        rep(i, 5) {
            rep(j, 5) {
                string s;
                cin &gt;&gt; s;

                rep(k, 5) {
                    v[i][j][k] = s[k] - '0';
                }
            }
        }

        int m1;
        cin &gt;&gt; m1;

        memset(a, 0, sizeof(a));
        rep(i, m1) {
            int x;
            cin &gt;&gt; x;
            a[x] = true;
        }

        int m2;
        cin &gt;&gt; m2;
        memset(b, 0, sizeof(b));
        rep(i, m2) {
            int x;
            cin &gt;&gt; x;
            b[x] = true;
        }

        rep(q, n) {
            rep(i, 5) rep(j, 5) rep(k, 5) v2[i][j][k] = v[i][j][k];
            rep(i, 5) {
                rep(j, 5) {
                    rep(k, 5) {
                        int sum = 0;

                        rep(l, 26) {
                            int x = i + dx[l];
                            int y = j + dy[l];
                            int z = k + dz[l];

                            if(can(x, y, z)) sum += v[x][y][z];
                        }

                        if(v[i][j][k] == 0) {
                            if(a[sum]) {
                                v2[i][j][k] = 1;
                            }
                        } else {
                            if(!b[sum]) {
                                v2[i][j][k] = 0;
                            }
                        }
                    }
                }
            }

            rep(i, 5) rep(j, 5) rep(k, 5) v[i][j][k] = v2[i][j][k];
        }

        if(c) cout &lt;&lt; endl;
        cout &lt;&lt; "Case " &lt;&lt; c + 1 &lt;&lt; ":" &lt;&lt; endl;
        c++;

        rep(i, 5) {
            if(i) cout &lt;&lt; endl;
            rep(j, 5) {
                rep(k, 5) {
                    cout &lt;&lt; v[i][j][k];
                }
                cout &lt;&lt; endl;
            }
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1174 Identically Colored Panels Connection]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/18/aoj1174-identically-colored-panels-connection/"/>
    <updated>2016-04-18T23:00:29+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/18/aoj1174-identically-colored-panels-connection</id>
    <content type="html"><![CDATA[<p><a class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article" href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1174">Identically Colored Panels Connection</a></p>

<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>塗る色を決めて順番に塗っていく． それぞれ</p>

<ul>
<li><script type="math/tex"> rec </script> : 始点から探索して<script type="math/tex"> c </script>と同じパネルが何色あるか</li>
<li><script type="math/tex"> dfs </script> : 始点から探索して<script type="math/tex"> target </script>の色を <script type="math/tex"> change </script>にする．</li>
<li><script type="math/tex"> func </script> : <script type="math/tex"> i </script>回塗った状態． 最終的に<script type="math/tex"> 5 </script>回塗った回数を答えるが，最後に <script type="math/tex"> c </script>に塗り替えた場合なので，<script type="math/tex"> 4 </script>回塗った後に <script type="math/tex"> c </script>に塗って <script type="math/tex"> rec </script>を呼ぶ．</li>
</ul>


<blockquote><p>ただし，電極は左上角のパネルに固定されていることとする．</p></blockquote>

<p>の文を見逃していて，塗り始める場所を全探索していてSampleがずっと合わなかった&hellip;<br/>
全体的に辛い</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int h, w, c;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; h &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; w) return true;
    return false;
}

int cnt = 0, sy = 0, sx = 0;
bool used[10][10];
vector&lt; vector&lt;int&gt; &gt; v;

void rec(int y, int x) {
    used[y][x] = true;
    cnt++;

    rep(i, 4) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if(can(ny, nx) &amp;&amp; !used[ny][nx] &amp;&amp; v[ny][nx] == c) {
            rec(ny, nx);
        }
    }
}

int target, change;

void dfs(int y, int x) {
    v[y][x] = change;
    rep(i, 4) {
        int ny = y + dy[i];
        int nx = x + dx[i];

        if(can(ny, nx) &amp;&amp; v[ny][nx] == target) {
            dfs(ny, nx);
        }
    }
}

int ans = 0;
void func(vector&lt; vector&lt;int&gt; &gt; t, int id) {
    // cout &lt;&lt; " ------ func ---- :" &lt;&lt; id &lt;&lt; endl;
    // rep(i, h) {
    //  rep(j, w) cout &lt;&lt; t[i][j] &lt;&lt; " ";
    //  cout &lt;&lt; endl;
    // }
    if(id == 4) {
        v = t;
        target = t[sy][sx];

        if(target == c) return;
        change = c;
        dfs(sy, sx);

        cnt = 0;
        memset(used, 0, sizeof(used));
        rec(sy, sx);
        ans = max(ans, cnt);
        return;
    }

    REP(i, 1, 7) {
        if(i == t[sy][sx]) continue;
        v = t;
        target = t[sy][sx]; change = i;
        dfs(sy, sx);
        func(v, id + 1);
    }
}

int main() {
    while(cin &gt;&gt; h &gt;&gt; w &gt;&gt; c) {
        if(h == 0 &amp;&amp; w == 0 &amp;&amp; c == 0) break;

        v.resize(h);
        rep(i, h) {
            v[i].resize(w);
            rep(j, w) cin &gt;&gt; v[i][j];
        }

        ans = 0;
        func(v, 0);

        cout &lt;&lt; ans &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ1326 Stylish]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/26/aoj1326-stylish/"/>
    <updated>2016-03-26T21:21:31+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/26/aoj1326-stylish</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1326">Stylish</a></h4><p>Stylish is a programming language whose syntax comprises names, that are sequences of Latin alphabet letters, three types of grouping symbols, periods ('.'), and newlines. Grouping symbols, namely round brackets ('(' and ')'), curly brackets ('{' and '}'), and square brackets ('[' and ']'), must match and be nested properly.</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>i番目までの括弧の量を先に計算しておく．<script type="math/tex"> R </script>, <script type="math/tex"> C </script>, <script type="math/tex"> S </script>を総当りしてインデントが合う組み合わせを見つける． <script type="math/tex"> 2 </script>つ以上ある場合は <script type="math/tex"> -1 </script>にする．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int main() {
    int n, m;
    while(cin &gt;&gt; n &gt;&gt; m) {
        if(n == 0 &amp;&amp; m == 0) break;

        vector&lt;string&gt; v(n), v2(m);
        rep(i, n) cin &gt;&gt; v[i];
        rep(i, m) cin &gt;&gt; v2[i];

        int r[105], c[105], s[105];
        memset(r, 0, sizeof(r));
        memset(c, 0, sizeof(c));
        memset(s, 0, sizeof(s));

        REP(i, 1, n) {
            r[i] = r[i-1];
            c[i] = c[i-1];
            s[i] = s[i-1];
            rep(j, v[i-1].size()) {
                char ch = v[i-1][j];
                if(ch == '(') r[i]++;
                if(ch == ')') r[i]--;
                if(ch == '{') c[i]++;
                if(ch == '}') c[i]--;
                if(ch == '[') s[i]++;
                if(ch == ']') s[i]--;
            }
        }

        int r2[105], c2[105], s2[105];
        memset(r2, 0, sizeof(r2));
        memset(c2, 0, sizeof(c2));
        memset(s2, 0, sizeof(s2));

        REP(i, 1, m) {
            r2[i] = r2[i-1];
            c2[i] = c2[i-1];
            s2[i] = s2[i-1];
            rep(j, v2[i-1].size()) {
                char ch = v2[i-1][j];
                if(ch == '(') r2[i]++;
                if(ch == ')') r2[i]--;
                if(ch == '{') c2[i]++;
                if(ch == '}') c2[i]--;
                if(ch == '[') s2[i]++;
                if(ch == ']') s2[i]--;
            }
        }

        int d[105];
        memset(d, 0, sizeof(d));

        rep(i, n) {
            rep(j, v[i].size()) {
                if(v[i][j] != '.') {
                    d[i] = j;
                    break;
                }
            }
        }

        vector&lt;int&gt; ans(m);
        rep(i, m) ans[i] = INF;

        REP(i, 1, 21) {
            REP(j, 1, 21) {
                REP(k, 1, 21) {
                    bool flag = true;

                    rep(l, n) {
                        if(d[l] == i * r[l] + j * c[l] + k * s[l]) continue;
                        flag = false;
                    }

                    if(flag) {
                        rep(l, m) {
                            int d = i * r2[l] + j * c2[l] + k * s2[l];

                            if(ans[l] == INF) ans[l] = d;
                            else if(ans[l] != d) ans[l] = -1;
                        }
                    }
                }
            }
        }

        rep(i, m) {
            cout &lt;&lt; ans[i];
            if(i == m-1) cout &lt;&lt; endl;
            else cout &lt;&lt; " ";
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ2002 X-Ray Screening System]]></title>
    <link href="http://ry0u.github.io/blog/2016/03/23/aoj2002-x-ray-screening-system/"/>
    <updated>2016-03-23T19:25:35+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/03/23/aoj2002-x-ray-screening-system</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2002">X-Ray Screening System | Aizu Online Judge</a></h4><p>上記の調査結果をふまえて，以下のような手荷物検査のためのモデルを考案した．それぞれの手荷物は X 線に対して透明である直方体の容器だとみなす．その中には X 線に対して不透明である複数の品物が入っている．ここで，直方体の 3 辺を x 軸，y 軸，z 軸とする座標系を考え，x 軸と平行な方向に X 線を照射して，y-z 平面に投影された画像を撮影する．撮影された画像は適当な大きさの格子に分割され，画像解析によって，それぞれの格子領域に映っている品物の材質が推定される．この会社には非常に高度の解析技術があり，材質の詳細な違いすらも解析することが可能であることから，品物の材質は互いに異なると考えることができる．なお，複数の品物が x 軸方向に関して重なっているときは，それぞれの格子領域について最も手前にある，すなわち x 座標が最小である品物の材質が得られる．また，2 つ以上の品物の x 座標が等しいことはないと仮定する．</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>もっとも手前にある品物から順番に処理していく．長方形なので，一番左上<script type="math/tex"> (sx, sy) </script>と右下 <script type="math/tex"> (gx, gy) </script>を持っておき， <script type="math/tex"> (sx, sy) </script>， <script type="math/tex"> (gx, sy) </script>， <script type="math/tex"> (sx, gy) </script>， <script type="math/tex"> (gx, gy) </script>の4角形全てに同じ品物の材質，または前面に他の品物がある時に埋めた．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int w, h;
int sy, sx, gy, gx;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};

bool can(int y,int x) {
    if(0 &lt;= y &amp;&amp; y &lt; h &amp;&amp; 0 &lt;= x &amp;&amp; x &lt; w) return true;
    return false;
}

vector&lt;string&gt; s;
char c;
bool used[55][55], visited[55][55];

bool check() {
    REP(i, sy, gy+1){
        REP(j, sx, gx+1) {
            if(s[i][j] == c || used[i][j]) continue;
            return false;
        }
    }
    return true;
}

void f() {
    REP(i, sy, gy+1) {
        REP(j, sx, gx+1) {
            used[i][j] = true;
        }
    }
}

int main() {
    int n;
    cin &gt;&gt; n;

    rep(q, n) {
        cin &gt;&gt; h &gt;&gt; w;
        s.resize(h);
        rep(i, h) cin &gt;&gt; s[i];

        memset(used, 0, sizeof(used));
        set&lt;char&gt; S;

        bool flag = true, update = true;
        while(update) {
            update = false;
            rep(i, h) {
                rep(j, w) {
                    if(s[i][j] == '.') continue;

                    if(used[i][j]) continue;

                    sy = i;
                    sx = j;
                    gy = i;
                    gx = j;
                    c = s[i][j];
                    memset(visited, 0, sizeof(visited));

                    rep(k, h) {
                        rep(l, w) {
                            if(s[k][l] == c) {
                                sy = min(sy, k);
                                sx = min(sx, l);
                                gy = max(gy, k);
                                gx = max(gx, l);
                            }
                        }
                    }

                    if(S.find(c) == S.end() &amp;&amp; check()) {
                        f();
                        S.insert(c);
                        update = true;
                    }
                }
            }
        }

        rep(i, h) {
            rep(j, w) {
                if(used[i][j]) continue;
                if(s[i][j] == '.') continue;
                flag = false;
            }
        }

        if(flag) cout &lt;&lt; "SAFE" &lt;&lt; endl;
        else cout &lt;&lt; "SUSPICIOUS" &lt;&lt; endl;

    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
