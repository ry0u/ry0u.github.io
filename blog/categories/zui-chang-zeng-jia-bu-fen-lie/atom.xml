<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 最長増加部分列 | ry0u_ydのblog]]></title>
  <link href="http://ry0u.github.io/blog/categories/zui-chang-zeng-jia-bu-fen-lie/atom.xml" rel="self"/>
  <link href="http://ry0u.github.io/"/>
  <updated>2016-04-27T23:36:02+09:00</updated>
  <id>http://ry0u.github.io/</id>
  <author>
    <name><![CDATA[ry0u_yd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ABC006D トランプ挿入ソート]]></title>
    <link href="http://ry0u.github.io/blog/2016/04/03/abc006d-toranpucha-ru-soto/"/>
    <updated>2016-04-03T14:38:50+09:00</updated>
    <id>http://ry0u.github.io/blog/2016/04/03/abc006d-toranpucha-ru-soto</id>
    <content type="html"><![CDATA[<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://abc006.contest.atcoder.jp/tasks/abc006_4">D: トランプ挿入ソート - AtCoder Beginner Contest 006 | AtCoder</a></h4><p>(null)</p></blockquote>


<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>




<!-- more -->


<p>カードを任意の場所に挿入することが出来るので，最長増加部分列でないカードをそれぞれ操作するのが最小になる．</p>

<h1>Code</h1>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;set&gt;

#define REP(i,k,n) for(int i=k;i&lt;n;i++)
#define rep(i,n) for(int i=0;i&lt;n;i++)
#define INF 1&lt;&lt;30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair&lt;int,int&gt; P;

int LIS(vector&lt;int&gt; v) {
    vector&lt;int&gt; ret(v.size() + 1);
    rep(i, v.size()+1) ret[i] = INF;
    rep(i, v.size()) {
        *lower_bound(ret.begin(), ret.end(), v[i]) = v[i];
    }

    return lower_bound(ret.begin(), ret.end(), INF) - ret.begin();
}

int main() {
    int n;
    cin &gt;&gt; n;

    vector&lt;int&gt; v(n);
    rep(i, n) cin &gt;&gt; v[i];

    cout &lt;&lt; n - LIS(v) &lt;&lt; endl;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
