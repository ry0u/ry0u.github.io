---
layout: post
title: "ABC008C コイン"
date: 2016-03-29 22:16:02 +0900
comments: true
categories: [AtCoder, ABC, 期待値]
---

<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://abc008.contest.atcoder.jp/tasks/abc008_3">C: コイン - AtCoder Beginner Contest 008 | AtCoder</a></h4><p>(null)</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

コインが{% m %} N {% em %}枚与えられる．{% m %} \frac{表になる枚数}{N!} {% em %}を求める．ある数{% m %} i {% em %}枚目が表になるか，裏になるかは{% m %} N {% em %}枚の内，{% m %} C\_{i} {% em %}の約数であるものの個数によって変わる．{% m %} i {% em %}枚目が表になる枚数は，表になる確率{% m %} a\_{i} {% em %}が分かれば{% m %} N! \cdot a\_{i} {% em %}で求まる．よって
{% math %}
\begin{eqnarray}
	\frac{表になる枚数}{N!} &=& \frac{N! \cdot a_{1} + N! \cdot a_{2} + ... + N! \cdot a_{N}}{N!} \\
							&=& \sum_{i=1} ^{N} a\_{i}
\end{eqnarray}
{% endmath %}
となり， {% m %} a_i {% em %}が求まれば良くなった．{% m %} C_i {% em %}の約数の個数を {% m %} s {% em %}と置き，コインの中で約数と自身のみ( {% m %} s+1個 {% em %})で考える．  
例えば約数をo, 自身をx，約数の個数を{% m %} 3 {% em %}とすると x o o o, o x o o, o o x o, o o o xの {% m %} 4 {% em %}パターンで表になるのは x o o oとo o x oの {% m %} 2 {% em %}パターンである．

* {% m %} sが奇数の時，表になる確率は\frac{\frac{1}{2}(s + 1)}{(s + 1)} = \frac{1}{2} {% em %}
* {% m %} sが偶数の時，表になる確率は\frac{\frac{1}{2}(s + 2)}{(s + 1)} {% em %}

後はこれをそれぞれ計算した．

---

色々書いてることが怪しい．後で見直す．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

int main() {
	int n;
	cin >> n;

	vector<int> v(n);
	rep(i, n) cin >> v[i];

	sort(v.begin(), v.end());

	int cnt[105];
	memset(cnt, 0, sizeof(cnt));

	rep(i, n) {
		rep(j, n) {
			if(i == j) continue;
			if(v[i] % v[j] == 0) {
				cnt[i]++;
			}
		}
	}
	
	double ans = 0;
	rep(i, n) {
		double d = cnt[i];

		if(cnt[i] % 2 == 1) {
			double a = 1 / 2.0;
			ans += a;
		} else {
			double a = ((d + 2) / 2.0) / (d + 1);
			ans += a;
		}

	}

	cout << fixed;
	cout.precision(20);
	cout << ans << endl;

	return 0;
}
```

