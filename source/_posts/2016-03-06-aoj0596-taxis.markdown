---
layout: post
title: "AOJ0596 Taxis"
date: 2016-03-06 01:40:26 +0900
comments: true
categories: [AOJ, dijkstra]
---

<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-type="article" data-card-branding="0"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0596">Taxis | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

タクシーの移動しか使わないのでタクシーの移動の場合のグラフを作り直す．まず連結している町の辺のコストを{% m %} 1 {% em %}にする．  
頂点{% m %} i {% em %}からdijkstraして{% m %} d[j] \leq R[i] {% em %}以下の場合に，{% m %} i \to j{% em %}にコスト{% m %} C[i] {% em %}の辺を張る．  
新しいグラフを構築したらそのグラフでdijkstra．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>
#include <queue>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

struct edge {
	int from,to;
	int cost;

	edge(int t,int c) : to(t),cost(c) {}
	edge(int f,int t,int c) : from(f),to(t),cost(c) {}

	bool operator<(const edge &e) const {
		return cost < e.cost;
	}
};

vector<edge> G[5005];
vector<int> g[5005];
int C[5005], R[5005], d[5005];

void dijkstra(int s,int n) {
	priority_queue<P,vector<P>,greater<P> > que;
	fill(d,d+n,INF);

	d[s] = 0;
	que.push(P(0,s));

	while(que.size()) {
		P p = que.top();
		que.pop();

		int v = p.second;
		if(d[v] < p.first) continue;

		rep(i,G[v].size()) {
			edge e = G[v][i];
			if(d[e.to] > d[v] + e.cost) {
				d[e.to] = d[v] + e.cost;
				que.push(P(d[e.to],e.to));
			}
		}
	}
}

int main() {
	int n, m;
	cin >> n >> m;

	memset(C, 0, sizeof(C));
	memset(R, 0, sizeof(R));
	rep(i, n) cin >> C[i] >> R[i];
	rep(i, m) {
		int s, t;
		cin >> s >> t;

		s--;
		t--;

		g[s].push_back(t);
		g[t].push_back(s);
	}

	rep(i, n) {
		fill(d, d + n, INF);

		priority_queue<P, vector<P>, greater<P> > que;
		que.push(mp(0, i));

		d[i] = 0;

		while(que.size()) {
			P p = que.top();
			que.pop();

			int v = p.second;

			if(d[v] < p.first) continue;

			rep(i, g[v].size()) {
				if(d[g[v][i]] > d[v] + 1) {
					d[g[v][i]] = d[v] + 1;
					que.push(mp(d[v] + 1, g[v][i]));
				}
			}
		}

		rep(j, n) {
			if(i == j) continue;
			if(d[j] <= R[i]) {
				G[i].push_back(edge(j, C[i]));
			}
		}
	}

	dijkstra(0, n);

	cout << d[n-1] << endl;

	return 0;
}
```
