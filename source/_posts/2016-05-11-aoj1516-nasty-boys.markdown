---
layout: post
title: "AOJ1516 Nasty Boys"
date: 2016-05-11 11:13:41 +0900
comments: true
categories: [AOJ, Vol15]
---

<blockquote class="embedly-card" data-card-key="39deea93f79745829254c0652225a544" data-card-controls="0" data-card-branding="0" data-card-type="article"><h4><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1516">Nasty Boys | Aizu Online Judge</a></h4><p>Introduction to Programming Introduction to Algorithms and Data Structures Library of Data Structures Library of Graph Algorithms Library of Computational Geometry Library of Dynamic Programming Library of Number Theory</p></blockquote>
<script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>

<!-- more -->

一筆書き出来るか，ということでグラフ作って奇数点の頂点を数えようかと思ったけど，グラフを作るなら，mapに突っ込んで {% m %} 1 {% em %}文字ずつ隣接しているか見たほうが早いと思い，そっちにした．

# Code

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <map>
#include <set>

#define REP(i,k,n) for(int i=k;i<n;i++)
#define rep(i,n) for(int i=0;i<n;i++)
#define INF 1<<30
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair<int,int> P;

map<char, set<char> > m;

int main() {

	m['A'].insert('B');
	m['A'].insert('D');

	m['B'].insert('A');
	m['B'].insert('C');
	m['B'].insert('E');

	m['C'].insert('B');
	m['C'].insert('F');

	m['D'].insert('A');
	m['D'].insert('E');
	m['D'].insert('G');

	m['E'].insert('B');
	m['E'].insert('D');
	m['E'].insert('F');
	m['E'].insert('H');

	m['F'].insert('C');
	m['F'].insert('E');
	m['F'].insert('I');

	m['G'].insert('D');
	m['G'].insert('H');

	m['H'].insert('E');
	m['H'].insert('G');
	m['H'].insert('I');

	m['I'].insert('F');
	m['I'].insert('H');

	rep(i, 1000) {
		string s;
		cin >> s;

		bool flag = true;
		rep(j, s.size()-1) {
			if(m[s[j]].find(s[j+1]) == m[s[j]].end()) {
				flag = false;
				break;
			}
		}

		if(flag) cout << s << endl;
	}


	return 0;
}
```

